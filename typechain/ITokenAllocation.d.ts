/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ITokenAllocationInterface extends ethers.utils.Interface {
  functions: {
    "accepted()": FunctionFragment;
    "allocationCount()": FunctionFragment;
    "canAdministerProtocol()": FunctionFragment;
    "locked()": FunctionFragment;
    "startTime()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "accepted", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allocationCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canAdministerProtocol",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "locked", values?: undefined): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;

  decodeFunctionResult(functionFragment: "accepted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allocationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canAdministerProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;

  events: {
    "Accepted()": EventFragment;
    "Claimed(uint256,uint256)": EventFragment;
    "EmergencyShutdownTokensBurned(address,uint256)": EventFragment;
    "Initialized()": EventFragment;
    "StakedTokens(address,uint256)": EventFragment;
    "Sweeped(uint256)": EventFragment;
    "UnstakedTokens(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Accepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EmergencyShutdownTokensBurned"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakedTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sweeped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakedTokens"): EventFragment;
}

export class ITokenAllocation extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ITokenAllocationInterface;

  functions: {
    accepted(overrides?: CallOverrides): Promise<[boolean]>;

    "accepted()"(overrides?: CallOverrides): Promise<[boolean]>;

    allocationCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "allocationCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    canAdministerProtocol(overrides?: CallOverrides): Promise<[boolean]>;

    "canAdministerProtocol()"(overrides?: CallOverrides): Promise<[boolean]>;

    locked(overrides?: CallOverrides): Promise<[BigNumber]>;

    "locked()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "startTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  accepted(overrides?: CallOverrides): Promise<boolean>;

  "accepted()"(overrides?: CallOverrides): Promise<boolean>;

  allocationCount(overrides?: CallOverrides): Promise<BigNumber>;

  "allocationCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  canAdministerProtocol(overrides?: CallOverrides): Promise<boolean>;

  "canAdministerProtocol()"(overrides?: CallOverrides): Promise<boolean>;

  locked(overrides?: CallOverrides): Promise<BigNumber>;

  "locked()"(overrides?: CallOverrides): Promise<BigNumber>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  "startTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    accepted(overrides?: CallOverrides): Promise<boolean>;

    "accepted()"(overrides?: CallOverrides): Promise<boolean>;

    allocationCount(overrides?: CallOverrides): Promise<BigNumber>;

    "allocationCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    canAdministerProtocol(overrides?: CallOverrides): Promise<boolean>;

    "canAdministerProtocol()"(overrides?: CallOverrides): Promise<boolean>;

    locked(overrides?: CallOverrides): Promise<BigNumber>;

    "locked()"(overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    "startTime()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Accepted(): EventFilter;

    Claimed(count: null, available: null): EventFilter;

    EmergencyShutdownTokensBurned(
      governor: string | null,
      count: null
    ): EventFilter;

    Initialized(): EventFilter;

    StakedTokens(settlement: string | null, count: null): EventFilter;

    Sweeped(count: null): EventFilter;

    UnstakedTokens(settlement: string | null): EventFilter;
  };

  estimateGas: {
    accepted(overrides?: CallOverrides): Promise<BigNumber>;

    "accepted()"(overrides?: CallOverrides): Promise<BigNumber>;

    allocationCount(overrides?: CallOverrides): Promise<BigNumber>;

    "allocationCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    canAdministerProtocol(overrides?: CallOverrides): Promise<BigNumber>;

    "canAdministerProtocol()"(overrides?: CallOverrides): Promise<BigNumber>;

    locked(overrides?: CallOverrides): Promise<BigNumber>;

    "locked()"(overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    "startTime()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accepted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accepted()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allocationCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "allocationCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canAdministerProtocol(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canAdministerProtocol()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    locked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "locked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
