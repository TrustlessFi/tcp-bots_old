/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IMarketInterface extends ethers.utils.Interface {
  functions: {
    "accrueInterest()": FunctionFragment;
    "collateralizationRequirement(uint8)": FunctionFragment;
    "lastPeriodGlobalInterestAccrued()": FunctionFragment;
    "stop()": FunctionFragment;
    "systemAccrueInterest()": FunctionFragment;
    "systemGetUpdatedPosition(uint64)": FunctionFragment;
    "systemNotifyCollateralPriceUpdated(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accrueInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralizationRequirement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastPeriodGlobalInterestAccrued",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "systemAccrueInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "systemGetUpdatedPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "systemNotifyCollateralPriceUpdated",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "accrueInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralizationRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastPeriodGlobalInterestAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "systemAccrueInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "systemGetUpdatedPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "systemNotifyCollateralPriceUpdated",
    data: BytesLike
  ): Result;

  events: {
    "Borrow(address,uint64,uint256,uint256)": EventFragment;
    "InterestAccrued(uint64,uint64,uint256,uint256)": EventFragment;
    "Lend(address,uint256,uint256)": EventFragment;
    "NewPositionCreated(address,uint64)": EventFragment;
    "ParameterUpdated(string,uint256)": EventFragment;
    "ParameterUpdated64(string,uint64)": EventFragment;
    "ParameterUpdatedByCollateral(string,uint8,uint256)": EventFragment;
    "Payback(address,uint64,uint256,uint256)": EventFragment;
    "PositionUpdated(uint256,uint64,uint256,uint256)": EventFragment;
    "Unlend(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterestAccrued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Lend"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPositionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated64"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ParameterUpdatedByCollateral"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Payback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unlend"): EventFragment;
}

export class IMarket extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IMarketInterface;

  functions: {
    accrueInterest(overrides?: Overrides): Promise<ContractTransaction>;

    "accrueInterest()"(overrides?: Overrides): Promise<ContractTransaction>;

    collateralizationRequirement(
      collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ratio: BigNumber }>;

    "collateralizationRequirement(uint8)"(
      collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ratio: BigNumber }>;

    lastPeriodGlobalInterestAccrued(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { period: BigNumber }>;

    "lastPeriodGlobalInterestAccrued()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { period: BigNumber }>;

    stop(overrides?: Overrides): Promise<ContractTransaction>;

    "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

    systemAccrueInterest(overrides?: Overrides): Promise<ContractTransaction>;

    "systemAccrueInterest()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    systemGetUpdatedPosition(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "systemGetUpdatedPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    systemNotifyCollateralPriceUpdated(
      pair: string,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "systemNotifyCollateralPriceUpdated(address,uint256)"(
      pair: string,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  accrueInterest(overrides?: Overrides): Promise<ContractTransaction>;

  "accrueInterest()"(overrides?: Overrides): Promise<ContractTransaction>;

  collateralizationRequirement(
    collateral: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "collateralizationRequirement(uint8)"(
    collateral: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastPeriodGlobalInterestAccrued(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lastPeriodGlobalInterestAccrued()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stop(overrides?: Overrides): Promise<ContractTransaction>;

  "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

  systemAccrueInterest(overrides?: Overrides): Promise<ContractTransaction>;

  "systemAccrueInterest()"(overrides?: Overrides): Promise<ContractTransaction>;

  systemGetUpdatedPosition(
    positionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "systemGetUpdatedPosition(uint64)"(
    positionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  systemNotifyCollateralPriceUpdated(
    pair: string,
    price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "systemNotifyCollateralPriceUpdated(address,uint256)"(
    pair: string,
    price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    accrueInterest(overrides?: CallOverrides): Promise<void>;

    "accrueInterest()"(overrides?: CallOverrides): Promise<void>;

    collateralizationRequirement(
      collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collateralizationRequirement(uint8)"(
      collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastPeriodGlobalInterestAccrued(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastPeriodGlobalInterestAccrued()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stop(overrides?: CallOverrides): Promise<void>;

    "stop()"(overrides?: CallOverrides): Promise<void>;

    systemAccrueInterest(overrides?: CallOverrides): Promise<void>;

    "systemAccrueInterest()"(overrides?: CallOverrides): Promise<void>;

    systemGetUpdatedPosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number
      ] & {
        startCumulativeDebt: BigNumber;
        collateral: BigNumber;
        debt: BigNumber;
        startDebtExchangeRate: BigNumber;
        startCNPRewards: BigNumber;
        collateralizationBandIndex: BigNumber;
        lastUpdateTime: BigNumber;
        lastBorrowTime: BigNumber;
        collateralizationBand: number;
        collateralType: number;
      }
    >;

    "systemGetUpdatedPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number
      ] & {
        startCumulativeDebt: BigNumber;
        collateral: BigNumber;
        debt: BigNumber;
        startDebtExchangeRate: BigNumber;
        startCNPRewards: BigNumber;
        collateralizationBandIndex: BigNumber;
        lastUpdateTime: BigNumber;
        lastBorrowTime: BigNumber;
        collateralizationBand: number;
        collateralType: number;
      }
    >;

    systemNotifyCollateralPriceUpdated(
      pair: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "systemNotifyCollateralPriceUpdated(address,uint256)"(
      pair: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Borrow(
      borrower: string | null,
      positionID: BigNumberish | null,
      borrowAmount: null,
      collateralIncrease: null
    ): EventFilter;

    InterestAccrued(
      period: BigNumberish | null,
      periods: null,
      newDebt: null,
      rewardCount: null
    ): EventFilter;

    Lend(
      account: string | null,
      coinCount: null,
      lendTokenCount: null
    ): EventFilter;

    NewPositionCreated(
      creator: string | null,
      positionID: BigNumberish | null
    ): EventFilter;

    ParameterUpdated(paramName: string | null, value: null): EventFilter;

    ParameterUpdated64(paramName: string | null, value: null): EventFilter;

    ParameterUpdatedByCollateral(
      paramName: string | null,
      collateral: BigNumberish | null,
      value: null
    ): EventFilter;

    Payback(
      caller: string | null,
      positionID: BigNumberish | null,
      debtPaidBack: null,
      collateralWithdrawn: null
    ): EventFilter;

    PositionUpdated(
      positionID: BigNumberish | null,
      period: BigNumberish | null,
      debtAfter: null,
      cnpRewards: null
    ): EventFilter;

    Unlend(
      account: string | null,
      coinCount: null,
      lendTokenCount: null
    ): EventFilter;
  };

  estimateGas: {
    accrueInterest(overrides?: Overrides): Promise<BigNumber>;

    "accrueInterest()"(overrides?: Overrides): Promise<BigNumber>;

    collateralizationRequirement(
      collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collateralizationRequirement(uint8)"(
      collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastPeriodGlobalInterestAccrued(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastPeriodGlobalInterestAccrued()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stop(overrides?: Overrides): Promise<BigNumber>;

    "stop()"(overrides?: Overrides): Promise<BigNumber>;

    systemAccrueInterest(overrides?: Overrides): Promise<BigNumber>;

    "systemAccrueInterest()"(overrides?: Overrides): Promise<BigNumber>;

    systemGetUpdatedPosition(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "systemGetUpdatedPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    systemNotifyCollateralPriceUpdated(
      pair: string,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "systemNotifyCollateralPriceUpdated(address,uint256)"(
      pair: string,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accrueInterest(overrides?: Overrides): Promise<PopulatedTransaction>;

    "accrueInterest()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    collateralizationRequirement(
      collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateralizationRequirement(uint8)"(
      collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastPeriodGlobalInterestAccrued(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastPeriodGlobalInterestAccrued()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stop(overrides?: Overrides): Promise<PopulatedTransaction>;

    "stop()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    systemAccrueInterest(overrides?: Overrides): Promise<PopulatedTransaction>;

    "systemAccrueInterest()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    systemGetUpdatedPosition(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "systemGetUpdatedPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    systemNotifyCollateralPriceUpdated(
      pair: string,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "systemNotifyCollateralPriceUpdated(address,uint256)"(
      pair: string,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
