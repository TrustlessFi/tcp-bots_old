/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ILiquidationsInterface extends ethers.utils.Interface {
  functions: {
    "flashLiquidate(uint8,uint256)": FunctionFragment;
    "stop()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "flashLiquidate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "flashLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;

  events: {
    "CoveredUnbackedDebt(uint256,uint256,uint256)": EventFragment;
    "Liquidated(uint256,bool)": EventFragment;
    "ParameterUpdated(string,uint256)": EventFragment;
    "ParameterUpdated64(string,uint64)": EventFragment;
    "UndercollatPositionDiscovered(uint64,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CoveredUnbackedDebt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated64"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UndercollatPositionDiscovered"
  ): EventFragment;
}

export class ILiquidations extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ILiquidationsInterface;

  functions: {
    flashLiquidate(
      collateral: BigNumberish,
      baseTokensToRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "flashLiquidate(uint8,uint256)"(
      collateral: BigNumberish,
      baseTokensToRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stop(overrides?: Overrides): Promise<ContractTransaction>;

    "stop()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  flashLiquidate(
    collateral: BigNumberish,
    baseTokensToRepay: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "flashLiquidate(uint8,uint256)"(
    collateral: BigNumberish,
    baseTokensToRepay: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stop(overrides?: Overrides): Promise<ContractTransaction>;

  "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    flashLiquidate(
      collateral: BigNumberish,
      baseTokensToRepay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "flashLiquidate(uint8,uint256)"(
      collateral: BigNumberish,
      baseTokensToRepay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stop(overrides?: CallOverrides): Promise<void>;

    "stop()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    CoveredUnbackedDebt(
      price: null,
      positionDebt: null,
      positionCollateral: null
    ): EventFilter;

    Liquidated(baseTokensToRepay: null, flash: boolean | null): EventFilter;

    ParameterUpdated(paramName: string | null, value: null): EventFilter;

    ParameterUpdated64(paramName: string | null, value: null): EventFilter;

    UndercollatPositionDiscovered(
      positionID: BigNumberish | null,
      debtCount: null,
      collateralCount: null,
      price: null
    ): EventFilter;
  };

  estimateGas: {
    flashLiquidate(
      collateral: BigNumberish,
      baseTokensToRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "flashLiquidate(uint8,uint256)"(
      collateral: BigNumberish,
      baseTokensToRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stop(overrides?: Overrides): Promise<BigNumber>;

    "stop()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    flashLiquidate(
      collateral: BigNumberish,
      baseTokensToRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "flashLiquidate(uint8,uint256)"(
      collateral: BigNumberish,
      baseTokensToRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stop(overrides?: Overrides): Promise<PopulatedTransaction>;

    "stop()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
