/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TokenAllocationsInterface extends ethers.utils.Interface {
  functions: {
    "allocationCount()": FunctionFragment;
    "allocations(uint256)": FunctionFragment;
    "approveAllocation(uint256)": FunctionFragment;
    "available(uint256)": FunctionFragment;
    "availableAllocations()": FunctionFragment;
    "burnCNP(uint256)": FunctionFragment;
    "claim(uint256)": FunctionFragment;
    "cnp()": FunctionFragment;
    "createAllocation(address,uint64,uint64,uint256,string)": FunctionFragment;
    "deployer()": FunctionFragment;
    "governor()": FunctionFragment;
    "init(address)": FunctionFragment;
    "stopped()": FunctionFragment;
    "totalAllocations()": FunctionFragment;
    "validUpdate(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allocationCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allocations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveAllocation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "available",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "availableAllocations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnCNP",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "cnp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createAllocation",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAllocations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validUpdate",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "allocationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "available", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableAllocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnCNP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cnp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validUpdate",
    data: BytesLike
  ): Result;

  events: {
    "AllocationApproved(uint256)": EventFragment;
    "AllocationClaimed(uint256,uint256)": EventFragment;
    "AllocationCreated(address,uint256,uint64,uint64,uint256,string)": EventFragment;
    "CNPBurned(uint256)": EventFragment;
    "Initialized(address)": EventFragment;
    "Stopped()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllocationApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllocationClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllocationCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CNPBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stopped"): EventFragment;
}

export class TokenAllocations extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TokenAllocationsInterface;

  functions: {
    allocationCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "allocationCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    allocations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, BigNumber, BigNumber, string] & {
        allocatee: string;
        startTime: BigNumber;
        endTime: BigNumber;
        approved: boolean;
        count: BigNumber;
        claimed: BigNumber;
        allocationPurpose: string;
      }
    >;

    "allocations(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, BigNumber, BigNumber, string] & {
        allocatee: string;
        startTime: BigNumber;
        endTime: BigNumber;
        approved: boolean;
        count: BigNumber;
        claimed: BigNumber;
        allocationPurpose: string;
      }
    >;

    approveAllocation(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approveAllocation(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    available(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "available(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    availableAllocations(overrides?: CallOverrides): Promise<[BigNumber]>;

    "availableAllocations()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    burnCNP(
      burnAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burnCNP(uint256)"(
      burnAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claim(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claim(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cnp(overrides?: CallOverrides): Promise<[string]>;

    "cnp()"(overrides?: CallOverrides): Promise<[string]>;

    createAllocation(
      allocatee: string,
      startTime: BigNumberish,
      endTime: BigNumberish,
      count: BigNumberish,
      allocationPurpose: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createAllocation(address,uint64,uint64,uint256,string)"(
      allocatee: string,
      startTime: BigNumberish,
      endTime: BigNumberish,
      count: BigNumberish,
      allocationPurpose: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    "deployer()"(overrides?: CallOverrides): Promise<[string]>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    "governor()"(overrides?: CallOverrides): Promise<[string]>;

    init(
      _governor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stopped(overrides?: CallOverrides): Promise<[boolean]>;

    "stopped()"(overrides?: CallOverrides): Promise<[boolean]>;

    totalAllocations(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalAllocations()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    validUpdate(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "validUpdate(bytes4)"(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  allocationCount(overrides?: CallOverrides): Promise<BigNumber>;

  "allocationCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  allocations(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean, BigNumber, BigNumber, string] & {
      allocatee: string;
      startTime: BigNumber;
      endTime: BigNumber;
      approved: boolean;
      count: BigNumber;
      claimed: BigNumber;
      allocationPurpose: string;
    }
  >;

  "allocations(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean, BigNumber, BigNumber, string] & {
      allocatee: string;
      startTime: BigNumber;
      endTime: BigNumber;
      approved: boolean;
      count: BigNumber;
      claimed: BigNumber;
      allocationPurpose: string;
    }
  >;

  approveAllocation(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approveAllocation(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  available(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "available(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  availableAllocations(overrides?: CallOverrides): Promise<BigNumber>;

  "availableAllocations()"(overrides?: CallOverrides): Promise<BigNumber>;

  burnCNP(
    burnAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burnCNP(uint256)"(
    burnAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claim(id: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  "claim(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cnp(overrides?: CallOverrides): Promise<string>;

  "cnp()"(overrides?: CallOverrides): Promise<string>;

  createAllocation(
    allocatee: string,
    startTime: BigNumberish,
    endTime: BigNumberish,
    count: BigNumberish,
    allocationPurpose: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createAllocation(address,uint64,uint64,uint256,string)"(
    allocatee: string,
    startTime: BigNumberish,
    endTime: BigNumberish,
    count: BigNumberish,
    allocationPurpose: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deployer(overrides?: CallOverrides): Promise<string>;

  "deployer()"(overrides?: CallOverrides): Promise<string>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  init(_governor: string, overrides?: Overrides): Promise<ContractTransaction>;

  "init(address)"(
    _governor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stopped(overrides?: CallOverrides): Promise<boolean>;

  "stopped()"(overrides?: CallOverrides): Promise<boolean>;

  totalAllocations(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAllocations()"(overrides?: CallOverrides): Promise<BigNumber>;

  validUpdate(action: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "validUpdate(bytes4)"(
    action: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    allocationCount(overrides?: CallOverrides): Promise<BigNumber>;

    "allocationCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    allocations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, BigNumber, BigNumber, string] & {
        allocatee: string;
        startTime: BigNumber;
        endTime: BigNumber;
        approved: boolean;
        count: BigNumber;
        claimed: BigNumber;
        allocationPurpose: string;
      }
    >;

    "allocations(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, BigNumber, BigNumber, string] & {
        allocatee: string;
        startTime: BigNumber;
        endTime: BigNumber;
        approved: boolean;
        count: BigNumber;
        claimed: BigNumber;
        allocationPurpose: string;
      }
    >;

    approveAllocation(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approveAllocation(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    available(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "available(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    availableAllocations(overrides?: CallOverrides): Promise<BigNumber>;

    "availableAllocations()"(overrides?: CallOverrides): Promise<BigNumber>;

    burnCNP(burnAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "burnCNP(uint256)"(
      burnAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "claim(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cnp(overrides?: CallOverrides): Promise<string>;

    "cnp()"(overrides?: CallOverrides): Promise<string>;

    createAllocation(
      allocatee: string,
      startTime: BigNumberish,
      endTime: BigNumberish,
      count: BigNumberish,
      allocationPurpose: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "createAllocation(address,uint64,uint64,uint256,string)"(
      allocatee: string,
      startTime: BigNumberish,
      endTime: BigNumberish,
      count: BigNumberish,
      allocationPurpose: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deployer(overrides?: CallOverrides): Promise<string>;

    "deployer()"(overrides?: CallOverrides): Promise<string>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    init(_governor: string, overrides?: CallOverrides): Promise<void>;

    "init(address)"(
      _governor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stopped(overrides?: CallOverrides): Promise<boolean>;

    "stopped()"(overrides?: CallOverrides): Promise<boolean>;

    totalAllocations(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocations()"(overrides?: CallOverrides): Promise<BigNumber>;

    validUpdate(action: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "validUpdate(bytes4)"(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    AllocationApproved(id: BigNumberish | null): EventFilter;

    AllocationClaimed(id: BigNumberish | null, amount: null): EventFilter;

    AllocationCreated(
      creator: string | null,
      id: BigNumberish | null,
      startTime: null,
      endTime: null,
      count: null,
      purpose: null
    ): EventFilter;

    CNPBurned(burnAmount: null): EventFilter;

    Initialized(governor: string | null): EventFilter;

    Stopped(): EventFilter;
  };

  estimateGas: {
    allocationCount(overrides?: CallOverrides): Promise<BigNumber>;

    "allocationCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    allocations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allocations(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approveAllocation(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approveAllocation(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    available(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "available(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    availableAllocations(overrides?: CallOverrides): Promise<BigNumber>;

    "availableAllocations()"(overrides?: CallOverrides): Promise<BigNumber>;

    burnCNP(
      burnAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burnCNP(uint256)"(
      burnAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claim(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "claim(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cnp(overrides?: CallOverrides): Promise<BigNumber>;

    "cnp()"(overrides?: CallOverrides): Promise<BigNumber>;

    createAllocation(
      allocatee: string,
      startTime: BigNumberish,
      endTime: BigNumberish,
      count: BigNumberish,
      allocationPurpose: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createAllocation(address,uint64,uint64,uint256,string)"(
      allocatee: string,
      startTime: BigNumberish,
      endTime: BigNumberish,
      count: BigNumberish,
      allocationPurpose: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    "deployer()"(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    init(_governor: string, overrides?: Overrides): Promise<BigNumber>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    "stopped()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocations(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocations()"(overrides?: CallOverrides): Promise<BigNumber>;

    validUpdate(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validUpdate(bytes4)"(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allocationCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "allocationCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allocations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allocations(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveAllocation(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approveAllocation(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    available(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "available(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    availableAllocations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "availableAllocations()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnCNP(
      burnAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burnCNP(uint256)"(
      burnAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claim(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claim(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cnp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cnp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createAllocation(
      allocatee: string,
      startTime: BigNumberish,
      endTime: BigNumberish,
      count: BigNumberish,
      allocationPurpose: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createAllocation(address,uint64,uint64,uint256,string)"(
      allocatee: string,
      startTime: BigNumberish,
      endTime: BigNumberish,
      count: BigNumberish,
      allocationPurpose: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deployer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      _governor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stopped()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAllocations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAllocations()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validUpdate(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validUpdate(bytes4)"(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
