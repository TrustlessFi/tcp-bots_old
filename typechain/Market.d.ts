/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MarketInterface extends ethers.utils.Interface {
  functions: {
    "accrueInterest()": FunctionFragment;
    "addReferencePool(address)": FunctionFragment;
    "adjustGenesisPositionCollateral(uint64,uint256)": FunctionFragment;
    "adjustPosition(uint64,int256,uint256)": FunctionFragment;
    "claimRewards(uint64)": FunctionFragment;
    "collateralizationRequirement()": FunctionFragment;
    "completeSetup()": FunctionFragment;
    "createGenesisPosition(tuple)": FunctionFragment;
    "createPosition(uint256)": FunctionFragment;
    "currentPeriod()": FunctionFragment;
    "deployer()": FunctionFragment;
    "firstPeriod()": FunctionFragment;
    "governor()": FunctionFragment;
    "init(address)": FunctionFragment;
    "interestPortionToLenders()": FunctionFragment;
    "lastPeriodGlobalInterestAccrued()": FunctionFragment;
    "minCollateralPoolLiquidity()": FunctionFragment;
    "minPositionSize()": FunctionFragment;
    "minTotalReferencePoolLiquidity()": FunctionFragment;
    "periodLength()": FunctionFragment;
    "referencePools(uint256)": FunctionFragment;
    "removeGenesisPosition(uint64)": FunctionFragment;
    "removeReferencePool(address)": FunctionFragment;
    "setCollateralizationRequirement(uint256)": FunctionFragment;
    "setInterestPortionToLenders(uint256)": FunctionFragment;
    "setMinCollateralPoolLiquidity(uint256)": FunctionFragment;
    "setMinPositionSize(uint256)": FunctionFragment;
    "setMinTotalReferencePoolLiquidity(uint256)": FunctionFragment;
    "setTwapDuration(uint32)": FunctionFragment;
    "stop()": FunctionFragment;
    "stopped()": FunctionFragment;
    "systemGetUpdatedPosition(uint64)": FunctionFragment;
    "twapDuration()": FunctionFragment;
    "validUpdate(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accrueInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addReferencePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "adjustGenesisPositionCollateral",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adjustPosition",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralizationRequirement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeSetup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createGenesisPosition",
    values: [{ v: BigNumberish; r: BytesLike; s: BytesLike }]
  ): string;
  encodeFunctionData(
    functionFragment: "createPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "firstPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "interestPortionToLenders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastPeriodGlobalInterestAccrued",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minCollateralPoolLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minPositionSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minTotalReferencePoolLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "periodLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referencePools",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeGenesisPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeReferencePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralizationRequirement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestPortionToLenders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinCollateralPoolLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinPositionSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinTotalReferencePoolLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTwapDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "systemGetUpdatedPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "twapDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validUpdate",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "accrueInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addReferencePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustGenesisPositionCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralizationRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGenesisPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "firstPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestPortionToLenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastPeriodGlobalInterestAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minCollateralPoolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minTotalReferencePoolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referencePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeGenesisPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeReferencePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralizationRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestPortionToLenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinCollateralPoolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinTotalReferencePoolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTwapDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "systemGetUpdatedPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "twapDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validUpdate",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(address)": EventFragment;
    "InterestAccrued(uint64,uint64,uint256,uint256,uint256,uint256)": EventFragment;
    "NewPositionCreated(address,uint64)": EventFragment;
    "ParameterUpdated(string,uint256)": EventFragment;
    "ParameterUpdated64(string,uint64)": EventFragment;
    "ParameterUpdatedAddress(string,address)": EventFragment;
    "PositionAdjusted(uint64,int256,int256)": EventFragment;
    "PositionUpdated(uint256,uint64,uint256,uint256)": EventFragment;
    "Stopped()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterestAccrued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPositionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated64"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdatedAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionAdjusted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stopped"): EventFragment;
}

export class Market extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MarketInterface;

  functions: {
    accrueInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "accrueInterest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adjustGenesisPositionCollateral(
      positionID: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "adjustGenesisPositionCollateral(uint64,uint256)"(
      positionID: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adjustPosition(
      positionID: BigNumberish,
      debtChange: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "adjustPosition(uint64,int256,uint256)"(
      positionID: BigNumberish,
      debtChange: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRewards(
      positionID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimRewards(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collateralizationRequirement(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "collateralizationRequirement()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    completeSetup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "completeSetup()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createGenesisPosition(
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createGenesisPosition((uint8,bytes32,bytes32))"(
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPosition(
      initialDebt: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createPosition(uint256)"(
      initialDebt: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { period: BigNumber }>;

    "currentPeriod()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { period: BigNumber }>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    "deployer()"(overrides?: CallOverrides): Promise<[string]>;

    firstPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    "governor()"(overrides?: CallOverrides): Promise<[string]>;

    init(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    interestPortionToLenders(overrides?: CallOverrides): Promise<[BigNumber]>;

    "interestPortionToLenders()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastPeriodGlobalInterestAccrued(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lastPeriodGlobalInterestAccrued()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minCollateralPoolLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minCollateralPoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minPositionSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minPositionSize()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minTotalReferencePoolLiquidity(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "minTotalReferencePoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    periodLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "periodLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    referencePools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "referencePools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeGenesisPosition(
      positionID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeGenesisPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollateralizationRequirement(
      requirement: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setCollateralizationRequirement(uint256)"(
      requirement: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInterestPortionToLenders(
      percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setInterestPortionToLenders(uint256)"(
      percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinCollateralPoolLiquidity(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMinCollateralPoolLiquidity(uint256)"(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinPositionSize(
      size: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMinPositionSize(uint256)"(
      size: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinTotalReferencePoolLiquidity(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMinTotalReferencePoolLiquidity(uint256)"(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTwapDuration(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTwapDuration(uint32)"(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stop()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopped(overrides?: CallOverrides): Promise<[boolean]>;

    "stopped()"(overrides?: CallOverrides): Promise<[boolean]>;

    systemGetUpdatedPosition(
      positionID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "systemGetUpdatedPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    twapDuration(overrides?: CallOverrides): Promise<[number]>;

    "twapDuration()"(overrides?: CallOverrides): Promise<[number]>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  accrueInterest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "accrueInterest()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addReferencePool(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addReferencePool(address)"(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adjustGenesisPositionCollateral(
    positionID: BigNumberish,
    collateralDecrease: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "adjustGenesisPositionCollateral(uint64,uint256)"(
    positionID: BigNumberish,
    collateralDecrease: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adjustPosition(
    positionID: BigNumberish,
    debtChange: BigNumberish,
    collateralDecrease: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "adjustPosition(uint64,int256,uint256)"(
    positionID: BigNumberish,
    debtChange: BigNumberish,
    collateralDecrease: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRewards(
    positionID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimRewards(uint64)"(
    positionID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collateralizationRequirement(overrides?: CallOverrides): Promise<BigNumber>;

  "collateralizationRequirement()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  completeSetup(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "completeSetup()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createGenesisPosition(
    ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createGenesisPosition((uint8,bytes32,bytes32))"(
    ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPosition(
    initialDebt: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createPosition(uint256)"(
    initialDebt: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "currentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  deployer(overrides?: CallOverrides): Promise<string>;

  "deployer()"(overrides?: CallOverrides): Promise<string>;

  firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "firstPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  init(
    _governor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "init(address)"(
    _governor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  interestPortionToLenders(overrides?: CallOverrides): Promise<BigNumber>;

  "interestPortionToLenders()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastPeriodGlobalInterestAccrued(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lastPeriodGlobalInterestAccrued()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minCollateralPoolLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  "minCollateralPoolLiquidity()"(overrides?: CallOverrides): Promise<BigNumber>;

  minPositionSize(overrides?: CallOverrides): Promise<BigNumber>;

  "minPositionSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  minTotalReferencePoolLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  "minTotalReferencePoolLiquidity()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  periodLength(overrides?: CallOverrides): Promise<BigNumber>;

  "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  referencePools(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "referencePools(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  removeGenesisPosition(
    positionID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeGenesisPosition(uint64)"(
    positionID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeReferencePool(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeReferencePool(address)"(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollateralizationRequirement(
    requirement: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setCollateralizationRequirement(uint256)"(
    requirement: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInterestPortionToLenders(
    percentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setInterestPortionToLenders(uint256)"(
    percentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinCollateralPoolLiquidity(
    min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMinCollateralPoolLiquidity(uint256)"(
    min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinPositionSize(
    size: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMinPositionSize(uint256)"(
    size: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinTotalReferencePoolLiquidity(
    min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMinTotalReferencePoolLiquidity(uint256)"(
    min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTwapDuration(
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTwapDuration(uint32)"(
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stop(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stop()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopped(overrides?: CallOverrides): Promise<boolean>;

  "stopped()"(overrides?: CallOverrides): Promise<boolean>;

  systemGetUpdatedPosition(
    positionID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "systemGetUpdatedPosition(uint64)"(
    positionID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  twapDuration(overrides?: CallOverrides): Promise<number>;

  "twapDuration()"(overrides?: CallOverrides): Promise<number>;

  validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "validUpdate(bytes4)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    accrueInterest(overrides?: CallOverrides): Promise<void>;

    "accrueInterest()"(overrides?: CallOverrides): Promise<void>;

    addReferencePool(pool: string, overrides?: CallOverrides): Promise<void>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    adjustGenesisPositionCollateral(
      positionID: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "adjustGenesisPositionCollateral(uint64,uint256)"(
      positionID: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adjustPosition(
      positionID: BigNumberish,
      debtChange: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "adjustPosition(uint64,int256,uint256)"(
      positionID: BigNumberish,
      debtChange: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewards(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimRewards(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collateralizationRequirement(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralizationRequirement()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeSetup(overrides?: CallOverrides): Promise<void>;

    "completeSetup()"(overrides?: CallOverrides): Promise<void>;

    createGenesisPosition(
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createGenesisPosition((uint8,bytes32,bytes32))"(
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPosition(
      initialDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createPosition(uint256)"(
      initialDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<string>;

    "deployer()"(overrides?: CallOverrides): Promise<string>;

    firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    init(_governor: string, overrides?: CallOverrides): Promise<void>;

    "init(address)"(
      _governor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    interestPortionToLenders(overrides?: CallOverrides): Promise<BigNumber>;

    "interestPortionToLenders()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastPeriodGlobalInterestAccrued(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastPeriodGlobalInterestAccrued()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minCollateralPoolLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    "minCollateralPoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minPositionSize(overrides?: CallOverrides): Promise<BigNumber>;

    "minPositionSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    minTotalReferencePoolLiquidity(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minTotalReferencePoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    referencePools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "referencePools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    removeGenesisPosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeGenesisPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeReferencePool(pool: string, overrides?: CallOverrides): Promise<void>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateralizationRequirement(
      requirement: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCollateralizationRequirement(uint256)"(
      requirement: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterestPortionToLenders(
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInterestPortionToLenders(uint256)"(
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinCollateralPoolLiquidity(
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinCollateralPoolLiquidity(uint256)"(
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinPositionSize(
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinPositionSize(uint256)"(
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinTotalReferencePoolLiquidity(
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinTotalReferencePoolLiquidity(uint256)"(
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTwapDuration(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTwapDuration(uint32)"(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stop(overrides?: CallOverrides): Promise<void>;

    "stop()"(overrides?: CallOverrides): Promise<void>;

    stopped(overrides?: CallOverrides): Promise<boolean>;

    "stopped()"(overrides?: CallOverrides): Promise<boolean>;

    systemGetUpdatedPosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean,
        BigNumber
      ] & {
        startCumulativeDebt: BigNumber;
        collateral: BigNumber;
        debt: BigNumber;
        startDebtExchangeRate: BigNumber;
        startTCPRewards: BigNumber;
        lastTimeUpdated: BigNumber;
        lastBorrowTime: BigNumber;
        tick: number;
        tickSet: boolean;
        tickIndex: BigNumber;
      }
    >;

    "systemGetUpdatedPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean,
        BigNumber
      ] & {
        startCumulativeDebt: BigNumber;
        collateral: BigNumber;
        debt: BigNumber;
        startDebtExchangeRate: BigNumber;
        startTCPRewards: BigNumber;
        lastTimeUpdated: BigNumber;
        lastBorrowTime: BigNumber;
        tick: number;
        tickSet: boolean;
        tickIndex: BigNumber;
      }
    >;

    twapDuration(overrides?: CallOverrides): Promise<number>;

    "twapDuration()"(overrides?: CallOverrides): Promise<number>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Initialized(
      governor: string | null
    ): TypedEventFilter<[string], { governor: string }>;

    InterestAccrued(
      period: BigNumberish | null,
      periods: null,
      newDebt: null,
      rewardCount: null,
      cumulativeDebt: null,
      debtExchangeRate: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        period: BigNumber;
        periods: BigNumber;
        newDebt: BigNumber;
        rewardCount: BigNumber;
        cumulativeDebt: BigNumber;
        debtExchangeRate: BigNumber;
      }
    >;

    NewPositionCreated(
      creator: string | null,
      positionID: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { creator: string; positionID: BigNumber }
    >;

    ParameterUpdated(
      paramName: string | null,
      value: null
    ): TypedEventFilter<
      [string, BigNumber],
      { paramName: string; value: BigNumber }
    >;

    ParameterUpdated64(
      paramName: string | null,
      value: null
    ): TypedEventFilter<
      [string, BigNumber],
      { paramName: string; value: BigNumber }
    >;

    ParameterUpdatedAddress(
      paramName: string | null,
      value: null
    ): TypedEventFilter<[string, string], { paramName: string; value: string }>;

    PositionAdjusted(
      positionID: BigNumberish | null,
      debtChange: null,
      collateralChange: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        positionID: BigNumber;
        debtChange: BigNumber;
        collateralChange: BigNumber;
      }
    >;

    PositionUpdated(
      positionID: BigNumberish | null,
      period: BigNumberish | null,
      debtAfter: null,
      tcpRewards: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        positionID: BigNumber;
        period: BigNumber;
        debtAfter: BigNumber;
        tcpRewards: BigNumber;
      }
    >;

    Stopped(): TypedEventFilter<[], {}>;
  };

  estimateGas: {
    accrueInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "accrueInterest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adjustGenesisPositionCollateral(
      positionID: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "adjustGenesisPositionCollateral(uint64,uint256)"(
      positionID: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adjustPosition(
      positionID: BigNumberish,
      debtChange: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "adjustPosition(uint64,int256,uint256)"(
      positionID: BigNumberish,
      debtChange: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRewards(
      positionID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimRewards(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collateralizationRequirement(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralizationRequirement()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeSetup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "completeSetup()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createGenesisPosition(
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createGenesisPosition((uint8,bytes32,bytes32))"(
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPosition(
      initialDebt: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createPosition(uint256)"(
      initialDebt: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    "deployer()"(overrides?: CallOverrides): Promise<BigNumber>;

    firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    interestPortionToLenders(overrides?: CallOverrides): Promise<BigNumber>;

    "interestPortionToLenders()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastPeriodGlobalInterestAccrued(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastPeriodGlobalInterestAccrued()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minCollateralPoolLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    "minCollateralPoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minPositionSize(overrides?: CallOverrides): Promise<BigNumber>;

    "minPositionSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    minTotalReferencePoolLiquidity(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minTotalReferencePoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    referencePools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "referencePools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeGenesisPosition(
      positionID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeGenesisPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollateralizationRequirement(
      requirement: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setCollateralizationRequirement(uint256)"(
      requirement: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInterestPortionToLenders(
      percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setInterestPortionToLenders(uint256)"(
      percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinCollateralPoolLiquidity(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMinCollateralPoolLiquidity(uint256)"(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinPositionSize(
      size: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMinPositionSize(uint256)"(
      size: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinTotalReferencePoolLiquidity(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMinTotalReferencePoolLiquidity(uint256)"(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTwapDuration(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTwapDuration(uint32)"(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stop()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    "stopped()"(overrides?: CallOverrides): Promise<BigNumber>;

    systemGetUpdatedPosition(
      positionID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "systemGetUpdatedPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    twapDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "twapDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accrueInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "accrueInterest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adjustGenesisPositionCollateral(
      positionID: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "adjustGenesisPositionCollateral(uint64,uint256)"(
      positionID: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adjustPosition(
      positionID: BigNumberish,
      debtChange: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "adjustPosition(uint64,int256,uint256)"(
      positionID: BigNumberish,
      debtChange: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRewards(
      positionID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimRewards(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collateralizationRequirement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateralizationRequirement()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeSetup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "completeSetup()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createGenesisPosition(
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createGenesisPosition((uint8,bytes32,bytes32))"(
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPosition(
      initialDebt: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createPosition(uint256)"(
      initialDebt: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deployer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    firstPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    interestPortionToLenders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "interestPortionToLenders()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastPeriodGlobalInterestAccrued(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastPeriodGlobalInterestAccrued()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minCollateralPoolLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minCollateralPoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minPositionSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minPositionSize()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minTotalReferencePoolLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minTotalReferencePoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "periodLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referencePools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "referencePools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeGenesisPosition(
      positionID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeGenesisPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollateralizationRequirement(
      requirement: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setCollateralizationRequirement(uint256)"(
      requirement: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInterestPortionToLenders(
      percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setInterestPortionToLenders(uint256)"(
      percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinCollateralPoolLiquidity(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMinCollateralPoolLiquidity(uint256)"(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinPositionSize(
      size: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMinPositionSize(uint256)"(
      size: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinTotalReferencePoolLiquidity(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMinTotalReferencePoolLiquidity(uint256)"(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTwapDuration(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTwapDuration(uint32)"(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stop()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stopped()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    systemGetUpdatedPosition(
      positionID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "systemGetUpdatedPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    twapDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "twapDuration()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validUpdate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
