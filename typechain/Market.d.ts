/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MarketInterface extends ethers.utils.Interface {
  functions: {
    "accrueInterest()": FunctionFragment;
    "borrow(uint64,uint256,uint256)": FunctionFragment;
    "collateralizationRequirement(uint8)": FunctionFragment;
    "createNewPosition(uint8)": FunctionFragment;
    "currentPeriod()": FunctionFragment;
    "deployer()": FunctionFragment;
    "firstPeriod()": FunctionFragment;
    "getRewards(uint64)": FunctionFragment;
    "governor()": FunctionFragment;
    "init(address)": FunctionFragment;
    "interestPortionToLenders()": FunctionFragment;
    "lastPeriodGlobalInterestAccrued()": FunctionFragment;
    "lend(uint256)": FunctionFragment;
    "maxDebt(uint8)": FunctionFragment;
    "minBorrowTime()": FunctionFragment;
    "minCollateralToDebtRatio(uint8)": FunctionFragment;
    "minPositionSize()": FunctionFragment;
    "payback(uint64,uint256,uint256)": FunctionFragment;
    "periodLength()": FunctionFragment;
    "setCollateralizationRequirement(uint8,uint256)": FunctionFragment;
    "setInterestPortionToLenders(uint256)": FunctionFragment;
    "setMaxDebt(uint8,uint256)": FunctionFragment;
    "setMinBorrowTime(uint64)": FunctionFragment;
    "setMinPositionSize(uint256)": FunctionFragment;
    "stop()": FunctionFragment;
    "stopped()": FunctionFragment;
    "systemAccrueInterest()": FunctionFragment;
    "systemGetUpdatedPosition(uint64)": FunctionFragment;
    "systemNotifyCollateralPriceUpdated(address,uint256)": FunctionFragment;
    "unlend(uint256)": FunctionFragment;
    "validUpdate(bytes4)": FunctionFragment;
    "valueOfLendTokensInCoin(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accrueInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralizationRequirement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "firstPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "interestPortionToLenders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastPeriodGlobalInterestAccrued",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lend", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "maxDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minBorrowTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minCollateralToDebtRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minPositionSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payback",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "periodLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralizationRequirement",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestPortionToLenders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDebt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBorrowTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinPositionSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "systemAccrueInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "systemGetUpdatedPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "systemNotifyCollateralPriceUpdated",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlend",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validUpdate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "valueOfLendTokensInCoin",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "accrueInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralizationRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "firstPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestPortionToLenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastPeriodGlobalInterestAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minBorrowTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minCollateralToDebtRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payback", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralizationRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestPortionToLenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMaxDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinBorrowTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "systemAccrueInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "systemGetUpdatedPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "systemNotifyCollateralPriceUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueOfLendTokensInCoin",
    data: BytesLike
  ): Result;

  events: {
    "Borrow(address,uint64,uint256,uint256)": EventFragment;
    "Initialized(address)": EventFragment;
    "InterestAccrued(uint64,uint64,uint256,uint256)": EventFragment;
    "Lend(address,uint256,uint256)": EventFragment;
    "NewPositionCreated(address,uint64)": EventFragment;
    "ParameterUpdated(string,uint256)": EventFragment;
    "ParameterUpdated64(string,uint64)": EventFragment;
    "ParameterUpdatedByCollateral(string,uint8,uint256)": EventFragment;
    "Payback(address,uint64,uint256,uint256)": EventFragment;
    "PositionUpdated(uint256,uint64,uint256,uint256)": EventFragment;
    "Stopped()": EventFragment;
    "Unlend(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterestAccrued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Lend"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPositionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated64"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ParameterUpdatedByCollateral"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Payback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stopped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unlend"): EventFragment;
}

export class Market extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MarketInterface;

  functions: {
    accrueInterest(overrides?: Overrides): Promise<ContractTransaction>;

    "accrueInterest()"(overrides?: Overrides): Promise<ContractTransaction>;

    borrow(
      positionID: BigNumberish,
      borrowCount: BigNumberish,
      collateralCount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "borrow(uint64,uint256,uint256)"(
      positionID: BigNumberish,
      borrowCount: BigNumberish,
      collateralCount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    collateralizationRequirement(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "collateralizationRequirement(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createNewPosition(
      collateralType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createNewPosition(uint8)"(
      collateralType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    currentPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { period: BigNumber }>;

    "currentPeriod()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { period: BigNumber }>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    "deployer()"(overrides?: CallOverrides): Promise<[string]>;

    firstPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewards(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getRewards(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    "governor()"(overrides?: CallOverrides): Promise<[string]>;

    init(
      _governor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    interestPortionToLenders(overrides?: CallOverrides): Promise<[BigNumber]>;

    "interestPortionToLenders()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastPeriodGlobalInterestAccrued(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lastPeriodGlobalInterestAccrued()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lend(
      coinCount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "lend(uint256)"(
      coinCount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    maxDebt(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "maxDebt(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minBorrowTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minBorrowTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minCollateralToDebtRatio(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "minCollateralToDebtRatio(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minPositionSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minPositionSize()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    payback(
      positionID: BigNumberish,
      coinsToPayBack: BigNumberish,
      collateralToWithdraw: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "payback(uint64,uint256,uint256)"(
      positionID: BigNumberish,
      coinsToPayBack: BigNumberish,
      collateralToWithdraw: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    periodLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "periodLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setCollateralizationRequirement(
      collateral: BigNumberish,
      requirement: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCollateralizationRequirement(uint8,uint256)"(
      collateral: BigNumberish,
      requirement: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setInterestPortionToLenders(
      percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setInterestPortionToLenders(uint256)"(
      percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxDebt(
      collateral: BigNumberish,
      debt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxDebt(uint8,uint256)"(
      collateral: BigNumberish,
      debt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinBorrowTime(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinBorrowTime(uint64)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinPositionSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinPositionSize(uint256)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stop(overrides?: Overrides): Promise<ContractTransaction>;

    "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

    stopped(overrides?: CallOverrides): Promise<[boolean]>;

    "stopped()"(overrides?: CallOverrides): Promise<[boolean]>;

    systemAccrueInterest(overrides?: Overrides): Promise<ContractTransaction>;

    "systemAccrueInterest()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    systemGetUpdatedPosition(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "systemGetUpdatedPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    systemNotifyCollateralPriceUpdated(
      pair: string,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "systemNotifyCollateralPriceUpdated(address,uint256)"(
      pair: string,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unlend(
      lendTokenCount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unlend(uint256)"(
      lendTokenCount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validUpdate(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "validUpdate(bytes4)"(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    valueOfLendTokensInCoin(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { coinCount: BigNumber }>;

    "valueOfLendTokensInCoin(uint256)"(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { coinCount: BigNumber }>;
  };

  accrueInterest(overrides?: Overrides): Promise<ContractTransaction>;

  "accrueInterest()"(overrides?: Overrides): Promise<ContractTransaction>;

  borrow(
    positionID: BigNumberish,
    borrowCount: BigNumberish,
    collateralCount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "borrow(uint64,uint256,uint256)"(
    positionID: BigNumberish,
    borrowCount: BigNumberish,
    collateralCount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  collateralizationRequirement(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "collateralizationRequirement(uint8)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createNewPosition(
    collateralType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createNewPosition(uint8)"(
    collateralType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "currentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  deployer(overrides?: CallOverrides): Promise<string>;

  "deployer()"(overrides?: CallOverrides): Promise<string>;

  firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "firstPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  getRewards(
    positionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getRewards(uint64)"(
    positionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  init(_governor: string, overrides?: Overrides): Promise<ContractTransaction>;

  "init(address)"(
    _governor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  interestPortionToLenders(overrides?: CallOverrides): Promise<BigNumber>;

  "interestPortionToLenders()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastPeriodGlobalInterestAccrued(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lastPeriodGlobalInterestAccrued()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lend(
    coinCount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "lend(uint256)"(
    coinCount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  maxDebt(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "maxDebt(uint8)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minBorrowTime(overrides?: CallOverrides): Promise<BigNumber>;

  "minBorrowTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  minCollateralToDebtRatio(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "minCollateralToDebtRatio(uint8)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minPositionSize(overrides?: CallOverrides): Promise<BigNumber>;

  "minPositionSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  payback(
    positionID: BigNumberish,
    coinsToPayBack: BigNumberish,
    collateralToWithdraw: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "payback(uint64,uint256,uint256)"(
    positionID: BigNumberish,
    coinsToPayBack: BigNumberish,
    collateralToWithdraw: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  periodLength(overrides?: CallOverrides): Promise<BigNumber>;

  "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  setCollateralizationRequirement(
    collateral: BigNumberish,
    requirement: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCollateralizationRequirement(uint8,uint256)"(
    collateral: BigNumberish,
    requirement: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setInterestPortionToLenders(
    percentage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setInterestPortionToLenders(uint256)"(
    percentage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxDebt(
    collateral: BigNumberish,
    debt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxDebt(uint8,uint256)"(
    collateral: BigNumberish,
    debt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinBorrowTime(
    time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinBorrowTime(uint64)"(
    time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinPositionSize(
    size: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinPositionSize(uint256)"(
    size: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stop(overrides?: Overrides): Promise<ContractTransaction>;

  "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

  stopped(overrides?: CallOverrides): Promise<boolean>;

  "stopped()"(overrides?: CallOverrides): Promise<boolean>;

  systemAccrueInterest(overrides?: Overrides): Promise<ContractTransaction>;

  "systemAccrueInterest()"(overrides?: Overrides): Promise<ContractTransaction>;

  systemGetUpdatedPosition(
    positionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "systemGetUpdatedPosition(uint64)"(
    positionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  systemNotifyCollateralPriceUpdated(
    pair: string,
    price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "systemNotifyCollateralPriceUpdated(address,uint256)"(
    pair: string,
    price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unlend(
    lendTokenCount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unlend(uint256)"(
    lendTokenCount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validUpdate(action: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "validUpdate(bytes4)"(
    action: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  valueOfLendTokensInCoin(
    lendTokenCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "valueOfLendTokensInCoin(uint256)"(
    lendTokenCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    accrueInterest(overrides?: CallOverrides): Promise<void>;

    "accrueInterest()"(overrides?: CallOverrides): Promise<void>;

    borrow(
      positionID: BigNumberish,
      borrowCount: BigNumberish,
      collateralCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "borrow(uint64,uint256,uint256)"(
      positionID: BigNumberish,
      borrowCount: BigNumberish,
      collateralCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collateralizationRequirement(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collateralizationRequirement(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createNewPosition(
      collateralType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createNewPosition(uint8)"(
      collateralType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<string>;

    "deployer()"(overrides?: CallOverrides): Promise<string>;

    firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRewards(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "getRewards(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    init(_governor: string, overrides?: CallOverrides): Promise<void>;

    "init(address)"(
      _governor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    interestPortionToLenders(overrides?: CallOverrides): Promise<BigNumber>;

    "interestPortionToLenders()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastPeriodGlobalInterestAccrued(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastPeriodGlobalInterestAccrued()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lend(coinCount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "lend(uint256)"(
      coinCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    maxDebt(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "maxDebt(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minBorrowTime(overrides?: CallOverrides): Promise<BigNumber>;

    "minBorrowTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    minCollateralToDebtRatio(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minCollateralToDebtRatio(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minPositionSize(overrides?: CallOverrides): Promise<BigNumber>;

    "minPositionSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    payback(
      positionID: BigNumberish,
      coinsToPayBack: BigNumberish,
      collateralToWithdraw: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "payback(uint64,uint256,uint256)"(
      positionID: BigNumberish,
      coinsToPayBack: BigNumberish,
      collateralToWithdraw: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    setCollateralizationRequirement(
      collateral: BigNumberish,
      requirement: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCollateralizationRequirement(uint8,uint256)"(
      collateral: BigNumberish,
      requirement: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterestPortionToLenders(
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInterestPortionToLenders(uint256)"(
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDebt(
      collateral: BigNumberish,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxDebt(uint8,uint256)"(
      collateral: BigNumberish,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinBorrowTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinBorrowTime(uint64)"(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinPositionSize(
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinPositionSize(uint256)"(
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stop(overrides?: CallOverrides): Promise<void>;

    "stop()"(overrides?: CallOverrides): Promise<void>;

    stopped(overrides?: CallOverrides): Promise<boolean>;

    "stopped()"(overrides?: CallOverrides): Promise<boolean>;

    systemAccrueInterest(overrides?: CallOverrides): Promise<void>;

    "systemAccrueInterest()"(overrides?: CallOverrides): Promise<void>;

    systemGetUpdatedPosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number
      ] & {
        startCumulativeDebt: BigNumber;
        collateral: BigNumber;
        debt: BigNumber;
        startDebtExchangeRate: BigNumber;
        startCNPRewards: BigNumber;
        collateralizationBandIndex: BigNumber;
        lastUpdateTime: BigNumber;
        lastBorrowTime: BigNumber;
        collateralizationBand: number;
        collateralType: number;
      }
    >;

    "systemGetUpdatedPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number
      ] & {
        startCumulativeDebt: BigNumber;
        collateral: BigNumber;
        debt: BigNumber;
        startDebtExchangeRate: BigNumber;
        startCNPRewards: BigNumber;
        collateralizationBandIndex: BigNumber;
        lastUpdateTime: BigNumber;
        lastBorrowTime: BigNumber;
        collateralizationBand: number;
        collateralType: number;
      }
    >;

    systemNotifyCollateralPriceUpdated(
      pair: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "systemNotifyCollateralPriceUpdated(address,uint256)"(
      pair: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unlend(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unlend(uint256)"(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    validUpdate(action: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "validUpdate(bytes4)"(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    valueOfLendTokensInCoin(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "valueOfLendTokensInCoin(uint256)"(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Borrow(
      borrower: string | null,
      positionID: BigNumberish | null,
      borrowAmount: null,
      collateralIncrease: null
    ): EventFilter;

    Initialized(governor: string | null): EventFilter;

    InterestAccrued(
      period: BigNumberish | null,
      periods: null,
      newDebt: null,
      rewardCount: null
    ): EventFilter;

    Lend(
      account: string | null,
      coinCount: null,
      lendTokenCount: null
    ): EventFilter;

    NewPositionCreated(
      creator: string | null,
      positionID: BigNumberish | null
    ): EventFilter;

    ParameterUpdated(paramName: string | null, value: null): EventFilter;

    ParameterUpdated64(paramName: string | null, value: null): EventFilter;

    ParameterUpdatedByCollateral(
      paramName: string | null,
      collateral: BigNumberish | null,
      value: null
    ): EventFilter;

    Payback(
      caller: string | null,
      positionID: BigNumberish | null,
      debtPaidBack: null,
      collateralWithdrawn: null
    ): EventFilter;

    PositionUpdated(
      positionID: BigNumberish | null,
      period: BigNumberish | null,
      debtAfter: null,
      cnpRewards: null
    ): EventFilter;

    Stopped(): EventFilter;

    Unlend(
      account: string | null,
      coinCount: null,
      lendTokenCount: null
    ): EventFilter;
  };

  estimateGas: {
    accrueInterest(overrides?: Overrides): Promise<BigNumber>;

    "accrueInterest()"(overrides?: Overrides): Promise<BigNumber>;

    borrow(
      positionID: BigNumberish,
      borrowCount: BigNumberish,
      collateralCount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "borrow(uint64,uint256,uint256)"(
      positionID: BigNumberish,
      borrowCount: BigNumberish,
      collateralCount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    collateralizationRequirement(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collateralizationRequirement(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createNewPosition(
      collateralType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createNewPosition(uint8)"(
      collateralType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    "deployer()"(overrides?: CallOverrides): Promise<BigNumber>;

    firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRewards(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getRewards(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    init(_governor: string, overrides?: Overrides): Promise<BigNumber>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    interestPortionToLenders(overrides?: CallOverrides): Promise<BigNumber>;

    "interestPortionToLenders()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastPeriodGlobalInterestAccrued(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastPeriodGlobalInterestAccrued()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lend(coinCount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "lend(uint256)"(
      coinCount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    maxDebt(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "maxDebt(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minBorrowTime(overrides?: CallOverrides): Promise<BigNumber>;

    "minBorrowTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    minCollateralToDebtRatio(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minCollateralToDebtRatio(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minPositionSize(overrides?: CallOverrides): Promise<BigNumber>;

    "minPositionSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    payback(
      positionID: BigNumberish,
      coinsToPayBack: BigNumberish,
      collateralToWithdraw: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "payback(uint64,uint256,uint256)"(
      positionID: BigNumberish,
      coinsToPayBack: BigNumberish,
      collateralToWithdraw: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    setCollateralizationRequirement(
      collateral: BigNumberish,
      requirement: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCollateralizationRequirement(uint8,uint256)"(
      collateral: BigNumberish,
      requirement: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setInterestPortionToLenders(
      percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setInterestPortionToLenders(uint256)"(
      percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxDebt(
      collateral: BigNumberish,
      debt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxDebt(uint8,uint256)"(
      collateral: BigNumberish,
      debt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinBorrowTime(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinBorrowTime(uint64)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinPositionSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinPositionSize(uint256)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stop(overrides?: Overrides): Promise<BigNumber>;

    "stop()"(overrides?: Overrides): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    "stopped()"(overrides?: CallOverrides): Promise<BigNumber>;

    systemAccrueInterest(overrides?: Overrides): Promise<BigNumber>;

    "systemAccrueInterest()"(overrides?: Overrides): Promise<BigNumber>;

    systemGetUpdatedPosition(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "systemGetUpdatedPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    systemNotifyCollateralPriceUpdated(
      pair: string,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "systemNotifyCollateralPriceUpdated(address,uint256)"(
      pair: string,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unlend(
      lendTokenCount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unlend(uint256)"(
      lendTokenCount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validUpdate(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validUpdate(bytes4)"(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueOfLendTokensInCoin(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "valueOfLendTokensInCoin(uint256)"(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accrueInterest(overrides?: Overrides): Promise<PopulatedTransaction>;

    "accrueInterest()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    borrow(
      positionID: BigNumberish,
      borrowCount: BigNumberish,
      collateralCount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "borrow(uint64,uint256,uint256)"(
      positionID: BigNumberish,
      borrowCount: BigNumberish,
      collateralCount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    collateralizationRequirement(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateralizationRequirement(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createNewPosition(
      collateralType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createNewPosition(uint8)"(
      collateralType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    currentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deployer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    firstPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewards(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getRewards(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      _governor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    interestPortionToLenders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "interestPortionToLenders()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastPeriodGlobalInterestAccrued(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastPeriodGlobalInterestAccrued()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lend(
      coinCount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "lend(uint256)"(
      coinCount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    maxDebt(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxDebt(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minBorrowTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minBorrowTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minCollateralToDebtRatio(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minCollateralToDebtRatio(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minPositionSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minPositionSize()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payback(
      positionID: BigNumberish,
      coinsToPayBack: BigNumberish,
      collateralToWithdraw: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "payback(uint64,uint256,uint256)"(
      positionID: BigNumberish,
      coinsToPayBack: BigNumberish,
      collateralToWithdraw: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    periodLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "periodLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCollateralizationRequirement(
      collateral: BigNumberish,
      requirement: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCollateralizationRequirement(uint8,uint256)"(
      collateral: BigNumberish,
      requirement: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setInterestPortionToLenders(
      percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setInterestPortionToLenders(uint256)"(
      percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxDebt(
      collateral: BigNumberish,
      debt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxDebt(uint8,uint256)"(
      collateral: BigNumberish,
      debt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinBorrowTime(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinBorrowTime(uint64)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinPositionSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinPositionSize(uint256)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stop(overrides?: Overrides): Promise<PopulatedTransaction>;

    "stop()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stopped()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    systemAccrueInterest(overrides?: Overrides): Promise<PopulatedTransaction>;

    "systemAccrueInterest()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    systemGetUpdatedPosition(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "systemGetUpdatedPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    systemNotifyCollateralPriceUpdated(
      pair: string,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "systemNotifyCollateralPriceUpdated(address,uint256)"(
      pair: string,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unlend(
      lendTokenCount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unlend(uint256)"(
      lendTokenCount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validUpdate(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validUpdate(bytes4)"(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valueOfLendTokensInCoin(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "valueOfLendTokensInCoin(uint256)"(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
