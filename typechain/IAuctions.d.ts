/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IAuctionsInterface extends ethers.utils.Interface {
  functions: {
    "lastAuctionCompletionTime()": FunctionFragment;
    "stop()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "lastAuctionCompletionTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "lastAuctionCompletionTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;

  events: {
    "AuctionBid(bool,uint64,address,uint256)": EventFragment;
    "AuctionSettled(bool,uint64,address,address,address)": EventFragment;
    "AuctionStarted(bool,uint64,uint256,uint64)": EventFragment;
    "ParameterUpdated(string,uint256)": EventFragment;
    "ParameterUpdated64(string,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated64"): EventFragment;
}

export class IAuctions extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IAuctionsInterface;

  functions: {
    lastAuctionCompletionTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lastAuctionCompletionTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    stop(overrides?: Overrides): Promise<ContractTransaction>;

    "stop()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  lastAuctionCompletionTime(overrides?: CallOverrides): Promise<BigNumber>;

  "lastAuctionCompletionTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  stop(overrides?: Overrides): Promise<ContractTransaction>;

  "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    lastAuctionCompletionTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastAuctionCompletionTime()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stop(overrides?: CallOverrides): Promise<void>;

    "stop()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    AuctionBid(
      isSurplus: boolean | null,
      auctionID: BigNumberish | null,
      bidder: string | null,
      bid: null
    ): EventFilter;

    AuctionSettled(
      isSurplus: boolean | null,
      auctionID: BigNumberish | null,
      winner: string | null,
      creator: null,
      cleaner: null
    ): EventFilter;

    AuctionStarted(
      isSurplus: boolean | null,
      auctionID: BigNumberish | null,
      count: BigNumberish | null,
      maxEndTime: null
    ): EventFilter;

    ParameterUpdated(paramName: string | null, value: null): EventFilter;

    ParameterUpdated64(paramName: string | null, value: null): EventFilter;
  };

  estimateGas: {
    lastAuctionCompletionTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastAuctionCompletionTime()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stop(overrides?: Overrides): Promise<BigNumber>;

    "stop()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    lastAuctionCompletionTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastAuctionCompletionTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stop(overrides?: Overrides): Promise<PopulatedTransaction>;

    "stop()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
