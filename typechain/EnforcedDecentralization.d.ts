/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface EnforcedDecentralizationInterface extends ethers.utils.Interface {
  functions: {
    "LOCK_EXTENSION()": FunctionFragment;
    "blacklistAction(string)": FunctionFragment;
    "contractUpgradeLockDelaysRemaining()": FunctionFragment;
    "contractUpgradeLockTime()": FunctionFragment;
    "delayContractUpgradeExpiration()": FunctionFragment;
    "delayParameterUpdateExpiration()": FunctionFragment;
    "deployer()": FunctionFragment;
    "governor()": FunctionFragment;
    "init(address)": FunctionFragment;
    "parameterUpdateLockDelaysRemaining()": FunctionFragment;
    "parameterUpdateLockTime()": FunctionFragment;
    "stopped()": FunctionFragment;
    "validUpdate(bytes4)": FunctionFragment;
    "validateAction(address,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "LOCK_EXTENSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistAction",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "contractUpgradeLockDelaysRemaining",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractUpgradeLockTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delayContractUpgradeExpiration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delayParameterUpdateExpiration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "parameterUpdateLockDelaysRemaining",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "parameterUpdateLockTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validUpdate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateAction",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "LOCK_EXTENSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractUpgradeLockDelaysRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractUpgradeLockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delayContractUpgradeExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delayParameterUpdateExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parameterUpdateLockDelaysRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parameterUpdateLockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateAction",
    data: BytesLike
  ): Result;

  events: {
    "ActionBlacklisted(string)": EventFragment;
    "Initialized(address)": EventFragment;
    "Stopped()": EventFragment;
    "UpdateLockDelayed(uint64,uint8)": EventFragment;
    "UpgradeLockDelayed(uint64,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActionBlacklisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stopped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateLockDelayed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeLockDelayed"): EventFragment;
}

export class EnforcedDecentralization extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: EnforcedDecentralizationInterface;

  functions: {
    LOCK_EXTENSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    "LOCK_EXTENSION()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    blacklistAction(
      signature: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "blacklistAction(string)"(
      signature: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    contractUpgradeLockDelaysRemaining(
      overrides?: CallOverrides
    ): Promise<[number]>;

    "contractUpgradeLockDelaysRemaining()"(
      overrides?: CallOverrides
    ): Promise<[number]>;

    contractUpgradeLockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "contractUpgradeLockTime()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    delayContractUpgradeExpiration(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "delayContractUpgradeExpiration()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    delayParameterUpdateExpiration(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "delayParameterUpdateExpiration()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    "deployer()"(overrides?: CallOverrides): Promise<[string]>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    "governor()"(overrides?: CallOverrides): Promise<[string]>;

    init(
      _governor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    parameterUpdateLockDelaysRemaining(
      overrides?: CallOverrides
    ): Promise<[number]>;

    "parameterUpdateLockDelaysRemaining()"(
      overrides?: CallOverrides
    ): Promise<[number]>;

    parameterUpdateLockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "parameterUpdateLockTime()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stopped(overrides?: CallOverrides): Promise<[boolean]>;

    "stopped()"(overrides?: CallOverrides): Promise<[boolean]>;

    validUpdate(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "validUpdate(bytes4)"(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    validateAction(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "validateAction(address,string)"(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  LOCK_EXTENSION(overrides?: CallOverrides): Promise<BigNumber>;

  "LOCK_EXTENSION()"(overrides?: CallOverrides): Promise<BigNumber>;

  blacklistAction(
    signature: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "blacklistAction(string)"(
    signature: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  contractUpgradeLockDelaysRemaining(
    overrides?: CallOverrides
  ): Promise<number>;

  "contractUpgradeLockDelaysRemaining()"(
    overrides?: CallOverrides
  ): Promise<number>;

  contractUpgradeLockTime(overrides?: CallOverrides): Promise<BigNumber>;

  "contractUpgradeLockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  delayContractUpgradeExpiration(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "delayContractUpgradeExpiration()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  delayParameterUpdateExpiration(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "delayParameterUpdateExpiration()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deployer(overrides?: CallOverrides): Promise<string>;

  "deployer()"(overrides?: CallOverrides): Promise<string>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  init(_governor: string, overrides?: Overrides): Promise<ContractTransaction>;

  "init(address)"(
    _governor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  parameterUpdateLockDelaysRemaining(
    overrides?: CallOverrides
  ): Promise<number>;

  "parameterUpdateLockDelaysRemaining()"(
    overrides?: CallOverrides
  ): Promise<number>;

  parameterUpdateLockTime(overrides?: CallOverrides): Promise<BigNumber>;

  "parameterUpdateLockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  stopped(overrides?: CallOverrides): Promise<boolean>;

  "stopped()"(overrides?: CallOverrides): Promise<boolean>;

  validUpdate(action: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "validUpdate(bytes4)"(
    action: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  validateAction(
    target: string,
    signature: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "validateAction(address,string)"(
    target: string,
    signature: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    LOCK_EXTENSION(overrides?: CallOverrides): Promise<BigNumber>;

    "LOCK_EXTENSION()"(overrides?: CallOverrides): Promise<BigNumber>;

    blacklistAction(
      signature: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "blacklistAction(string)"(
      signature: string,
      overrides?: CallOverrides
    ): Promise<void>;

    contractUpgradeLockDelaysRemaining(
      overrides?: CallOverrides
    ): Promise<number>;

    "contractUpgradeLockDelaysRemaining()"(
      overrides?: CallOverrides
    ): Promise<number>;

    contractUpgradeLockTime(overrides?: CallOverrides): Promise<BigNumber>;

    "contractUpgradeLockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    delayContractUpgradeExpiration(overrides?: CallOverrides): Promise<void>;

    "delayContractUpgradeExpiration()"(
      overrides?: CallOverrides
    ): Promise<void>;

    delayParameterUpdateExpiration(overrides?: CallOverrides): Promise<void>;

    "delayParameterUpdateExpiration()"(
      overrides?: CallOverrides
    ): Promise<void>;

    deployer(overrides?: CallOverrides): Promise<string>;

    "deployer()"(overrides?: CallOverrides): Promise<string>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    init(_governor: string, overrides?: CallOverrides): Promise<void>;

    "init(address)"(
      _governor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    parameterUpdateLockDelaysRemaining(
      overrides?: CallOverrides
    ): Promise<number>;

    "parameterUpdateLockDelaysRemaining()"(
      overrides?: CallOverrides
    ): Promise<number>;

    parameterUpdateLockTime(overrides?: CallOverrides): Promise<BigNumber>;

    "parameterUpdateLockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<boolean>;

    "stopped()"(overrides?: CallOverrides): Promise<boolean>;

    validUpdate(action: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "validUpdate(bytes4)"(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    validateAction(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "validateAction(address,string)"(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    ActionBlacklisted(signature: string | null): EventFilter;

    Initialized(governor: string | null): EventFilter;

    Stopped(): EventFilter;

    UpdateLockDelayed(locktime: null, delaysRemaining: null): EventFilter;

    UpgradeLockDelayed(locktime: null, delaysRemaining: null): EventFilter;
  };

  estimateGas: {
    LOCK_EXTENSION(overrides?: CallOverrides): Promise<BigNumber>;

    "LOCK_EXTENSION()"(overrides?: CallOverrides): Promise<BigNumber>;

    blacklistAction(
      signature: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "blacklistAction(string)"(
      signature: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    contractUpgradeLockDelaysRemaining(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "contractUpgradeLockDelaysRemaining()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractUpgradeLockTime(overrides?: CallOverrides): Promise<BigNumber>;

    "contractUpgradeLockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    delayContractUpgradeExpiration(overrides?: Overrides): Promise<BigNumber>;

    "delayContractUpgradeExpiration()"(
      overrides?: Overrides
    ): Promise<BigNumber>;

    delayParameterUpdateExpiration(overrides?: Overrides): Promise<BigNumber>;

    "delayParameterUpdateExpiration()"(
      overrides?: Overrides
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    "deployer()"(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    init(_governor: string, overrides?: Overrides): Promise<BigNumber>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    parameterUpdateLockDelaysRemaining(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "parameterUpdateLockDelaysRemaining()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parameterUpdateLockTime(overrides?: CallOverrides): Promise<BigNumber>;

    "parameterUpdateLockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    "stopped()"(overrides?: CallOverrides): Promise<BigNumber>;

    validUpdate(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validUpdate(bytes4)"(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateAction(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validateAction(address,string)"(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LOCK_EXTENSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "LOCK_EXTENSION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blacklistAction(
      signature: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "blacklistAction(string)"(
      signature: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    contractUpgradeLockDelaysRemaining(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "contractUpgradeLockDelaysRemaining()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractUpgradeLockTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "contractUpgradeLockTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delayContractUpgradeExpiration(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "delayContractUpgradeExpiration()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    delayParameterUpdateExpiration(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "delayParameterUpdateExpiration()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deployer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      _governor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    parameterUpdateLockDelaysRemaining(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "parameterUpdateLockDelaysRemaining()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parameterUpdateLockTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "parameterUpdateLockTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stopped()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validUpdate(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validUpdate(bytes4)"(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateAction(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validateAction(address,string)"(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
