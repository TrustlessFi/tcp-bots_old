/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CreatorAllocationInterface extends ethers.utils.Interface {
  functions: {
    "MIN_AVERAGE_YEARS_LOCKED()": FunctionFragment;
    "dao()": FunctionFragment;
    "getTokens(uint128)": FunctionFragment;
    "lockPositions(address)": FunctionFragment;
    "lockTokensIntoDao(uint128,uint8)": FunctionFragment;
    "startTime()": FunctionFragment;
    "token()": FunctionFragment;
    "tokenMinter()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MIN_AVERAGE_YEARS_LOCKED",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dao", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockPositions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockTokensIntoDao",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenMinter",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MIN_AVERAGE_YEARS_LOCKED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockTokensIntoDao",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenMinter",
    data: BytesLike
  ): Result;

  events: {
    "LockPositionCreated(address,uint128)": EventFragment;
    "TokensLocked(address,uint8,uint256)": EventFragment;
    "TokensRetrieved(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LockPositionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensRetrieved"): EventFragment;
}

export class CreatorAllocation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CreatorAllocationInterface;

  functions: {
    MIN_AVERAGE_YEARS_LOCKED(overrides?: CallOverrides): Promise<[BigNumber]>;

    dao(overrides?: CallOverrides): Promise<[string]>;

    getTokens(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockPositions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalTokens: BigNumber;
        tokensLocked: BigNumber;
        cumulativeTokensLockedxLockYears: BigNumber;
      }
    >;

    lockTokensIntoDao(
      count: BigNumberish,
      lockDurationMonths: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenMinter(overrides?: CallOverrides): Promise<[string]>;
  };

  MIN_AVERAGE_YEARS_LOCKED(overrides?: CallOverrides): Promise<BigNumber>;

  dao(overrides?: CallOverrides): Promise<string>;

  getTokens(
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockPositions(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      totalTokens: BigNumber;
      tokensLocked: BigNumber;
      cumulativeTokensLockedxLockYears: BigNumber;
    }
  >;

  lockTokensIntoDao(
    count: BigNumberish,
    lockDurationMonths: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenMinter(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MIN_AVERAGE_YEARS_LOCKED(overrides?: CallOverrides): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<string>;

    getTokens(count: BigNumberish, overrides?: CallOverrides): Promise<void>;

    lockPositions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalTokens: BigNumber;
        tokensLocked: BigNumber;
        cumulativeTokensLockedxLockYears: BigNumber;
      }
    >;

    lockTokensIntoDao(
      count: BigNumberish,
      lockDurationMonths: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenMinter(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    LockPositionCreated(
      receiver?: string | null,
      count?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { receiver: string; count: BigNumber }
    >;

    TokensLocked(
      receiver?: string | null,
      lockDurationMonths?: BigNumberish | null,
      count?: null
    ): TypedEventFilter<
      [string, number, BigNumber],
      { receiver: string; lockDurationMonths: number; count: BigNumber }
    >;

    TokensRetrieved(
      receiver?: string | null,
      count?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { receiver: string; count: BigNumber }
    >;
  };

  estimateGas: {
    MIN_AVERAGE_YEARS_LOCKED(overrides?: CallOverrides): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<BigNumber>;

    getTokens(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockPositions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lockTokensIntoDao(
      count: BigNumberish,
      lockDurationMonths: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenMinter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MIN_AVERAGE_YEARS_LOCKED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokens(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockPositions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockTokensIntoDao(
      count: BigNumberish,
      lockDurationMonths: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenMinter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
