/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AccountingInterface extends ethers.utils.Interface {
  functions: {
    "adjustDebt(uint256,bool)": FunctionFragment;
    "calculateCollateralizationBand(uint256,uint256)": FunctionFragment;
    "collateralizationBand(uint256)": FunctionFragment;
    "debt()": FunctionFragment;
    "distributePairTokens(address,address,uint256)": FunctionFragment;
    "getBasicPositionInfo(uint64)": FunctionFragment;
    "getLiquidationAccount()": FunctionFragment;
    "getPairTokenPosition(address,address)": FunctionFragment;
    "getPosition(uint64)": FunctionFragment;
    "getSystemDebtInfo()": FunctionFragment;
    "governor()": FunctionFragment;
    "init(address)": FunctionFragment;
    "positionsCollateralization(uint64[])": FunctionFragment;
    "positionsForBand(uint32)": FunctionFragment;
    "sendCollateral(address,uint256)": FunctionFragment;
    "sendLentCoin(address,uint256)": FunctionFragment;
    "setLiquidationAccount(tuple)": FunctionFragment;
    "setPairTokenPosition(address,address,tuple)": FunctionFragment;
    "setPosition(uint64,tuple)": FunctionFragment;
    "setSystemDebtInfo(tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "adjustDebt",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateCollateralizationBand",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralizationBand",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "debt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distributePairTokens",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBasicPositionInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPairTokenPosition",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSystemDebtInfo",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "positionsCollateralization",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "positionsForBand",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendCollateral",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendLentCoin",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationAccount",
    values: [
      {
        startDebtExchangeRate: BigNumberish;
        debt: BigNumberish;
        collateral: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPairTokenPosition",
    values: [
      string,
      string,
      {
        totalRewards: BigNumberish;
        count: BigNumberish;
        cumulativePairCoinCount: BigNumberish;
        lastPeriodRewarded: BigNumberish;
        unlockPeriod: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPosition",
    values: [
      BigNumberish,
      {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startCNPRewards: BigNumberish;
        collateralizationBandIndex: BigNumberish;
        lastUpdateTime: BigNumberish;
        lastBorrowTime: BigNumberish;
        collateralizationBand: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setSystemDebtInfo",
    values: [
      {
        debt: BigNumberish;
        totalCNPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      }
    ]
  ): string;

  decodeFunctionResult(functionFragment: "adjustDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateCollateralizationBand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralizationBand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributePairTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBasicPositionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairTokenPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSystemDebtInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "positionsCollateralization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionsForBand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendLentCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPairTokenPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSystemDebtInfo",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(address)": EventFragment;
    "Stopped()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stopped"): EventFragment;
}

export class Accounting extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AccountingInterface;

  functions: {
    adjustDebt(
      count: BigNumberish,
      increase: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adjustDebt(uint256,bool)"(
      count: BigNumberish,
      increase: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    calculateCollateralizationBand(
      debtCount: BigNumberish,
      collateralCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      band: number;
      0: number;
    }>;

    "calculateCollateralizationBand(uint256,uint256)"(
      debtCount: BigNumberish,
      collateralCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      band: number;
      0: number;
    }>;

    collateralizationBand(
      c: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      band: number;
      0: number;
    }>;

    "collateralizationBand(uint256)"(
      c: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      band: number;
      0: number;
    }>;

    debt(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "debt()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    distributePairTokens(
      to: string,
      pair: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "distributePairTokens(address,address,uint256)"(
      to: string,
      pair: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getBasicPositionInfo(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      debtCount: BigNumber;
      collateralCount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getBasicPositionInfo(uint64)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      debtCount: BigNumber;
      collateralCount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getLiquidationAccount(
      overrides?: CallOverrides
    ): Promise<{
      lqAcct: {
        startDebtExchangeRate: BigNumber;
        debt: BigNumber;
        collateral: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
      };
      0: {
        startDebtExchangeRate: BigNumber;
        debt: BigNumber;
        collateral: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
      };
    }>;

    "getLiquidationAccount()"(
      overrides?: CallOverrides
    ): Promise<{
      lqAcct: {
        startDebtExchangeRate: BigNumber;
        debt: BigNumber;
        collateral: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
      };
      0: {
        startDebtExchangeRate: BigNumber;
        debt: BigNumber;
        collateral: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
      };
    }>;

    getPairTokenPosition(
      owner: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<{
      pt: {
        totalRewards: BigNumber;
        count: BigNumber;
        cumulativePairCoinCount: BigNumber;
        lastPeriodRewarded: BigNumber;
        unlockPeriod: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
      };
      0: {
        totalRewards: BigNumber;
        count: BigNumber;
        cumulativePairCoinCount: BigNumber;
        lastPeriodRewarded: BigNumber;
        unlockPeriod: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
      };
    }>;

    "getPairTokenPosition(address,address)"(
      owner: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<{
      pt: {
        totalRewards: BigNumber;
        count: BigNumber;
        cumulativePairCoinCount: BigNumber;
        lastPeriodRewarded: BigNumber;
        unlockPeriod: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
      };
      0: {
        totalRewards: BigNumber;
        count: BigNumber;
        cumulativePairCoinCount: BigNumber;
        lastPeriodRewarded: BigNumber;
        unlockPeriod: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
      };
    }>;

    getPosition(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        startCumulativeDebt: BigNumber;
        collateral: BigNumber;
        debt: BigNumber;
        startDebtExchangeRate: BigNumber;
        startCNPRewards: BigNumber;
        collateralizationBandIndex: BigNumber;
        lastUpdateTime: BigNumber;
        lastBorrowTime: BigNumber;
        collateralizationBand: number;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
        8: number;
      };
    }>;

    "getPosition(uint64)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        startCumulativeDebt: BigNumber;
        collateral: BigNumber;
        debt: BigNumber;
        startDebtExchangeRate: BigNumber;
        startCNPRewards: BigNumber;
        collateralizationBandIndex: BigNumber;
        lastUpdateTime: BigNumber;
        lastBorrowTime: BigNumber;
        collateralizationBand: number;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
        8: number;
      };
    }>;

    getSystemDebtInfo(
      overrides?: CallOverrides
    ): Promise<{
      0: {
        debt: BigNumber;
        totalCNPRewards: BigNumber;
        cumulativeDebt: BigNumber;
        debtExchangeRate: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
      };
    }>;

    "getSystemDebtInfo()"(
      overrides?: CallOverrides
    ): Promise<{
      0: {
        debt: BigNumber;
        totalCNPRewards: BigNumber;
        cumulativeDebt: BigNumber;
        debtExchangeRate: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
      };
    }>;

    governor(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "governor()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    init(
      governor_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address)"(
      governor_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    positionsCollateralization(
      positionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      collateralizations: BigNumber[];
      0: BigNumber[];
    }>;

    "positionsCollateralization(uint64[])"(
      positionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      collateralizations: BigNumber[];
      0: BigNumber[];
    }>;

    positionsForBand(
      band: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      positions: BigNumber[];
      0: BigNumber[];
    }>;

    "positionsForBand(uint32)"(
      band: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      positions: BigNumber[];
      0: BigNumber[];
    }>;

    sendCollateral(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sendCollateral(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sendLentCoin(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sendLentCoin(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLiquidationAccount(
      lqAcct: {
        startDebtExchangeRate: BigNumberish;
        debt: BigNumberish;
        collateral: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLiquidationAccount(tuple)"(
      lqAcct: {
        startDebtExchangeRate: BigNumberish;
        debt: BigNumberish;
        collateral: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPairTokenPosition(
      owner: string,
      pair: string,
      pt: {
        totalRewards: BigNumberish;
        count: BigNumberish;
        cumulativePairCoinCount: BigNumberish;
        lastPeriodRewarded: BigNumberish;
        unlockPeriod: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPairTokenPosition(address,address,tuple)"(
      owner: string,
      pair: string,
      pt: {
        totalRewards: BigNumberish;
        count: BigNumberish;
        cumulativePairCoinCount: BigNumberish;
        lastPeriodRewarded: BigNumberish;
        unlockPeriod: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPosition(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startCNPRewards: BigNumberish;
        collateralizationBandIndex: BigNumberish;
        lastUpdateTime: BigNumberish;
        lastBorrowTime: BigNumberish;
        collateralizationBand: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPosition(uint64,tuple)"(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startCNPRewards: BigNumberish;
        collateralizationBandIndex: BigNumberish;
        lastUpdateTime: BigNumberish;
        lastBorrowTime: BigNumberish;
        collateralizationBand: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSystemDebtInfo(
      _sdi: {
        debt: BigNumberish;
        totalCNPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSystemDebtInfo(tuple)"(
      _sdi: {
        debt: BigNumberish;
        totalCNPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  adjustDebt(
    count: BigNumberish,
    increase: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adjustDebt(uint256,bool)"(
    count: BigNumberish,
    increase: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  calculateCollateralizationBand(
    debtCount: BigNumberish,
    collateralCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  "calculateCollateralizationBand(uint256,uint256)"(
    debtCount: BigNumberish,
    collateralCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  collateralizationBand(
    c: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  "collateralizationBand(uint256)"(
    c: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  debt(overrides?: CallOverrides): Promise<BigNumber>;

  "debt()"(overrides?: CallOverrides): Promise<BigNumber>;

  distributePairTokens(
    to: string,
    pair: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "distributePairTokens(address,address,uint256)"(
    to: string,
    pair: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getBasicPositionInfo(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    debtCount: BigNumber;
    collateralCount: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "getBasicPositionInfo(uint64)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    debtCount: BigNumber;
    collateralCount: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  getLiquidationAccount(
    overrides?: CallOverrides
  ): Promise<{
    startDebtExchangeRate: BigNumber;
    debt: BigNumber;
    collateral: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "getLiquidationAccount()"(
    overrides?: CallOverrides
  ): Promise<{
    startDebtExchangeRate: BigNumber;
    debt: BigNumber;
    collateral: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  getPairTokenPosition(
    owner: string,
    pair: string,
    overrides?: CallOverrides
  ): Promise<{
    totalRewards: BigNumber;
    count: BigNumber;
    cumulativePairCoinCount: BigNumber;
    lastPeriodRewarded: BigNumber;
    unlockPeriod: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  "getPairTokenPosition(address,address)"(
    owner: string,
    pair: string,
    overrides?: CallOverrides
  ): Promise<{
    totalRewards: BigNumber;
    count: BigNumber;
    cumulativePairCoinCount: BigNumber;
    lastPeriodRewarded: BigNumber;
    unlockPeriod: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  getPosition(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    startCumulativeDebt: BigNumber;
    collateral: BigNumber;
    debt: BigNumber;
    startDebtExchangeRate: BigNumber;
    startCNPRewards: BigNumber;
    collateralizationBandIndex: BigNumber;
    lastUpdateTime: BigNumber;
    lastBorrowTime: BigNumber;
    collateralizationBand: number;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: number;
  }>;

  "getPosition(uint64)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    startCumulativeDebt: BigNumber;
    collateral: BigNumber;
    debt: BigNumber;
    startDebtExchangeRate: BigNumber;
    startCNPRewards: BigNumber;
    collateralizationBandIndex: BigNumber;
    lastUpdateTime: BigNumber;
    lastBorrowTime: BigNumber;
    collateralizationBand: number;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: number;
  }>;

  getSystemDebtInfo(
    overrides?: CallOverrides
  ): Promise<{
    debt: BigNumber;
    totalCNPRewards: BigNumber;
    cumulativeDebt: BigNumber;
    debtExchangeRate: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  "getSystemDebtInfo()"(
    overrides?: CallOverrides
  ): Promise<{
    debt: BigNumber;
    totalCNPRewards: BigNumber;
    cumulativeDebt: BigNumber;
    debtExchangeRate: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  init(governor_: string, overrides?: Overrides): Promise<ContractTransaction>;

  "init(address)"(
    governor_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  positionsCollateralization(
    positionIDs: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "positionsCollateralization(uint64[])"(
    positionIDs: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  positionsForBand(
    band: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "positionsForBand(uint32)"(
    band: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  sendCollateral(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sendCollateral(address,uint256)"(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sendLentCoin(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sendLentCoin(address,uint256)"(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLiquidationAccount(
    lqAcct: {
      startDebtExchangeRate: BigNumberish;
      debt: BigNumberish;
      collateral: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLiquidationAccount(tuple)"(
    lqAcct: {
      startDebtExchangeRate: BigNumberish;
      debt: BigNumberish;
      collateral: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPairTokenPosition(
    owner: string,
    pair: string,
    pt: {
      totalRewards: BigNumberish;
      count: BigNumberish;
      cumulativePairCoinCount: BigNumberish;
      lastPeriodRewarded: BigNumberish;
      unlockPeriod: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPairTokenPosition(address,address,tuple)"(
    owner: string,
    pair: string,
    pt: {
      totalRewards: BigNumberish;
      count: BigNumberish;
      cumulativePairCoinCount: BigNumberish;
      lastPeriodRewarded: BigNumberish;
      unlockPeriod: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPosition(
    positionID: BigNumberish,
    dp: {
      startCumulativeDebt: BigNumberish;
      collateral: BigNumberish;
      debt: BigNumberish;
      startDebtExchangeRate: BigNumberish;
      startCNPRewards: BigNumberish;
      collateralizationBandIndex: BigNumberish;
      lastUpdateTime: BigNumberish;
      lastBorrowTime: BigNumberish;
      collateralizationBand: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPosition(uint64,tuple)"(
    positionID: BigNumberish,
    dp: {
      startCumulativeDebt: BigNumberish;
      collateral: BigNumberish;
      debt: BigNumberish;
      startDebtExchangeRate: BigNumberish;
      startCNPRewards: BigNumberish;
      collateralizationBandIndex: BigNumberish;
      lastUpdateTime: BigNumberish;
      lastBorrowTime: BigNumberish;
      collateralizationBand: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSystemDebtInfo(
    _sdi: {
      debt: BigNumberish;
      totalCNPRewards: BigNumberish;
      cumulativeDebt: BigNumberish;
      debtExchangeRate: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSystemDebtInfo(tuple)"(
    _sdi: {
      debt: BigNumberish;
      totalCNPRewards: BigNumberish;
      cumulativeDebt: BigNumberish;
      debtExchangeRate: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    adjustDebt(
      count: BigNumberish,
      increase: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "adjustDebt(uint256,bool)"(
      count: BigNumberish,
      increase: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateCollateralizationBand(
      debtCount: BigNumberish,
      collateralCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "calculateCollateralizationBand(uint256,uint256)"(
      debtCount: BigNumberish,
      collateralCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    collateralizationBand(
      c: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "collateralizationBand(uint256)"(
      c: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    debt(overrides?: CallOverrides): Promise<BigNumber>;

    "debt()"(overrides?: CallOverrides): Promise<BigNumber>;

    distributePairTokens(
      to: string,
      pair: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "distributePairTokens(address,address,uint256)"(
      to: string,
      pair: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBasicPositionInfo(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      debtCount: BigNumber;
      collateralCount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getBasicPositionInfo(uint64)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      debtCount: BigNumber;
      collateralCount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getLiquidationAccount(
      overrides?: CallOverrides
    ): Promise<{
      startDebtExchangeRate: BigNumber;
      debt: BigNumber;
      collateral: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getLiquidationAccount()"(
      overrides?: CallOverrides
    ): Promise<{
      startDebtExchangeRate: BigNumber;
      debt: BigNumber;
      collateral: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    getPairTokenPosition(
      owner: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<{
      totalRewards: BigNumber;
      count: BigNumber;
      cumulativePairCoinCount: BigNumber;
      lastPeriodRewarded: BigNumber;
      unlockPeriod: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    "getPairTokenPosition(address,address)"(
      owner: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<{
      totalRewards: BigNumber;
      count: BigNumber;
      cumulativePairCoinCount: BigNumber;
      lastPeriodRewarded: BigNumber;
      unlockPeriod: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    getPosition(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      startCumulativeDebt: BigNumber;
      collateral: BigNumber;
      debt: BigNumber;
      startDebtExchangeRate: BigNumber;
      startCNPRewards: BigNumber;
      collateralizationBandIndex: BigNumber;
      lastUpdateTime: BigNumber;
      lastBorrowTime: BigNumber;
      collateralizationBand: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: number;
    }>;

    "getPosition(uint64)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      startCumulativeDebt: BigNumber;
      collateral: BigNumber;
      debt: BigNumber;
      startDebtExchangeRate: BigNumber;
      startCNPRewards: BigNumber;
      collateralizationBandIndex: BigNumber;
      lastUpdateTime: BigNumber;
      lastBorrowTime: BigNumber;
      collateralizationBand: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: number;
    }>;

    getSystemDebtInfo(
      overrides?: CallOverrides
    ): Promise<{
      debt: BigNumber;
      totalCNPRewards: BigNumber;
      cumulativeDebt: BigNumber;
      debtExchangeRate: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "getSystemDebtInfo()"(
      overrides?: CallOverrides
    ): Promise<{
      debt: BigNumber;
      totalCNPRewards: BigNumber;
      cumulativeDebt: BigNumber;
      debtExchangeRate: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    init(governor_: string, overrides?: CallOverrides): Promise<void>;

    "init(address)"(
      governor_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    positionsCollateralization(
      positionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "positionsCollateralization(uint64[])"(
      positionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    positionsForBand(
      band: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "positionsForBand(uint32)"(
      band: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    sendCollateral(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendCollateral(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendLentCoin(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendLentCoin(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationAccount(
      lqAcct: {
        startDebtExchangeRate: BigNumberish;
        debt: BigNumberish;
        collateral: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setLiquidationAccount(tuple)"(
      lqAcct: {
        startDebtExchangeRate: BigNumberish;
        debt: BigNumberish;
        collateral: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setPairTokenPosition(
      owner: string,
      pair: string,
      pt: {
        totalRewards: BigNumberish;
        count: BigNumberish;
        cumulativePairCoinCount: BigNumberish;
        lastPeriodRewarded: BigNumberish;
        unlockPeriod: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setPairTokenPosition(address,address,tuple)"(
      owner: string,
      pair: string,
      pt: {
        totalRewards: BigNumberish;
        count: BigNumberish;
        cumulativePairCoinCount: BigNumberish;
        lastPeriodRewarded: BigNumberish;
        unlockPeriod: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setPosition(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startCNPRewards: BigNumberish;
        collateralizationBandIndex: BigNumberish;
        lastUpdateTime: BigNumberish;
        lastBorrowTime: BigNumberish;
        collateralizationBand: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setPosition(uint64,tuple)"(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startCNPRewards: BigNumberish;
        collateralizationBandIndex: BigNumberish;
        lastUpdateTime: BigNumberish;
        lastBorrowTime: BigNumberish;
        collateralizationBand: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setSystemDebtInfo(
      _sdi: {
        debt: BigNumberish;
        totalCNPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setSystemDebtInfo(tuple)"(
      _sdi: {
        debt: BigNumberish;
        totalCNPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Initialized(governor: string | null): EventFilter;

    Stopped(): EventFilter;
  };

  estimateGas: {
    adjustDebt(
      count: BigNumberish,
      increase: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adjustDebt(uint256,bool)"(
      count: BigNumberish,
      increase: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    calculateCollateralizationBand(
      debtCount: BigNumberish,
      collateralCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateCollateralizationBand(uint256,uint256)"(
      debtCount: BigNumberish,
      collateralCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralizationBand(
      c: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collateralizationBand(uint256)"(
      c: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debt(overrides?: CallOverrides): Promise<BigNumber>;

    "debt()"(overrides?: CallOverrides): Promise<BigNumber>;

    distributePairTokens(
      to: string,
      pair: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "distributePairTokens(address,address,uint256)"(
      to: string,
      pair: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getBasicPositionInfo(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBasicPositionInfo(uint64)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidationAccount(overrides?: CallOverrides): Promise<BigNumber>;

    "getLiquidationAccount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPairTokenPosition(
      owner: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPairTokenPosition(address,address)"(
      owner: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPosition(uint64)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSystemDebtInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "getSystemDebtInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    init(governor_: string, overrides?: Overrides): Promise<BigNumber>;

    "init(address)"(
      governor_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    positionsCollateralization(
      positionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "positionsCollateralization(uint64[])"(
      positionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positionsForBand(
      band: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "positionsForBand(uint32)"(
      band: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendCollateral(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sendCollateral(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sendLentCoin(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sendLentCoin(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLiquidationAccount(
      lqAcct: {
        startDebtExchangeRate: BigNumberish;
        debt: BigNumberish;
        collateral: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLiquidationAccount(tuple)"(
      lqAcct: {
        startDebtExchangeRate: BigNumberish;
        debt: BigNumberish;
        collateral: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPairTokenPosition(
      owner: string,
      pair: string,
      pt: {
        totalRewards: BigNumberish;
        count: BigNumberish;
        cumulativePairCoinCount: BigNumberish;
        lastPeriodRewarded: BigNumberish;
        unlockPeriod: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPairTokenPosition(address,address,tuple)"(
      owner: string,
      pair: string,
      pt: {
        totalRewards: BigNumberish;
        count: BigNumberish;
        cumulativePairCoinCount: BigNumberish;
        lastPeriodRewarded: BigNumberish;
        unlockPeriod: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPosition(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startCNPRewards: BigNumberish;
        collateralizationBandIndex: BigNumberish;
        lastUpdateTime: BigNumberish;
        lastBorrowTime: BigNumberish;
        collateralizationBand: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPosition(uint64,tuple)"(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startCNPRewards: BigNumberish;
        collateralizationBandIndex: BigNumberish;
        lastUpdateTime: BigNumberish;
        lastBorrowTime: BigNumberish;
        collateralizationBand: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSystemDebtInfo(
      _sdi: {
        debt: BigNumberish;
        totalCNPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSystemDebtInfo(tuple)"(
      _sdi: {
        debt: BigNumberish;
        totalCNPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adjustDebt(
      count: BigNumberish,
      increase: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adjustDebt(uint256,bool)"(
      count: BigNumberish,
      increase: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    calculateCollateralizationBand(
      debtCount: BigNumberish,
      collateralCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateCollateralizationBand(uint256,uint256)"(
      debtCount: BigNumberish,
      collateralCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralizationBand(
      c: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateralizationBand(uint256)"(
      c: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "debt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributePairTokens(
      to: string,
      pair: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "distributePairTokens(address,address,uint256)"(
      to: string,
      pair: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getBasicPositionInfo(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBasicPositionInfo(uint64)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidationAccount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidationAccount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPairTokenPosition(
      owner: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPairTokenPosition(address,address)"(
      owner: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPosition(uint64)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSystemDebtInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSystemDebtInfo()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      governor_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address)"(
      governor_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    positionsCollateralization(
      positionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "positionsCollateralization(uint64[])"(
      positionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positionsForBand(
      band: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "positionsForBand(uint32)"(
      band: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendCollateral(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sendCollateral(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sendLentCoin(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sendLentCoin(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLiquidationAccount(
      lqAcct: {
        startDebtExchangeRate: BigNumberish;
        debt: BigNumberish;
        collateral: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLiquidationAccount(tuple)"(
      lqAcct: {
        startDebtExchangeRate: BigNumberish;
        debt: BigNumberish;
        collateral: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPairTokenPosition(
      owner: string,
      pair: string,
      pt: {
        totalRewards: BigNumberish;
        count: BigNumberish;
        cumulativePairCoinCount: BigNumberish;
        lastPeriodRewarded: BigNumberish;
        unlockPeriod: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPairTokenPosition(address,address,tuple)"(
      owner: string,
      pair: string,
      pt: {
        totalRewards: BigNumberish;
        count: BigNumberish;
        cumulativePairCoinCount: BigNumberish;
        lastPeriodRewarded: BigNumberish;
        unlockPeriod: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPosition(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startCNPRewards: BigNumberish;
        collateralizationBandIndex: BigNumberish;
        lastUpdateTime: BigNumberish;
        lastBorrowTime: BigNumberish;
        collateralizationBand: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPosition(uint64,tuple)"(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startCNPRewards: BigNumberish;
        collateralizationBandIndex: BigNumberish;
        lastUpdateTime: BigNumberish;
        lastBorrowTime: BigNumberish;
        collateralizationBand: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSystemDebtInfo(
      _sdi: {
        debt: BigNumberish;
        totalCNPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSystemDebtInfo(tuple)"(
      _sdi: {
        debt: BigNumberish;
        totalCNPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
