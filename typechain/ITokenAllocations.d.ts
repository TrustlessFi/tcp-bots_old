/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ITokenAllocationsInterface extends ethers.utils.Interface {
  functions: {
    "approveAllocation(uint256)": FunctionFragment;
    "burnCNP(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveAllocation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnCNP",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnCNP", data: BytesLike): Result;

  events: {
    "AllocationApproved(uint256)": EventFragment;
    "AllocationClaimed(uint256,uint256)": EventFragment;
    "AllocationCreated(address,uint256,uint64,uint64,uint256,string)": EventFragment;
    "CNPBurned(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllocationApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllocationClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllocationCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CNPBurned"): EventFragment;
}

export class ITokenAllocations extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ITokenAllocationsInterface;

  functions: {
    approveAllocation(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approveAllocation(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    burnCNP(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burnCNP(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  approveAllocation(
    arg0: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approveAllocation(uint256)"(
    arg0: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  burnCNP(
    arg0: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burnCNP(uint256)"(
    arg0: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    approveAllocation(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approveAllocation(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burnCNP(arg0: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "burnCNP(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AllocationApproved(id: BigNumberish | null): EventFilter;

    AllocationClaimed(id: BigNumberish | null, amount: null): EventFilter;

    AllocationCreated(
      creator: string | null,
      id: BigNumberish | null,
      startTime: null,
      endTime: null,
      count: null,
      purpose: null
    ): EventFilter;

    CNPBurned(burnAmount: null): EventFilter;
  };

  estimateGas: {
    approveAllocation(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approveAllocation(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    burnCNP(arg0: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "burnCNP(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveAllocation(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approveAllocation(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    burnCNP(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burnCNP(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
