/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IGovernorInterface extends ethers.utils.Interface {
  functions: {
    "accounting()": FunctionFragment;
    "addReferencePool(address)": FunctionFragment;
    "auctions()": FunctionFragment;
    "cnp()": FunctionFragment;
    "coin()": FunctionFragment;
    "coinPositionNFT()": FunctionFragment;
    "collateralPool()": FunctionFragment;
    "currentDailyRewardCount()": FunctionFragment;
    "currentPhase()": FunctionFragment;
    "distributeLiquidityRewards(address,uint256)": FunctionFragment;
    "distributedCNP()": FunctionFragment;
    "enforcedDecentralization()": FunctionFragment;
    "execute(address,string,bytes)": FunctionFragment;
    "executeShutdown()": FunctionFragment;
    "getReferencePools()": FunctionFragment;
    "isShutdown()": FunctionFragment;
    "lend()": FunctionFragment;
    "lendCoin()": FunctionFragment;
    "liquidations()": FunctionFragment;
    "market()": FunctionFragment;
    "mintCNP(address,uint256)": FunctionFragment;
    "prices()": FunctionFragment;
    "protocolDeployer()": FunctionFragment;
    "protocolLock()": FunctionFragment;
    "protocolPool()": FunctionFragment;
    "rates()": FunctionFragment;
    "removeReferencePool(address)": FunctionFragment;
    "requireAccrueSystemInterestAccess(address)": FunctionFragment;
    "requireCoinMintingAccess(address)": FunctionFragment;
    "requireCoinReservesBurnAccess(address)": FunctionFragment;
    "requireDebtWriteAccess(address)": FunctionFragment;
    "requireGenesisAuthenticated(address,tuple)": FunctionFragment;
    "requireInstantPriceAccess(address)": FunctionFragment;
    "requirePositionWriteAccess(address)": FunctionFragment;
    "requireStoredCollateralAccess(address)": FunctionFragment;
    "rewards()": FunctionFragment;
    "settlement()": FunctionFragment;
    "shutdownTime()": FunctionFragment;
    "timelock()": FunctionFragment;
    "upgradeAuctions(address)": FunctionFragment;
    "upgradeLend(address)": FunctionFragment;
    "upgradeLiquidations(address)": FunctionFragment;
    "upgradeMarket(address)": FunctionFragment;
    "upgradePrices(address)": FunctionFragment;
    "upgradeProtocol(address)": FunctionFragment;
    "upgradeRates(address)": FunctionFragment;
    "upgradeRewards(address)": FunctionFragment;
    "upgradeSettlement(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accounting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addReferencePool",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "auctions", values?: undefined): string;
  encodeFunctionData(functionFragment: "cnp", values?: undefined): string;
  encodeFunctionData(functionFragment: "coin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "coinPositionNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentDailyRewardCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeLiquidityRewards",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributedCNP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enforcedDecentralization",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReferencePools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lend", values?: undefined): string;
  encodeFunctionData(functionFragment: "lendCoin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidations",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "market", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintCNP",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "prices", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rates", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeReferencePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireAccrueSystemInterestAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireCoinMintingAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireCoinReservesBurnAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireDebtWriteAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireGenesisAuthenticated",
    values: [string, { v: BigNumberish; r: BytesLike; s: BytesLike }]
  ): string;
  encodeFunctionData(
    functionFragment: "requireInstantPriceAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requirePositionWriteAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireStoredCollateralAccess",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "rewards", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "settlement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shutdownTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeAuctions",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeLend", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeLiquidations",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeMarket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradePrices",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeProtocol",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeRates",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeSettlement",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "accounting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addReferencePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cnp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "coin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "coinPositionNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentDailyRewardCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeLiquidityRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributedCNP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enforcedDecentralization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferencePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isShutdown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lendCoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "market", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintCNP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeReferencePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireAccrueSystemInterestAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireCoinMintingAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireCoinReservesBurnAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireDebtWriteAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireGenesisAuthenticated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireInstantPriceAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requirePositionWriteAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireStoredCollateralAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settlement", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shutdownTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeLend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeLiquidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeSettlement",
    data: BytesLike
  ): Result;

  events: {
    "AdminUpdated(address,address)": EventFragment;
    "ContractUpgraded(string,address)": EventFragment;
    "EmergencyShutdownExecuted(uint256,uint64)": EventFragment;
    "ProtocolUpgraded(address)": EventFragment;
    "ShutdownExecuted()": EventFragment;
    "ShutdownTokensLocked(address,uint256)": EventFragment;
    "ShutdownTokensUnlocked(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyShutdownExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShutdownExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShutdownTokensLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShutdownTokensUnlocked"): EventFragment;
}

export class IGovernor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IGovernorInterface;

  functions: {
    accounting(overrides?: CallOverrides): Promise<[string]>;

    "accounting()"(overrides?: CallOverrides): Promise<[string]>;

    addReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    auctions(overrides?: CallOverrides): Promise<[string]>;

    "auctions()"(overrides?: CallOverrides): Promise<[string]>;

    cnp(overrides?: CallOverrides): Promise<[string]>;

    "cnp()"(overrides?: CallOverrides): Promise<[string]>;

    coin(overrides?: CallOverrides): Promise<[string]>;

    "coin()"(overrides?: CallOverrides): Promise<[string]>;

    coinPositionNFT(overrides?: CallOverrides): Promise<[string]>;

    "coinPositionNFT()"(overrides?: CallOverrides): Promise<[string]>;

    collateralPool(overrides?: CallOverrides): Promise<[string]>;

    "collateralPool()"(overrides?: CallOverrides): Promise<[string]>;

    currentDailyRewardCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    "currentDailyRewardCount()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    currentPhase(overrides?: CallOverrides): Promise<[number]>;

    "currentPhase()"(overrides?: CallOverrides): Promise<[number]>;

    distributeLiquidityRewards(
      to: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "distributeLiquidityRewards(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributedCNP(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { circulating: BigNumber }>;

    "distributedCNP()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { circulating: BigNumber }>;

    enforcedDecentralization(overrides?: CallOverrides): Promise<[string]>;

    "enforcedDecentralization()"(overrides?: CallOverrides): Promise<[string]>;

    execute(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "execute(address,string,bytes)"(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "executeShutdown()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getReferencePools(overrides?: CallOverrides): Promise<[string[]]>;

    "getReferencePools()"(overrides?: CallOverrides): Promise<[string[]]>;

    isShutdown(overrides?: CallOverrides): Promise<[boolean]>;

    "isShutdown()"(overrides?: CallOverrides): Promise<[boolean]>;

    lend(overrides?: CallOverrides): Promise<[string]>;

    "lend()"(overrides?: CallOverrides): Promise<[string]>;

    lendCoin(overrides?: CallOverrides): Promise<[string]>;

    "lendCoin()"(overrides?: CallOverrides): Promise<[string]>;

    liquidations(overrides?: CallOverrides): Promise<[string]>;

    "liquidations()"(overrides?: CallOverrides): Promise<[string]>;

    market(overrides?: CallOverrides): Promise<[string]>;

    "market()"(overrides?: CallOverrides): Promise<[string]>;

    mintCNP(
      to: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mintCNP(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    prices(overrides?: CallOverrides): Promise<[string]>;

    "prices()"(overrides?: CallOverrides): Promise<[string]>;

    protocolDeployer(overrides?: CallOverrides): Promise<[string]>;

    "protocolDeployer()"(overrides?: CallOverrides): Promise<[string]>;

    protocolLock(overrides?: CallOverrides): Promise<[string]>;

    "protocolLock()"(overrides?: CallOverrides): Promise<[string]>;

    protocolPool(overrides?: CallOverrides): Promise<[string]>;

    "protocolPool()"(overrides?: CallOverrides): Promise<[string]>;

    rates(overrides?: CallOverrides): Promise<[string]>;

    "rates()"(overrides?: CallOverrides): Promise<[string]>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requireAccrueSystemInterestAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "requireAccrueSystemInterestAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    requireCoinMintingAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "requireCoinMintingAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    requireCoinReservesBurnAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "requireCoinReservesBurnAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    requireDebtWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "requireDebtWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    requireGenesisAuthenticated(
      caller: string,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<[boolean] & { isGenesis: boolean }>;

    "requireGenesisAuthenticated(address,(uint8,bytes32,bytes32))"(
      caller: string,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<[boolean] & { isGenesis: boolean }>;

    requireInstantPriceAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "requireInstantPriceAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    requirePositionWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "requirePositionWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    requireStoredCollateralAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "requireStoredCollateralAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    rewards(overrides?: CallOverrides): Promise<[string]>;

    "rewards()"(overrides?: CallOverrides): Promise<[string]>;

    settlement(overrides?: CallOverrides): Promise<[string]>;

    "settlement()"(overrides?: CallOverrides): Promise<[string]>;

    shutdownTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "shutdownTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    timelock(overrides?: CallOverrides): Promise<[string]>;

    "timelock()"(overrides?: CallOverrides): Promise<[string]>;

    upgradeAuctions(
      _auctions: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "upgradeAuctions(address)"(
      _auctions: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeLend(
      _lend: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "upgradeLend(address)"(
      _lend: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeLiquidations(
      _liquidations: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "upgradeLiquidations(address)"(
      _liquidations: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeMarket(
      _market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "upgradeMarket(address)"(
      _market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradePrices(
      _prices: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "upgradePrices(address)"(
      _prices: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeProtocol(
      newGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "upgradeProtocol(address)"(
      newGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeRates(
      _rates: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "upgradeRates(address)"(
      _rates: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeRewards(
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "upgradeRewards(address)"(
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeSettlement(
      _settlement: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "upgradeSettlement(address)"(
      _settlement: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accounting(overrides?: CallOverrides): Promise<string>;

  "accounting()"(overrides?: CallOverrides): Promise<string>;

  addReferencePool(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addReferencePool(address)"(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  auctions(overrides?: CallOverrides): Promise<string>;

  "auctions()"(overrides?: CallOverrides): Promise<string>;

  cnp(overrides?: CallOverrides): Promise<string>;

  "cnp()"(overrides?: CallOverrides): Promise<string>;

  coin(overrides?: CallOverrides): Promise<string>;

  "coin()"(overrides?: CallOverrides): Promise<string>;

  coinPositionNFT(overrides?: CallOverrides): Promise<string>;

  "coinPositionNFT()"(overrides?: CallOverrides): Promise<string>;

  collateralPool(overrides?: CallOverrides): Promise<string>;

  "collateralPool()"(overrides?: CallOverrides): Promise<string>;

  currentDailyRewardCount(overrides?: CallOverrides): Promise<BigNumber>;

  "currentDailyRewardCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  currentPhase(overrides?: CallOverrides): Promise<number>;

  "currentPhase()"(overrides?: CallOverrides): Promise<number>;

  distributeLiquidityRewards(
    to: string,
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "distributeLiquidityRewards(address,uint256)"(
    to: string,
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributedCNP(overrides?: CallOverrides): Promise<BigNumber>;

  "distributedCNP()"(overrides?: CallOverrides): Promise<BigNumber>;

  enforcedDecentralization(overrides?: CallOverrides): Promise<string>;

  "enforcedDecentralization()"(overrides?: CallOverrides): Promise<string>;

  execute(
    target: string,
    signature: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "execute(address,string,bytes)"(
    target: string,
    signature: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeShutdown(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "executeShutdown()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getReferencePools(overrides?: CallOverrides): Promise<string[]>;

  "getReferencePools()"(overrides?: CallOverrides): Promise<string[]>;

  isShutdown(overrides?: CallOverrides): Promise<boolean>;

  "isShutdown()"(overrides?: CallOverrides): Promise<boolean>;

  lend(overrides?: CallOverrides): Promise<string>;

  "lend()"(overrides?: CallOverrides): Promise<string>;

  lendCoin(overrides?: CallOverrides): Promise<string>;

  "lendCoin()"(overrides?: CallOverrides): Promise<string>;

  liquidations(overrides?: CallOverrides): Promise<string>;

  "liquidations()"(overrides?: CallOverrides): Promise<string>;

  market(overrides?: CallOverrides): Promise<string>;

  "market()"(overrides?: CallOverrides): Promise<string>;

  mintCNP(
    to: string,
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mintCNP(address,uint256)"(
    to: string,
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  prices(overrides?: CallOverrides): Promise<string>;

  "prices()"(overrides?: CallOverrides): Promise<string>;

  protocolDeployer(overrides?: CallOverrides): Promise<string>;

  "protocolDeployer()"(overrides?: CallOverrides): Promise<string>;

  protocolLock(overrides?: CallOverrides): Promise<string>;

  "protocolLock()"(overrides?: CallOverrides): Promise<string>;

  protocolPool(overrides?: CallOverrides): Promise<string>;

  "protocolPool()"(overrides?: CallOverrides): Promise<string>;

  rates(overrides?: CallOverrides): Promise<string>;

  "rates()"(overrides?: CallOverrides): Promise<string>;

  removeReferencePool(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeReferencePool(address)"(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requireAccrueSystemInterestAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "requireAccrueSystemInterestAccess(address)"(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requireCoinMintingAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "requireCoinMintingAccess(address)"(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requireCoinReservesBurnAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "requireCoinReservesBurnAccess(address)"(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requireDebtWriteAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "requireDebtWriteAccess(address)"(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requireGenesisAuthenticated(
    caller: string,
    ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
    overrides?: CallOverrides
  ): Promise<boolean>;

  "requireGenesisAuthenticated(address,(uint8,bytes32,bytes32))"(
    caller: string,
    ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
    overrides?: CallOverrides
  ): Promise<boolean>;

  requireInstantPriceAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "requireInstantPriceAccess(address)"(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requirePositionWriteAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "requirePositionWriteAccess(address)"(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requireStoredCollateralAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "requireStoredCollateralAccess(address)"(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  rewards(overrides?: CallOverrides): Promise<string>;

  "rewards()"(overrides?: CallOverrides): Promise<string>;

  settlement(overrides?: CallOverrides): Promise<string>;

  "settlement()"(overrides?: CallOverrides): Promise<string>;

  shutdownTime(overrides?: CallOverrides): Promise<BigNumber>;

  "shutdownTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  timelock(overrides?: CallOverrides): Promise<string>;

  "timelock()"(overrides?: CallOverrides): Promise<string>;

  upgradeAuctions(
    _auctions: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "upgradeAuctions(address)"(
    _auctions: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeLend(
    _lend: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "upgradeLend(address)"(
    _lend: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeLiquidations(
    _liquidations: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "upgradeLiquidations(address)"(
    _liquidations: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeMarket(
    _market: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "upgradeMarket(address)"(
    _market: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradePrices(
    _prices: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "upgradePrices(address)"(
    _prices: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeProtocol(
    newGovernor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "upgradeProtocol(address)"(
    newGovernor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeRates(
    _rates: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "upgradeRates(address)"(
    _rates: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeRewards(
    _rewards: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "upgradeRewards(address)"(
    _rewards: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeSettlement(
    _settlement: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "upgradeSettlement(address)"(
    _settlement: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accounting(overrides?: CallOverrides): Promise<string>;

    "accounting()"(overrides?: CallOverrides): Promise<string>;

    addReferencePool(pool: string, overrides?: CallOverrides): Promise<void>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    auctions(overrides?: CallOverrides): Promise<string>;

    "auctions()"(overrides?: CallOverrides): Promise<string>;

    cnp(overrides?: CallOverrides): Promise<string>;

    "cnp()"(overrides?: CallOverrides): Promise<string>;

    coin(overrides?: CallOverrides): Promise<string>;

    "coin()"(overrides?: CallOverrides): Promise<string>;

    coinPositionNFT(overrides?: CallOverrides): Promise<string>;

    "coinPositionNFT()"(overrides?: CallOverrides): Promise<string>;

    collateralPool(overrides?: CallOverrides): Promise<string>;

    "collateralPool()"(overrides?: CallOverrides): Promise<string>;

    currentDailyRewardCount(overrides?: CallOverrides): Promise<BigNumber>;

    "currentDailyRewardCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentPhase(overrides?: CallOverrides): Promise<number>;

    "currentPhase()"(overrides?: CallOverrides): Promise<number>;

    distributeLiquidityRewards(
      to: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "distributeLiquidityRewards(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    distributedCNP(overrides?: CallOverrides): Promise<BigNumber>;

    "distributedCNP()"(overrides?: CallOverrides): Promise<BigNumber>;

    enforcedDecentralization(overrides?: CallOverrides): Promise<string>;

    "enforcedDecentralization()"(overrides?: CallOverrides): Promise<string>;

    execute(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; returnData: string }>;

    "execute(address,string,bytes)"(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; returnData: string }>;

    executeShutdown(overrides?: CallOverrides): Promise<void>;

    "executeShutdown()"(overrides?: CallOverrides): Promise<void>;

    getReferencePools(overrides?: CallOverrides): Promise<string[]>;

    "getReferencePools()"(overrides?: CallOverrides): Promise<string[]>;

    isShutdown(overrides?: CallOverrides): Promise<boolean>;

    "isShutdown()"(overrides?: CallOverrides): Promise<boolean>;

    lend(overrides?: CallOverrides): Promise<string>;

    "lend()"(overrides?: CallOverrides): Promise<string>;

    lendCoin(overrides?: CallOverrides): Promise<string>;

    "lendCoin()"(overrides?: CallOverrides): Promise<string>;

    liquidations(overrides?: CallOverrides): Promise<string>;

    "liquidations()"(overrides?: CallOverrides): Promise<string>;

    market(overrides?: CallOverrides): Promise<string>;

    "market()"(overrides?: CallOverrides): Promise<string>;

    mintCNP(
      to: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintCNP(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    prices(overrides?: CallOverrides): Promise<string>;

    "prices()"(overrides?: CallOverrides): Promise<string>;

    protocolDeployer(overrides?: CallOverrides): Promise<string>;

    "protocolDeployer()"(overrides?: CallOverrides): Promise<string>;

    protocolLock(overrides?: CallOverrides): Promise<string>;

    "protocolLock()"(overrides?: CallOverrides): Promise<string>;

    protocolPool(overrides?: CallOverrides): Promise<string>;

    "protocolPool()"(overrides?: CallOverrides): Promise<string>;

    rates(overrides?: CallOverrides): Promise<string>;

    "rates()"(overrides?: CallOverrides): Promise<string>;

    removeReferencePool(pool: string, overrides?: CallOverrides): Promise<void>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireAccrueSystemInterestAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requireAccrueSystemInterestAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireCoinMintingAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requireCoinMintingAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireCoinReservesBurnAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requireCoinReservesBurnAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireDebtWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requireDebtWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireGenesisAuthenticated(
      caller: string,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<boolean>;

    "requireGenesisAuthenticated(address,(uint8,bytes32,bytes32))"(
      caller: string,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<boolean>;

    requireInstantPriceAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requireInstantPriceAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requirePositionWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requirePositionWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireStoredCollateralAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requireStoredCollateralAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewards(overrides?: CallOverrides): Promise<string>;

    "rewards()"(overrides?: CallOverrides): Promise<string>;

    settlement(overrides?: CallOverrides): Promise<string>;

    "settlement()"(overrides?: CallOverrides): Promise<string>;

    shutdownTime(overrides?: CallOverrides): Promise<BigNumber>;

    "shutdownTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<string>;

    "timelock()"(overrides?: CallOverrides): Promise<string>;

    upgradeAuctions(
      _auctions: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeAuctions(address)"(
      _auctions: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeLend(_lend: string, overrides?: CallOverrides): Promise<void>;

    "upgradeLend(address)"(
      _lend: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeLiquidations(
      _liquidations: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeLiquidations(address)"(
      _liquidations: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeMarket(_market: string, overrides?: CallOverrides): Promise<void>;

    "upgradeMarket(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradePrices(_prices: string, overrides?: CallOverrides): Promise<void>;

    "upgradePrices(address)"(
      _prices: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeProtocol(
      newGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeProtocol(address)"(
      newGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeRates(_rates: string, overrides?: CallOverrides): Promise<void>;

    "upgradeRates(address)"(
      _rates: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeRewards(_rewards: string, overrides?: CallOverrides): Promise<void>;

    "upgradeRewards(address)"(
      _rewards: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeSettlement(
      _settlement: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeSettlement(address)"(
      _settlement: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AdminUpdated(
      from: string | null,
      to: string | null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;

    ContractUpgraded(
      contractName: string | null,
      contractAddress: string | null
    ): TypedEventFilter<
      [string, string],
      { contractName: string; contractAddress: string }
    >;

    EmergencyShutdownExecuted(
      emergencyShutdownTokensBurned: null,
      shutdownTime: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { emergencyShutdownTokensBurned: BigNumber; shutdownTime: BigNumber }
    >;

    ProtocolUpgraded(
      newGovernor: string | null
    ): TypedEventFilter<[string], { newGovernor: string }>;

    ShutdownExecuted(): TypedEventFilter<[], {}>;

    ShutdownTokensLocked(
      locker: string | null,
      count: null
    ): TypedEventFilter<
      [string, BigNumber],
      { locker: string; count: BigNumber }
    >;

    ShutdownTokensUnlocked(
      locker: string | null,
      count: null
    ): TypedEventFilter<
      [string, BigNumber],
      { locker: string; count: BigNumber }
    >;
  };

  estimateGas: {
    accounting(overrides?: CallOverrides): Promise<BigNumber>;

    "accounting()"(overrides?: CallOverrides): Promise<BigNumber>;

    addReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    auctions(overrides?: CallOverrides): Promise<BigNumber>;

    "auctions()"(overrides?: CallOverrides): Promise<BigNumber>;

    cnp(overrides?: CallOverrides): Promise<BigNumber>;

    "cnp()"(overrides?: CallOverrides): Promise<BigNumber>;

    coin(overrides?: CallOverrides): Promise<BigNumber>;

    "coin()"(overrides?: CallOverrides): Promise<BigNumber>;

    coinPositionNFT(overrides?: CallOverrides): Promise<BigNumber>;

    "coinPositionNFT()"(overrides?: CallOverrides): Promise<BigNumber>;

    collateralPool(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentDailyRewardCount(overrides?: CallOverrides): Promise<BigNumber>;

    "currentDailyRewardCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentPhase(overrides?: CallOverrides): Promise<BigNumber>;

    "currentPhase()"(overrides?: CallOverrides): Promise<BigNumber>;

    distributeLiquidityRewards(
      to: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "distributeLiquidityRewards(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributedCNP(overrides?: CallOverrides): Promise<BigNumber>;

    "distributedCNP()"(overrides?: CallOverrides): Promise<BigNumber>;

    enforcedDecentralization(overrides?: CallOverrides): Promise<BigNumber>;

    "enforcedDecentralization()"(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "execute(address,string,bytes)"(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "executeShutdown()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getReferencePools(overrides?: CallOverrides): Promise<BigNumber>;

    "getReferencePools()"(overrides?: CallOverrides): Promise<BigNumber>;

    isShutdown(overrides?: CallOverrides): Promise<BigNumber>;

    "isShutdown()"(overrides?: CallOverrides): Promise<BigNumber>;

    lend(overrides?: CallOverrides): Promise<BigNumber>;

    "lend()"(overrides?: CallOverrides): Promise<BigNumber>;

    lendCoin(overrides?: CallOverrides): Promise<BigNumber>;

    "lendCoin()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidations(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidations()"(overrides?: CallOverrides): Promise<BigNumber>;

    market(overrides?: CallOverrides): Promise<BigNumber>;

    "market()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintCNP(
      to: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mintCNP(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    prices(overrides?: CallOverrides): Promise<BigNumber>;

    "prices()"(overrides?: CallOverrides): Promise<BigNumber>;

    protocolDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolDeployer()"(overrides?: CallOverrides): Promise<BigNumber>;

    protocolLock(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolLock()"(overrides?: CallOverrides): Promise<BigNumber>;

    protocolPool(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    rates(overrides?: CallOverrides): Promise<BigNumber>;

    "rates()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requireAccrueSystemInterestAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requireAccrueSystemInterestAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireCoinMintingAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requireCoinMintingAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireCoinReservesBurnAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requireCoinReservesBurnAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireDebtWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requireDebtWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireGenesisAuthenticated(
      caller: string,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requireGenesisAuthenticated(address,(uint8,bytes32,bytes32))"(
      caller: string,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireInstantPriceAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requireInstantPriceAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requirePositionWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requirePositionWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireStoredCollateralAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requireStoredCollateralAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewards(overrides?: CallOverrides): Promise<BigNumber>;

    "rewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    settlement(overrides?: CallOverrides): Promise<BigNumber>;

    "settlement()"(overrides?: CallOverrides): Promise<BigNumber>;

    shutdownTime(overrides?: CallOverrides): Promise<BigNumber>;

    "shutdownTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    "timelock()"(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeAuctions(
      _auctions: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "upgradeAuctions(address)"(
      _auctions: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeLend(
      _lend: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "upgradeLend(address)"(
      _lend: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeLiquidations(
      _liquidations: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "upgradeLiquidations(address)"(
      _liquidations: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeMarket(
      _market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "upgradeMarket(address)"(
      _market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradePrices(
      _prices: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "upgradePrices(address)"(
      _prices: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeProtocol(
      newGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "upgradeProtocol(address)"(
      newGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeRates(
      _rates: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "upgradeRates(address)"(
      _rates: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeRewards(
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "upgradeRewards(address)"(
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeSettlement(
      _settlement: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "upgradeSettlement(address)"(
      _settlement: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accounting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accounting()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    auctions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "auctions()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cnp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cnp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "coin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coinPositionNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "coinPositionNFT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "collateralPool()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentDailyRewardCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentDailyRewardCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPhase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentPhase()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributeLiquidityRewards(
      to: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "distributeLiquidityRewards(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributedCNP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "distributedCNP()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enforcedDecentralization(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "enforcedDecentralization()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execute(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "execute(address,string,bytes)"(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "executeShutdown()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getReferencePools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReferencePools()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isShutdown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isShutdown()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lend(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lend()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lendCoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lendCoin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidations()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    market(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "market()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintCNP(
      to: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mintCNP(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    prices(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "prices()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "protocolDeployer()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "protocolLock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "protocolPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rates()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requireAccrueSystemInterestAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireAccrueSystemInterestAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireCoinMintingAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireCoinMintingAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireCoinReservesBurnAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireCoinReservesBurnAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireDebtWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireDebtWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireGenesisAuthenticated(
      caller: string,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireGenesisAuthenticated(address,(uint8,bytes32,bytes32))"(
      caller: string,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireInstantPriceAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireInstantPriceAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requirePositionWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requirePositionWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireStoredCollateralAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireStoredCollateralAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewards()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    settlement(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "settlement()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shutdownTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "shutdownTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timelock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeAuctions(
      _auctions: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeAuctions(address)"(
      _auctions: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeLend(
      _lend: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeLend(address)"(
      _lend: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeLiquidations(
      _liquidations: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeLiquidations(address)"(
      _liquidations: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeMarket(
      _market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeMarket(address)"(
      _market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradePrices(
      _prices: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "upgradePrices(address)"(
      _prices: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeProtocol(
      newGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeProtocol(address)"(
      newGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeRates(
      _rates: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeRates(address)"(
      _rates: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeRewards(
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeRewards(address)"(
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeSettlement(
      _settlement: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeSettlement(address)"(
      _settlement: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
