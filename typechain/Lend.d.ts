/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LendInterface extends ethers.utils.Interface {
  functions: {
    "addReferencePool(address)": FunctionFragment;
    "completeSetup()": FunctionFragment;
    "countTokensAvailable(address)": FunctionFragment;
    "currentToken(address)": FunctionFragment;
    "deployer()": FunctionFragment;
    "governor()": FunctionFragment;
    "init(address)": FunctionFragment;
    "lend(uint256)": FunctionFragment;
    "maxRatioOfTotalDebtAllowed()": FunctionFragment;
    "mintCoin(address,uint256)": FunctionFragment;
    "removeReferencePool(address)": FunctionFragment;
    "returnCoin(address,uint256)": FunctionFragment;
    "setMaxRatioOfTotalDebtAllowed(uint256)": FunctionFragment;
    "stop()": FunctionFragment;
    "stopped()": FunctionFragment;
    "unlend(uint256)": FunctionFragment;
    "validToken(address)": FunctionFragment;
    "validUpdate(bytes4)": FunctionFragment;
    "valueOfLendTokensInCoin(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addReferencePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "completeSetup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countTokensAvailable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "currentToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(functionFragment: "lend", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "maxRatioOfTotalDebtAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintCoin",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeReferencePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "returnCoin",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxRatioOfTotalDebtAllowed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unlend",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "validToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "validUpdate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "valueOfLendTokensInCoin",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addReferencePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countTokensAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxRatioOfTotalDebtAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintCoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeReferencePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "returnCoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxRatioOfTotalDebtAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "validToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueOfLendTokensInCoin",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(address)": EventFragment;
    "Lend(address,uint256,uint256)": EventFragment;
    "MintCoin(address,address,uint256)": EventFragment;
    "OneToOneMintingDisabled()": EventFragment;
    "ParameterUpdated(string,uint256)": EventFragment;
    "ParameterUpdatedAddress(string,address)": EventFragment;
    "ReturnCoin(address,address,uint256)": EventFragment;
    "Stopped()": EventFragment;
    "Unlend(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Lend"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintCoin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OneToOneMintingDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdatedAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReturnCoin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stopped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unlend"): EventFragment;
}

export class Lend extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LendInterface;

  functions: {
    addReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeSetup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "completeSetup()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    countTokensAvailable(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    "countTokensAvailable(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    currentToken(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "currentToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    "deployer()"(overrides?: CallOverrides): Promise<[string]>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    "governor()"(overrides?: CallOverrides): Promise<[string]>;

    init(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lend(
      coinCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lend(uint256)"(
      coinCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxRatioOfTotalDebtAllowed(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxRatioOfTotalDebtAllowed()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mintCoin(
      tokenToDeposit: string,
      coinToMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mintCoin(address,uint256)"(
      tokenToDeposit: string,
      coinToMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    returnCoin(
      tokenToRecieve: string,
      coinToReturn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "returnCoin(address,uint256)"(
      tokenToRecieve: string,
      coinToReturn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxRatioOfTotalDebtAllowed(
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMaxRatioOfTotalDebtAllowed(uint256)"(
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stop()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopped(overrides?: CallOverrides): Promise<[boolean]>;

    "stopped()"(overrides?: CallOverrides): Promise<[boolean]>;

    unlend(
      lendTokenCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unlend(uint256)"(
      lendTokenCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validToken(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "validToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    valueOfLendTokensInCoin(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { coinCount: BigNumber }>;

    "valueOfLendTokensInCoin(uint256)"(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { coinCount: BigNumber }>;
  };

  addReferencePool(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addReferencePool(address)"(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeSetup(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "completeSetup()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  countTokensAvailable(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "countTokensAvailable(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "currentToken(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deployer(overrides?: CallOverrides): Promise<string>;

  "deployer()"(overrides?: CallOverrides): Promise<string>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  init(
    _governor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "init(address)"(
    _governor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lend(
    coinCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lend(uint256)"(
    coinCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxRatioOfTotalDebtAllowed(overrides?: CallOverrides): Promise<BigNumber>;

  "maxRatioOfTotalDebtAllowed()"(overrides?: CallOverrides): Promise<BigNumber>;

  mintCoin(
    tokenToDeposit: string,
    coinToMint: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mintCoin(address,uint256)"(
    tokenToDeposit: string,
    coinToMint: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeReferencePool(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeReferencePool(address)"(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  returnCoin(
    tokenToRecieve: string,
    coinToReturn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "returnCoin(address,uint256)"(
    tokenToRecieve: string,
    coinToReturn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxRatioOfTotalDebtAllowed(
    ratio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMaxRatioOfTotalDebtAllowed(uint256)"(
    ratio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stop(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stop()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopped(overrides?: CallOverrides): Promise<boolean>;

  "stopped()"(overrides?: CallOverrides): Promise<boolean>;

  unlend(
    lendTokenCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unlend(uint256)"(
    lendTokenCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "validToken(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "validUpdate(bytes4)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  valueOfLendTokensInCoin(
    lendTokenCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "valueOfLendTokensInCoin(uint256)"(
    lendTokenCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addReferencePool(pool: string, overrides?: CallOverrides): Promise<void>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    completeSetup(overrides?: CallOverrides): Promise<void>;

    "completeSetup()"(overrides?: CallOverrides): Promise<void>;

    countTokensAvailable(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countTokensAvailable(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "currentToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deployer(overrides?: CallOverrides): Promise<string>;

    "deployer()"(overrides?: CallOverrides): Promise<string>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    init(_governor: string, overrides?: CallOverrides): Promise<void>;

    "init(address)"(
      _governor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lend(coinCount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "lend(uint256)"(
      coinCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    maxRatioOfTotalDebtAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    "maxRatioOfTotalDebtAllowed()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintCoin(
      tokenToDeposit: string,
      coinToMint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintCoin(address,uint256)"(
      tokenToDeposit: string,
      coinToMint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeReferencePool(pool: string, overrides?: CallOverrides): Promise<void>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    returnCoin(
      tokenToRecieve: string,
      coinToReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "returnCoin(address,uint256)"(
      tokenToRecieve: string,
      coinToReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxRatioOfTotalDebtAllowed(
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxRatioOfTotalDebtAllowed(uint256)"(
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stop(overrides?: CallOverrides): Promise<void>;

    "stop()"(overrides?: CallOverrides): Promise<void>;

    stopped(overrides?: CallOverrides): Promise<boolean>;

    "stopped()"(overrides?: CallOverrides): Promise<boolean>;

    unlend(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unlend(uint256)"(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    validToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "validToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    valueOfLendTokensInCoin(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "valueOfLendTokensInCoin(uint256)"(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Initialized(
      governor: string | null
    ): TypedEventFilter<[string], { governor: string }>;

    Lend(
      account: string | null,
      coinCount: null,
      lendTokenCount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; coinCount: BigNumber; lendTokenCount: BigNumber }
    >;

    MintCoin(
      user: string | null,
      token: string | null,
      count: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; token: string; count: BigNumber }
    >;

    OneToOneMintingDisabled(): TypedEventFilter<[], {}>;

    ParameterUpdated(
      paramName: string | null,
      value: null
    ): TypedEventFilter<
      [string, BigNumber],
      { paramName: string; value: BigNumber }
    >;

    ParameterUpdatedAddress(
      paramName: string | null,
      value: string | null
    ): TypedEventFilter<[string, string], { paramName: string; value: string }>;

    ReturnCoin(
      user: string | null,
      token: string | null,
      count: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; token: string; count: BigNumber }
    >;

    Stopped(): TypedEventFilter<[], {}>;

    Unlend(
      account: string | null,
      coinCount: null,
      lendTokenCount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; coinCount: BigNumber; lendTokenCount: BigNumber }
    >;
  };

  estimateGas: {
    addReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeSetup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "completeSetup()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    countTokensAvailable(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countTokensAvailable(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "currentToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    "deployer()"(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lend(
      coinCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lend(uint256)"(
      coinCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxRatioOfTotalDebtAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    "maxRatioOfTotalDebtAllowed()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintCoin(
      tokenToDeposit: string,
      coinToMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mintCoin(address,uint256)"(
      tokenToDeposit: string,
      coinToMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    returnCoin(
      tokenToRecieve: string,
      coinToReturn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "returnCoin(address,uint256)"(
      tokenToRecieve: string,
      coinToReturn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxRatioOfTotalDebtAllowed(
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMaxRatioOfTotalDebtAllowed(uint256)"(
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stop()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    "stopped()"(overrides?: CallOverrides): Promise<BigNumber>;

    unlend(
      lendTokenCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unlend(uint256)"(
      lendTokenCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "validToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueOfLendTokensInCoin(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "valueOfLendTokensInCoin(uint256)"(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeSetup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "completeSetup()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    countTokensAvailable(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "countTokensAvailable(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deployer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lend(
      coinCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lend(uint256)"(
      coinCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxRatioOfTotalDebtAllowed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxRatioOfTotalDebtAllowed()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintCoin(
      tokenToDeposit: string,
      coinToMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mintCoin(address,uint256)"(
      tokenToDeposit: string,
      coinToMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    returnCoin(
      tokenToRecieve: string,
      coinToReturn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "returnCoin(address,uint256)"(
      tokenToRecieve: string,
      coinToReturn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxRatioOfTotalDebtAllowed(
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMaxRatioOfTotalDebtAllowed(uint256)"(
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stop()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stopped()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlend(
      lendTokenCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unlend(uint256)"(
      lendTokenCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validUpdate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valueOfLendTokensInCoin(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "valueOfLendTokensInCoin(uint256)"(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
