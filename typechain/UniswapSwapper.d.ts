/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface UniswapSwapperInterface extends ethers.utils.Interface {
  functions: {
    "doSwap(bool,int256,uint160)": FunctionFragment;
    "setPool(address)": FunctionFragment;
    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "doSwap",
    values: [boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "doSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapCallback",
    data: BytesLike
  ): Result;

  events: {};
}

export class UniswapSwapper extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: UniswapSwapperInterface;

  functions: {
    doSwap(
      _zeroForOne: boolean,
      _amountSpecified: BigNumberish,
      _sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "doSwap(bool,int256,uint160)"(
      _zeroForOne: boolean,
      _amountSpecified: BigNumberish,
      _sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPool(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "uniswapV3SwapCallback(int256,int256,bytes)"(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  doSwap(
    _zeroForOne: boolean,
    _amountSpecified: BigNumberish,
    _sqrtPriceLimitX96: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "doSwap(bool,int256,uint160)"(
    _zeroForOne: boolean,
    _amountSpecified: BigNumberish,
    _sqrtPriceLimitX96: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPool(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPool(address)"(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV3SwapCallback(
    amount0Delta: BigNumberish,
    amount1Delta: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "uniswapV3SwapCallback(int256,int256,bytes)"(
    amount0Delta: BigNumberish,
    amount1Delta: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    doSwap(
      _zeroForOne: boolean,
      _amountSpecified: BigNumberish,
      _sqrtPriceLimitX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
          liq: BigNumber;
          feeGrowthGlobal0X128: BigNumber;
          feeGrowthGlobal1X128: BigNumber;
          bal0: BigNumber;
          bal1: BigNumber;
          tick: number;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
          liq: BigNumber;
          feeGrowthGlobal0X128: BigNumber;
          feeGrowthGlobal1X128: BigNumber;
          bal0: BigNumber;
          bal1: BigNumber;
          tick: number;
        }
      ] & {
        bfre: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          liq: BigNumber;
          feeGrowthGlobal0X128: BigNumber;
          feeGrowthGlobal1X128: BigNumber;
          bal0: BigNumber;
          bal1: BigNumber;
          tick: number;
        };
        aftr: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          liq: BigNumber;
          feeGrowthGlobal0X128: BigNumber;
          feeGrowthGlobal1X128: BigNumber;
          bal0: BigNumber;
          bal1: BigNumber;
          tick: number;
        };
      }
    >;

    "doSwap(bool,int256,uint160)"(
      _zeroForOne: boolean,
      _amountSpecified: BigNumberish,
      _sqrtPriceLimitX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
          liq: BigNumber;
          feeGrowthGlobal0X128: BigNumber;
          feeGrowthGlobal1X128: BigNumber;
          bal0: BigNumber;
          bal1: BigNumber;
          tick: number;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
          liq: BigNumber;
          feeGrowthGlobal0X128: BigNumber;
          feeGrowthGlobal1X128: BigNumber;
          bal0: BigNumber;
          bal1: BigNumber;
          tick: number;
        }
      ] & {
        bfre: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          liq: BigNumber;
          feeGrowthGlobal0X128: BigNumber;
          feeGrowthGlobal1X128: BigNumber;
          bal0: BigNumber;
          bal1: BigNumber;
          tick: number;
        };
        aftr: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          liq: BigNumber;
          feeGrowthGlobal0X128: BigNumber;
          feeGrowthGlobal1X128: BigNumber;
          bal0: BigNumber;
          bal1: BigNumber;
          tick: number;
        };
      }
    >;

    setPool(_pool: string, overrides?: CallOverrides): Promise<void>;

    "setPool(address)"(_pool: string, overrides?: CallOverrides): Promise<void>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "uniswapV3SwapCallback(int256,int256,bytes)"(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    doSwap(
      _zeroForOne: boolean,
      _amountSpecified: BigNumberish,
      _sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "doSwap(bool,int256,uint160)"(
      _zeroForOne: boolean,
      _amountSpecified: BigNumberish,
      _sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPool(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "uniswapV3SwapCallback(int256,int256,bytes)"(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    doSwap(
      _zeroForOne: boolean,
      _amountSpecified: BigNumberish,
      _sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "doSwap(bool,int256,uint160)"(
      _zeroForOne: boolean,
      _amountSpecified: BigNumberish,
      _sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPool(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "uniswapV3SwapCallback(int256,int256,bytes)"(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
