/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RatesInterface extends ethers.utils.Interface {
  functions: {
    "calculatePrice(uint256,uint256,uint256)": FunctionFragment;
    "completeSetup()": FunctionFragment;
    "deployer()": FunctionFragment;
    "getRewardCount()": FunctionFragment;
    "governor()": FunctionFragment;
    "init(address)": FunctionFragment;
    "interestRateAbsoluteValue()": FunctionFragment;
    "maxPriceAge()": FunctionFragment;
    "maxSteps()": FunctionFragment;
    "maxTwapTime()": FunctionFragment;
    "minTimeBetweenUpdates()": FunctionFragment;
    "pairs(uint256)": FunctionFragment;
    "positiveInterestRate()": FunctionFragment;
    "rateConfig()": FunctionFragment;
    "setAcceptableError(uint128)": FunctionFragment;
    "setErrorInterval(uint128)": FunctionFragment;
    "setInterestRateStep(uint128)": FunctionFragment;
    "setMaxPriceAge(uint64)": FunctionFragment;
    "setMaxSteps(uint64)": FunctionFragment;
    "setMaxTwapTime(uint64)": FunctionFragment;
    "setMinRate(int128)": FunctionFragment;
    "setMinTimeBetweenUpdates(uint64)": FunctionFragment;
    "setValidRangeForRawPrices(uint128)": FunctionFragment;
    "stepsOff()": FunctionFragment;
    "stop()": FunctionFragment;
    "stopped()": FunctionFragment;
    "storedRateData()": FunctionFragment;
    "update()": FunctionFragment;
    "validRangeForRawPrices()": FunctionFragment;
    "validUpdate(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculatePrice",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeSetup",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRewardCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "interestRateAbsoluteValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPriceAge",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxSteps", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxTwapTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minTimeBetweenUpdates",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pairs", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "positiveInterestRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rateConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAcceptableError",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setErrorInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestRateStep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPriceAge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSteps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTwapTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinTimeBetweenUpdates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidRangeForRawPrices",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stepsOff", values?: undefined): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "storedRateData",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "update", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validRangeForRawPrices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validUpdate",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestRateAbsoluteValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPriceAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxSteps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxTwapTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minTimeBetweenUpdates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "positiveInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rateConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAcceptableError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setErrorInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestRateStep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPriceAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSteps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTwapTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinTimeBetweenUpdates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidRangeForRawPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stepsOff", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storedRateData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validRangeForRawPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validUpdate",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(address)": EventFragment;
    "ParameterUpdated128(string,uint128)": EventFragment;
    "ParameterUpdated64(string,uint64)": EventFragment;
    "ParameterUpdatedInt128(string,int128)": EventFragment;
    "RateUpdated(int256,uint256,uint256,uint64)": EventFragment;
    "Stopped()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated128"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated64"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdatedInt128"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stopped"): EventFragment;
}

export class Rates extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RatesInterface;

  functions: {
    calculatePrice(
      price0: BigNumberish,
      price1: BigNumberish,
      price2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    "calculatePrice(uint256,uint256,uint256)"(
      price0: BigNumberish,
      price1: BigNumberish,
      price2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    completeSetup(overrides?: Overrides): Promise<ContractTransaction>;

    "completeSetup()"(overrides?: Overrides): Promise<ContractTransaction>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    "deployer()"(overrides?: CallOverrides): Promise<[string]>;

    getRewardCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { newRewardCount: BigNumber }>;

    "getRewardCount()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { newRewardCount: BigNumber }>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    "governor()"(overrides?: CallOverrides): Promise<[string]>;

    init(
      _governor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    interestRateAbsoluteValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "interestRateAbsoluteValue()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxPriceAge(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxPriceAge()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxSteps(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxSteps()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTwapTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxTwapTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minTimeBetweenUpdates(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minTimeBetweenUpdates()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    pairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "pairs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    positiveInterestRate(overrides?: CallOverrides): Promise<[boolean]>;

    "positiveInterestRate()"(overrides?: CallOverrides): Promise<[boolean]>;

    rateConfig(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        acceptableError: BigNumber;
        errorInterval: BigNumber;
        interestRateStep: BigNumber;
        maxSteps: BigNumber;
        minRate: BigNumber;
      }
    >;

    "rateConfig()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        acceptableError: BigNumber;
        errorInterval: BigNumber;
        interestRateStep: BigNumber;
        maxSteps: BigNumber;
        minRate: BigNumber;
      }
    >;

    setAcceptableError(
      error: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAcceptableError(uint128)"(
      error: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setErrorInterval(
      interval: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setErrorInterval(uint128)"(
      interval: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setInterestRateStep(
      step: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setInterestRateStep(uint128)"(
      step: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxPriceAge(
      age: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxPriceAge(uint64)"(
      age: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxSteps(
      steps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxSteps(uint64)"(
      steps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxTwapTime(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxTwapTime(uint64)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinRate(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinRate(int128)"(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinTimeBetweenUpdates(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinTimeBetweenUpdates(uint64)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setValidRangeForRawPrices(
      range: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setValidRangeForRawPrices(uint128)"(
      range: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stepsOff(overrides?: CallOverrides): Promise<[BigNumber]>;

    "stepsOff()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    stop(overrides?: Overrides): Promise<ContractTransaction>;

    "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

    stopped(overrides?: CallOverrides): Promise<[boolean]>;

    "stopped()"(overrides?: CallOverrides): Promise<[boolean]>;

    storedRateData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        rate: BigNumber;
        stepsOff: BigNumber;
        nextUpdateTime: BigNumber;
        rewardCount: BigNumber;
      }
    >;

    "storedRateData()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        rate: BigNumber;
        stepsOff: BigNumber;
        nextUpdateTime: BigNumber;
        rewardCount: BigNumber;
      }
    >;

    update(overrides?: Overrides): Promise<ContractTransaction>;

    "update()"(overrides?: Overrides): Promise<ContractTransaction>;

    validRangeForRawPrices(overrides?: CallOverrides): Promise<[BigNumber]>;

    "validRangeForRawPrices()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    validUpdate(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "validUpdate(bytes4)"(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  calculatePrice(
    price0: BigNumberish,
    price1: BigNumberish,
    price2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculatePrice(uint256,uint256,uint256)"(
    price0: BigNumberish,
    price1: BigNumberish,
    price2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  completeSetup(overrides?: Overrides): Promise<ContractTransaction>;

  "completeSetup()"(overrides?: Overrides): Promise<ContractTransaction>;

  deployer(overrides?: CallOverrides): Promise<string>;

  "deployer()"(overrides?: CallOverrides): Promise<string>;

  getRewardCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getRewardCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  init(_governor: string, overrides?: Overrides): Promise<ContractTransaction>;

  "init(address)"(
    _governor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  interestRateAbsoluteValue(overrides?: CallOverrides): Promise<BigNumber>;

  "interestRateAbsoluteValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxPriceAge(overrides?: CallOverrides): Promise<BigNumber>;

  "maxPriceAge()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxSteps(overrides?: CallOverrides): Promise<BigNumber>;

  "maxSteps()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxTwapTime(overrides?: CallOverrides): Promise<BigNumber>;

  "maxTwapTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  minTimeBetweenUpdates(overrides?: CallOverrides): Promise<BigNumber>;

  "minTimeBetweenUpdates()"(overrides?: CallOverrides): Promise<BigNumber>;

  pairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "pairs(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  positiveInterestRate(overrides?: CallOverrides): Promise<boolean>;

  "positiveInterestRate()"(overrides?: CallOverrides): Promise<boolean>;

  rateConfig(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      acceptableError: BigNumber;
      errorInterval: BigNumber;
      interestRateStep: BigNumber;
      maxSteps: BigNumber;
      minRate: BigNumber;
    }
  >;

  "rateConfig()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      acceptableError: BigNumber;
      errorInterval: BigNumber;
      interestRateStep: BigNumber;
      maxSteps: BigNumber;
      minRate: BigNumber;
    }
  >;

  setAcceptableError(
    error: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAcceptableError(uint128)"(
    error: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setErrorInterval(
    interval: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setErrorInterval(uint128)"(
    interval: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setInterestRateStep(
    step: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setInterestRateStep(uint128)"(
    step: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxPriceAge(
    age: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxPriceAge(uint64)"(
    age: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxSteps(
    steps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxSteps(uint64)"(
    steps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxTwapTime(
    time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxTwapTime(uint64)"(
    time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinRate(
    min: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinRate(int128)"(
    min: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinTimeBetweenUpdates(
    time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinTimeBetweenUpdates(uint64)"(
    time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setValidRangeForRawPrices(
    range: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setValidRangeForRawPrices(uint128)"(
    range: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stepsOff(overrides?: CallOverrides): Promise<BigNumber>;

  "stepsOff()"(overrides?: CallOverrides): Promise<BigNumber>;

  stop(overrides?: Overrides): Promise<ContractTransaction>;

  "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

  stopped(overrides?: CallOverrides): Promise<boolean>;

  "stopped()"(overrides?: CallOverrides): Promise<boolean>;

  storedRateData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      rate: BigNumber;
      stepsOff: BigNumber;
      nextUpdateTime: BigNumber;
      rewardCount: BigNumber;
    }
  >;

  "storedRateData()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      rate: BigNumber;
      stepsOff: BigNumber;
      nextUpdateTime: BigNumber;
      rewardCount: BigNumber;
    }
  >;

  update(overrides?: Overrides): Promise<ContractTransaction>;

  "update()"(overrides?: Overrides): Promise<ContractTransaction>;

  validRangeForRawPrices(overrides?: CallOverrides): Promise<BigNumber>;

  "validRangeForRawPrices()"(overrides?: CallOverrides): Promise<BigNumber>;

  validUpdate(action: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "validUpdate(bytes4)"(
    action: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    calculatePrice(
      price0: BigNumberish,
      price1: BigNumberish,
      price2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculatePrice(uint256,uint256,uint256)"(
      price0: BigNumberish,
      price1: BigNumberish,
      price2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeSetup(overrides?: CallOverrides): Promise<void>;

    "completeSetup()"(overrides?: CallOverrides): Promise<void>;

    deployer(overrides?: CallOverrides): Promise<string>;

    "deployer()"(overrides?: CallOverrides): Promise<string>;

    getRewardCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getRewardCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    init(_governor: string, overrides?: CallOverrides): Promise<void>;

    "init(address)"(
      _governor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    interestRateAbsoluteValue(overrides?: CallOverrides): Promise<BigNumber>;

    "interestRateAbsoluteValue()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPriceAge(overrides?: CallOverrides): Promise<BigNumber>;

    "maxPriceAge()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxSteps(overrides?: CallOverrides): Promise<BigNumber>;

    "maxSteps()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxTwapTime(overrides?: CallOverrides): Promise<BigNumber>;

    "maxTwapTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    minTimeBetweenUpdates(overrides?: CallOverrides): Promise<BigNumber>;

    "minTimeBetweenUpdates()"(overrides?: CallOverrides): Promise<BigNumber>;

    pairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "pairs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    positiveInterestRate(overrides?: CallOverrides): Promise<boolean>;

    "positiveInterestRate()"(overrides?: CallOverrides): Promise<boolean>;

    rateConfig(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        acceptableError: BigNumber;
        errorInterval: BigNumber;
        interestRateStep: BigNumber;
        maxSteps: BigNumber;
        minRate: BigNumber;
      }
    >;

    "rateConfig()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        acceptableError: BigNumber;
        errorInterval: BigNumber;
        interestRateStep: BigNumber;
        maxSteps: BigNumber;
        minRate: BigNumber;
      }
    >;

    setAcceptableError(
      error: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAcceptableError(uint128)"(
      error: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setErrorInterval(
      interval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setErrorInterval(uint128)"(
      interval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterestRateStep(
      step: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInterestRateStep(uint128)"(
      step: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPriceAge(age: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setMaxPriceAge(uint64)"(
      age: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSteps(steps: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setMaxSteps(uint64)"(
      steps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTwapTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxTwapTime(uint64)"(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinRate(min: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setMinRate(int128)"(
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinTimeBetweenUpdates(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinTimeBetweenUpdates(uint64)"(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidRangeForRawPrices(
      range: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setValidRangeForRawPrices(uint128)"(
      range: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stepsOff(overrides?: CallOverrides): Promise<BigNumber>;

    "stepsOff()"(overrides?: CallOverrides): Promise<BigNumber>;

    stop(overrides?: CallOverrides): Promise<void>;

    "stop()"(overrides?: CallOverrides): Promise<void>;

    stopped(overrides?: CallOverrides): Promise<boolean>;

    "stopped()"(overrides?: CallOverrides): Promise<boolean>;

    storedRateData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        rate: BigNumber;
        stepsOff: BigNumber;
        nextUpdateTime: BigNumber;
        rewardCount: BigNumber;
      }
    >;

    "storedRateData()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        rate: BigNumber;
        stepsOff: BigNumber;
        nextUpdateTime: BigNumber;
        rewardCount: BigNumber;
      }
    >;

    update(overrides?: CallOverrides): Promise<void>;

    "update()"(overrides?: CallOverrides): Promise<void>;

    validRangeForRawPrices(overrides?: CallOverrides): Promise<BigNumber>;

    "validRangeForRawPrices()"(overrides?: CallOverrides): Promise<BigNumber>;

    validUpdate(action: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "validUpdate(bytes4)"(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Initialized(governor: string | null): EventFilter;

    ParameterUpdated128(paramName: string | null, value: null): EventFilter;

    ParameterUpdated64(paramName: string | null, value: null): EventFilter;

    ParameterUpdatedInt128(paramName: string | null, value: null): EventFilter;

    RateUpdated(
      interestRate: null,
      price: null,
      rewardCount: null,
      nextUpdateTime: null
    ): EventFilter;

    Stopped(): EventFilter;
  };

  estimateGas: {
    calculatePrice(
      price0: BigNumberish,
      price1: BigNumberish,
      price2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculatePrice(uint256,uint256,uint256)"(
      price0: BigNumberish,
      price1: BigNumberish,
      price2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeSetup(overrides?: Overrides): Promise<BigNumber>;

    "completeSetup()"(overrides?: Overrides): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    "deployer()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getRewardCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    init(_governor: string, overrides?: Overrides): Promise<BigNumber>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    interestRateAbsoluteValue(overrides?: CallOverrides): Promise<BigNumber>;

    "interestRateAbsoluteValue()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPriceAge(overrides?: CallOverrides): Promise<BigNumber>;

    "maxPriceAge()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxSteps(overrides?: CallOverrides): Promise<BigNumber>;

    "maxSteps()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxTwapTime(overrides?: CallOverrides): Promise<BigNumber>;

    "maxTwapTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    minTimeBetweenUpdates(overrides?: CallOverrides): Promise<BigNumber>;

    "minTimeBetweenUpdates()"(overrides?: CallOverrides): Promise<BigNumber>;

    pairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "pairs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positiveInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

    "positiveInterestRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    rateConfig(overrides?: CallOverrides): Promise<BigNumber>;

    "rateConfig()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAcceptableError(
      error: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAcceptableError(uint128)"(
      error: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setErrorInterval(
      interval: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setErrorInterval(uint128)"(
      interval: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setInterestRateStep(
      step: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setInterestRateStep(uint128)"(
      step: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxPriceAge(
      age: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxPriceAge(uint64)"(
      age: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxSteps(steps: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setMaxSteps(uint64)"(
      steps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxTwapTime(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxTwapTime(uint64)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinRate(min: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setMinRate(int128)"(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinTimeBetweenUpdates(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinTimeBetweenUpdates(uint64)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setValidRangeForRawPrices(
      range: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setValidRangeForRawPrices(uint128)"(
      range: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stepsOff(overrides?: CallOverrides): Promise<BigNumber>;

    "stepsOff()"(overrides?: CallOverrides): Promise<BigNumber>;

    stop(overrides?: Overrides): Promise<BigNumber>;

    "stop()"(overrides?: Overrides): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    "stopped()"(overrides?: CallOverrides): Promise<BigNumber>;

    storedRateData(overrides?: CallOverrides): Promise<BigNumber>;

    "storedRateData()"(overrides?: CallOverrides): Promise<BigNumber>;

    update(overrides?: Overrides): Promise<BigNumber>;

    "update()"(overrides?: Overrides): Promise<BigNumber>;

    validRangeForRawPrices(overrides?: CallOverrides): Promise<BigNumber>;

    "validRangeForRawPrices()"(overrides?: CallOverrides): Promise<BigNumber>;

    validUpdate(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validUpdate(bytes4)"(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculatePrice(
      price0: BigNumberish,
      price1: BigNumberish,
      price2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculatePrice(uint256,uint256,uint256)"(
      price0: BigNumberish,
      price1: BigNumberish,
      price2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeSetup(overrides?: Overrides): Promise<PopulatedTransaction>;

    "completeSetup()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deployer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRewardCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      _governor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    interestRateAbsoluteValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "interestRateAbsoluteValue()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPriceAge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxPriceAge()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSteps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxSteps()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTwapTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxTwapTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minTimeBetweenUpdates(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minTimeBetweenUpdates()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pairs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positiveInterestRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "positiveInterestRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rateConfig()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAcceptableError(
      error: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAcceptableError(uint128)"(
      error: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setErrorInterval(
      interval: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setErrorInterval(uint128)"(
      interval: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setInterestRateStep(
      step: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setInterestRateStep(uint128)"(
      step: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxPriceAge(
      age: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxPriceAge(uint64)"(
      age: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxSteps(
      steps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxSteps(uint64)"(
      steps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxTwapTime(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxTwapTime(uint64)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinRate(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinRate(int128)"(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinTimeBetweenUpdates(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinTimeBetweenUpdates(uint64)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setValidRangeForRawPrices(
      range: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setValidRangeForRawPrices(uint128)"(
      range: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stepsOff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stepsOff()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stop(overrides?: Overrides): Promise<PopulatedTransaction>;

    "stop()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stopped()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    storedRateData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "storedRateData()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    update(overrides?: Overrides): Promise<PopulatedTransaction>;

    "update()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    validRangeForRawPrices(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validRangeForRawPrices()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validUpdate(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validUpdate(bytes4)"(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
