/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IPricesInterface extends ethers.utils.Interface {
  functions: {
    "completeSetup()": FunctionFragment;
    "obtainPrice(address,uint64,uint64,bool)": FunctionFragment;
    "referencePairMinTwapTime()": FunctionFragment;
    "stop()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "completeSetup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "obtainPrice",
    values: [string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "referencePairMinTwapTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "completeSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "obtainPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referencePairMinTwapTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;

  events: {
    "ParameterUpdated64(string,uint64)": EventFragment;
    "PriceUpdated(address,uint256,uint256,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ParameterUpdated64"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdated"): EventFragment;
}

export class IPrices extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IPricesInterface;

  functions: {
    completeSetup(overrides?: Overrides): Promise<ContractTransaction>;

    "completeSetup()"(overrides?: Overrides): Promise<ContractTransaction>;

    obtainPrice(
      pair: string,
      maxTwapTime: BigNumberish,
      maxAge: BigNumberish,
      normalizePrice: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "obtainPrice(address,uint64,uint64,bool)"(
      pair: string,
      maxTwapTime: BigNumberish,
      maxAge: BigNumberish,
      normalizePrice: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    referencePairMinTwapTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "referencePairMinTwapTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    stop(overrides?: Overrides): Promise<ContractTransaction>;

    "stop()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  completeSetup(overrides?: Overrides): Promise<ContractTransaction>;

  "completeSetup()"(overrides?: Overrides): Promise<ContractTransaction>;

  obtainPrice(
    pair: string,
    maxTwapTime: BigNumberish,
    maxAge: BigNumberish,
    normalizePrice: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "obtainPrice(address,uint64,uint64,bool)"(
    pair: string,
    maxTwapTime: BigNumberish,
    maxAge: BigNumberish,
    normalizePrice: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  referencePairMinTwapTime(overrides?: CallOverrides): Promise<BigNumber>;

  "referencePairMinTwapTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  stop(overrides?: Overrides): Promise<ContractTransaction>;

  "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    completeSetup(overrides?: CallOverrides): Promise<void>;

    "completeSetup()"(overrides?: CallOverrides): Promise<void>;

    obtainPrice(
      pair: string,
      maxTwapTime: BigNumberish,
      maxAge: BigNumberish,
      normalizePrice: boolean,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      priceTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "obtainPrice(address,uint64,uint64,bool)"(
      pair: string,
      maxTwapTime: BigNumberish,
      maxAge: BigNumberish,
      normalizePrice: boolean,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      priceTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    referencePairMinTwapTime(overrides?: CallOverrides): Promise<BigNumber>;

    "referencePairMinTwapTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    stop(overrides?: CallOverrides): Promise<void>;

    "stop()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    ParameterUpdated64(paramName: string | null, value: null): EventFilter;

    PriceUpdated(
      pair: string | null,
      price: null,
      cumulative: null,
      twapTime: null
    ): EventFilter;
  };

  estimateGas: {
    completeSetup(overrides?: Overrides): Promise<BigNumber>;

    "completeSetup()"(overrides?: Overrides): Promise<BigNumber>;

    obtainPrice(
      pair: string,
      maxTwapTime: BigNumberish,
      maxAge: BigNumberish,
      normalizePrice: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "obtainPrice(address,uint64,uint64,bool)"(
      pair: string,
      maxTwapTime: BigNumberish,
      maxAge: BigNumberish,
      normalizePrice: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    referencePairMinTwapTime(overrides?: CallOverrides): Promise<BigNumber>;

    "referencePairMinTwapTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    stop(overrides?: Overrides): Promise<BigNumber>;

    "stop()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    completeSetup(overrides?: Overrides): Promise<PopulatedTransaction>;

    "completeSetup()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    obtainPrice(
      pair: string,
      maxTwapTime: BigNumberish,
      maxAge: BigNumberish,
      normalizePrice: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "obtainPrice(address,uint64,uint64,bool)"(
      pair: string,
      maxTwapTime: BigNumberish,
      maxAge: BigNumberish,
      normalizePrice: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    referencePairMinTwapTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "referencePairMinTwapTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stop(overrides?: Overrides): Promise<PopulatedTransaction>;

    "stop()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
