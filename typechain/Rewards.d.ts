/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RewardsInterface extends ethers.utils.Interface {
  functions: {
    "accrueSystemRewards()": FunctionFragment;
    "approximateAdditionalPairTokensAllowed(address)": FunctionFragment;
    "borrowRewardsPortion()": FunctionFragment;
    "collateralPairRewardsPortion()": FunctionFragment;
    "completeSetup()": FunctionFragment;
    "currentPeriod()": FunctionFragment;
    "deployer()": FunctionFragment;
    "firstPeriod()": FunctionFragment;
    "getRewards(address)": FunctionFragment;
    "governor()": FunctionFragment;
    "init(address)": FunctionFragment;
    "initialized()": FunctionFragment;
    "lastPeriodRewardsAccrued()": FunctionFragment;
    "lockPairTokens(address,uint256)": FunctionFragment;
    "maxCollateralPoolLiquidity()": FunctionFragment;
    "maxPriceAge()": FunctionFragment;
    "maxReferencePoolLiquidity()": FunctionFragment;
    "maxTwapTime()": FunctionFragment;
    "minCollateralPoolLiquidity()": FunctionFragment;
    "minReferencePoolLiquidity()": FunctionFragment;
    "periodLength()": FunctionFragment;
    "periodsLocked()": FunctionFragment;
    "protocolInitialized()": FunctionFragment;
    "referencePairRewardsPortion()": FunctionFragment;
    "referenceRewardsOffPegSensitivity()": FunctionFragment;
    "setCollateralPairRewardsPortion(uint256)": FunctionFragment;
    "setMaxCollateralPoolLiquidity(uint256)": FunctionFragment;
    "setMaxPriceAge(uint64)": FunctionFragment;
    "setMaxReferencePoolLiquidity(uint256)": FunctionFragment;
    "setMaxTwapTime(uint64)": FunctionFragment;
    "setMinCollateralPoolLiquidity(uint256)": FunctionFragment;
    "setMinReferencePoolLiquidity(uint256)": FunctionFragment;
    "setPeriodsLocked(uint64)": FunctionFragment;
    "setReferencePairRewardsPortion(uint256)": FunctionFragment;
    "setReferenceRewardsOffPegSensitivity(uint256)": FunctionFragment;
    "setupComplete()": FunctionFragment;
    "stop()": FunctionFragment;
    "stopped()": FunctionFragment;
    "systemEnsureMinimumCollateralLiquidity(uint8,uint256)": FunctionFragment;
    "systemEnsureMinimumReferenceLiquidity(uint256)": FunctionFragment;
    "unlockPairTokens(address,uint256)": FunctionFragment;
    "unlockTokensAfterShutdown(address)": FunctionFragment;
    "validUpdate(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accrueSystemRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approximateAdditionalPairTokensAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowRewardsPortion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralPairRewardsPortion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeSetup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "firstPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRewards", values: [string]): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastPeriodRewardsAccrued",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockPairTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxCollateralPoolLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPriceAge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxReferencePoolLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTwapTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minCollateralPoolLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minReferencePoolLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "periodLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "periodsLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referencePairRewardsPortion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referenceRewardsOffPegSensitivity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralPairRewardsPortion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxCollateralPoolLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPriceAge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxReferencePoolLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTwapTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinCollateralPoolLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinReferencePoolLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPeriodsLocked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferencePairRewardsPortion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferenceRewardsOffPegSensitivity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setupComplete",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "systemEnsureMinimumCollateralLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "systemEnsureMinimumReferenceLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockPairTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockTokensAfterShutdown",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validUpdate",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "accrueSystemRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approximateAdditionalPairTokensAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowRewardsPortion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralPairRewardsPortion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "firstPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastPeriodRewardsAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockPairTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxCollateralPoolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPriceAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxReferencePoolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTwapTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minCollateralPoolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minReferencePoolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodsLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referencePairRewardsPortion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referenceRewardsOffPegSensitivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralPairRewardsPortion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxCollateralPoolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPriceAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxReferencePoolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTwapTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinCollateralPoolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinReferencePoolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPeriodsLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferencePairRewardsPortion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferenceRewardsOffPegSensitivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setupComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "systemEnsureMinimumCollateralLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "systemEnsureMinimumReferenceLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockPairTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockTokensAfterShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validUpdate",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(address)": EventFragment;
    "PairTokensLocked(address,address,uint256,uint64)": EventFragment;
    "PairTokensUnlocked(address,address,uint256)": EventFragment;
    "ParameterUpdated(string,uint256)": EventFragment;
    "ParameterUpdated64(string,uint64)": EventFragment;
    "RewardsAccrued(uint256,uint64)": EventFragment;
    "RewardsDistributed(address,uint64,uint256)": EventFragment;
    "ShutdownPairTokensUnlocked(address,address,uint256)": EventFragment;
    "Stopped()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairTokensLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairTokensUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated64"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsAccrued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShutdownPairTokensUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stopped"): EventFragment;
}

export class Rewards extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RewardsInterface;

  functions: {
    accrueSystemRewards(overrides?: Overrides): Promise<ContractTransaction>;

    "accrueSystemRewards()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    approximateAdditionalPairTokensAllowed(
      pair: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "approximateAdditionalPairTokensAllowed(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrowRewardsPortion(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { portion: BigNumber }>;

    "borrowRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { portion: BigNumber }>;

    collateralPairRewardsPortion(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "collateralPairRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    completeSetup(overrides?: Overrides): Promise<ContractTransaction>;

    "completeSetup()"(overrides?: Overrides): Promise<ContractTransaction>;

    currentPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { period: BigNumber }>;

    "currentPeriod()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { period: BigNumber }>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    "deployer()"(overrides?: CallOverrides): Promise<[string]>;

    firstPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewards(
      pair: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getRewards(address)"(
      pair: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    "governor()"(overrides?: CallOverrides): Promise<[string]>;

    init(
      _governor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    "initialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    lastPeriodRewardsAccrued(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastPeriodRewardsAccrued()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockPairTokens(
      pair: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "lockPairTokens(address,uint256)"(
      pair: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    maxCollateralPoolLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxCollateralPoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxPriceAge(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxPriceAge()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxReferencePoolLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxReferencePoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxTwapTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxTwapTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minCollateralPoolLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minCollateralPoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minReferencePoolLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minReferencePoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    periodLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "periodLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    periodsLocked(overrides?: CallOverrides): Promise<[BigNumber]>;

    "periodsLocked()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolInitialized(overrides?: Overrides): Promise<ContractTransaction>;

    "protocolInitialized()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    referencePairRewardsPortion(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "referencePairRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    referenceRewardsOffPegSensitivity(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "referenceRewardsOffPegSensitivity()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setCollateralPairRewardsPortion(
      portion: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCollateralPairRewardsPortion(uint256)"(
      portion: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxCollateralPoolLiquidity(
      max: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxCollateralPoolLiquidity(uint256)"(
      max: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxPriceAge(
      age: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxPriceAge(uint64)"(
      age: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxReferencePoolLiquidity(
      max: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxReferencePoolLiquidity(uint256)"(
      max: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxTwapTime(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxTwapTime(uint64)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinCollateralPoolLiquidity(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinCollateralPoolLiquidity(uint256)"(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinReferencePoolLiquidity(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinReferencePoolLiquidity(uint256)"(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPeriodsLocked(
      periods: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPeriodsLocked(uint64)"(
      periods: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setReferencePairRewardsPortion(
      portion: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setReferencePairRewardsPortion(uint256)"(
      portion: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setReferenceRewardsOffPegSensitivity(
      sensitivity: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setReferenceRewardsOffPegSensitivity(uint256)"(
      sensitivity: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setupComplete(overrides?: CallOverrides): Promise<[boolean]>;

    "setupComplete()"(overrides?: CallOverrides): Promise<[boolean]>;

    stop(overrides?: Overrides): Promise<ContractTransaction>;

    "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

    stopped(overrides?: CallOverrides): Promise<[boolean]>;

    "stopped()"(overrides?: CallOverrides): Promise<[boolean]>;

    systemEnsureMinimumCollateralLiquidity(
      collateralType: BigNumberish,
      collateralDebt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "systemEnsureMinimumCollateralLiquidity(uint8,uint256)"(
      collateralType: BigNumberish,
      collateralDebt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    systemEnsureMinimumReferenceLiquidity(
      debt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "systemEnsureMinimumReferenceLiquidity(uint256)"(
      debt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unlockPairTokens(
      pair: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unlockPairTokens(address,uint256)"(
      pair: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unlockTokensAfterShutdown(
      pair: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unlockTokensAfterShutdown(address)"(
      pair: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validUpdate(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "validUpdate(bytes4)"(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  accrueSystemRewards(overrides?: Overrides): Promise<ContractTransaction>;

  "accrueSystemRewards()"(overrides?: Overrides): Promise<ContractTransaction>;

  approximateAdditionalPairTokensAllowed(
    pair: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "approximateAdditionalPairTokensAllowed(address)"(
    pair: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrowRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

  "borrowRewardsPortion()"(overrides?: CallOverrides): Promise<BigNumber>;

  collateralPairRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

  "collateralPairRewardsPortion()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  completeSetup(overrides?: Overrides): Promise<ContractTransaction>;

  "completeSetup()"(overrides?: Overrides): Promise<ContractTransaction>;

  currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "currentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  deployer(overrides?: CallOverrides): Promise<string>;

  "deployer()"(overrides?: CallOverrides): Promise<string>;

  firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "firstPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  getRewards(pair: string, overrides?: Overrides): Promise<ContractTransaction>;

  "getRewards(address)"(
    pair: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  init(_governor: string, overrides?: Overrides): Promise<ContractTransaction>;

  "init(address)"(
    _governor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  "initialized()"(overrides?: CallOverrides): Promise<boolean>;

  lastPeriodRewardsAccrued(overrides?: CallOverrides): Promise<BigNumber>;

  "lastPeriodRewardsAccrued()"(overrides?: CallOverrides): Promise<BigNumber>;

  lockPairTokens(
    pair: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "lockPairTokens(address,uint256)"(
    pair: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  maxCollateralPoolLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  "maxCollateralPoolLiquidity()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxPriceAge(overrides?: CallOverrides): Promise<BigNumber>;

  "maxPriceAge()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxReferencePoolLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  "maxReferencePoolLiquidity()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxTwapTime(overrides?: CallOverrides): Promise<BigNumber>;

  "maxTwapTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  minCollateralPoolLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  "minCollateralPoolLiquidity()"(overrides?: CallOverrides): Promise<BigNumber>;

  minReferencePoolLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  "minReferencePoolLiquidity()"(overrides?: CallOverrides): Promise<BigNumber>;

  periodLength(overrides?: CallOverrides): Promise<BigNumber>;

  "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  periodsLocked(overrides?: CallOverrides): Promise<BigNumber>;

  "periodsLocked()"(overrides?: CallOverrides): Promise<BigNumber>;

  protocolInitialized(overrides?: Overrides): Promise<ContractTransaction>;

  "protocolInitialized()"(overrides?: Overrides): Promise<ContractTransaction>;

  referencePairRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

  "referencePairRewardsPortion()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  referenceRewardsOffPegSensitivity(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "referenceRewardsOffPegSensitivity()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setCollateralPairRewardsPortion(
    portion: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCollateralPairRewardsPortion(uint256)"(
    portion: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxCollateralPoolLiquidity(
    max: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxCollateralPoolLiquidity(uint256)"(
    max: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxPriceAge(
    age: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxPriceAge(uint64)"(
    age: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxReferencePoolLiquidity(
    max: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxReferencePoolLiquidity(uint256)"(
    max: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxTwapTime(
    time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxTwapTime(uint64)"(
    time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinCollateralPoolLiquidity(
    min: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinCollateralPoolLiquidity(uint256)"(
    min: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinReferencePoolLiquidity(
    min: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinReferencePoolLiquidity(uint256)"(
    min: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPeriodsLocked(
    periods: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPeriodsLocked(uint64)"(
    periods: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setReferencePairRewardsPortion(
    portion: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setReferencePairRewardsPortion(uint256)"(
    portion: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setReferenceRewardsOffPegSensitivity(
    sensitivity: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setReferenceRewardsOffPegSensitivity(uint256)"(
    sensitivity: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setupComplete(overrides?: CallOverrides): Promise<boolean>;

  "setupComplete()"(overrides?: CallOverrides): Promise<boolean>;

  stop(overrides?: Overrides): Promise<ContractTransaction>;

  "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

  stopped(overrides?: CallOverrides): Promise<boolean>;

  "stopped()"(overrides?: CallOverrides): Promise<boolean>;

  systemEnsureMinimumCollateralLiquidity(
    collateralType: BigNumberish,
    collateralDebt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "systemEnsureMinimumCollateralLiquidity(uint8,uint256)"(
    collateralType: BigNumberish,
    collateralDebt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  systemEnsureMinimumReferenceLiquidity(
    debt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "systemEnsureMinimumReferenceLiquidity(uint256)"(
    debt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unlockPairTokens(
    pair: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unlockPairTokens(address,uint256)"(
    pair: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unlockTokensAfterShutdown(
    pair: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unlockTokensAfterShutdown(address)"(
    pair: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validUpdate(action: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "validUpdate(bytes4)"(
    action: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    accrueSystemRewards(overrides?: CallOverrides): Promise<void>;

    "accrueSystemRewards()"(overrides?: CallOverrides): Promise<void>;

    approximateAdditionalPairTokensAllowed(
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "approximateAdditionalPairTokensAllowed(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowRewardsPortion()"(overrides?: CallOverrides): Promise<BigNumber>;

    collateralPairRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralPairRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeSetup(overrides?: CallOverrides): Promise<void>;

    "completeSetup()"(overrides?: CallOverrides): Promise<void>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<string>;

    "deployer()"(overrides?: CallOverrides): Promise<string>;

    firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRewards(pair: string, overrides?: CallOverrides): Promise<void>;

    "getRewards(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<void>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    init(_governor: string, overrides?: CallOverrides): Promise<void>;

    "init(address)"(
      _governor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    "initialized()"(overrides?: CallOverrides): Promise<boolean>;

    lastPeriodRewardsAccrued(overrides?: CallOverrides): Promise<BigNumber>;

    "lastPeriodRewardsAccrued()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockPairTokens(
      pair: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "lockPairTokens(address,uint256)"(
      pair: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    maxCollateralPoolLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    "maxCollateralPoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPriceAge(overrides?: CallOverrides): Promise<BigNumber>;

    "maxPriceAge()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxReferencePoolLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    "maxReferencePoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxTwapTime(overrides?: CallOverrides): Promise<BigNumber>;

    "maxTwapTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    minCollateralPoolLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    "minCollateralPoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minReferencePoolLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    "minReferencePoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    periodsLocked(overrides?: CallOverrides): Promise<BigNumber>;

    "periodsLocked()"(overrides?: CallOverrides): Promise<BigNumber>;

    protocolInitialized(overrides?: CallOverrides): Promise<void>;

    "protocolInitialized()"(overrides?: CallOverrides): Promise<void>;

    referencePairRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "referencePairRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referenceRewardsOffPegSensitivity(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "referenceRewardsOffPegSensitivity()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCollateralPairRewardsPortion(
      portion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCollateralPairRewardsPortion(uint256)"(
      portion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxCollateralPoolLiquidity(
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxCollateralPoolLiquidity(uint256)"(
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPriceAge(age: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setMaxPriceAge(uint64)"(
      age: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxReferencePoolLiquidity(
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxReferencePoolLiquidity(uint256)"(
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTwapTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxTwapTime(uint64)"(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinCollateralPoolLiquidity(
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinCollateralPoolLiquidity(uint256)"(
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinReferencePoolLiquidity(
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinReferencePoolLiquidity(uint256)"(
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPeriodsLocked(
      periods: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPeriodsLocked(uint64)"(
      periods: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReferencePairRewardsPortion(
      portion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReferencePairRewardsPortion(uint256)"(
      portion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReferenceRewardsOffPegSensitivity(
      sensitivity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReferenceRewardsOffPegSensitivity(uint256)"(
      sensitivity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setupComplete(overrides?: CallOverrides): Promise<boolean>;

    "setupComplete()"(overrides?: CallOverrides): Promise<boolean>;

    stop(overrides?: CallOverrides): Promise<void>;

    "stop()"(overrides?: CallOverrides): Promise<void>;

    stopped(overrides?: CallOverrides): Promise<boolean>;

    "stopped()"(overrides?: CallOverrides): Promise<boolean>;

    systemEnsureMinimumCollateralLiquidity(
      collateralType: BigNumberish,
      collateralDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "systemEnsureMinimumCollateralLiquidity(uint8,uint256)"(
      collateralType: BigNumberish,
      collateralDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    systemEnsureMinimumReferenceLiquidity(
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "systemEnsureMinimumReferenceLiquidity(uint256)"(
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockPairTokens(
      pair: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unlockPairTokens(address,uint256)"(
      pair: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockTokensAfterShutdown(
      pair: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "unlockTokensAfterShutdown(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validUpdate(action: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "validUpdate(bytes4)"(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Initialized(governor: string | null): EventFilter;

    PairTokensLocked(
      sender: string | null,
      pair: string | null,
      count: null,
      unlockPeriod: null
    ): EventFilter;

    PairTokensUnlocked(
      sender: string | null,
      pair: string | null,
      count: null
    ): EventFilter;

    ParameterUpdated(paramName: string | null, value: null): EventFilter;

    ParameterUpdated64(paramName: string | null, value: null): EventFilter;

    RewardsAccrued(count: null, periods: null): EventFilter;

    RewardsDistributed(
      account: string | null,
      period: BigNumberish | null,
      cnpRewards: null
    ): EventFilter;

    ShutdownPairTokensUnlocked(
      sender: string | null,
      pair: string | null,
      count: null
    ): EventFilter;

    Stopped(): EventFilter;
  };

  estimateGas: {
    accrueSystemRewards(overrides?: Overrides): Promise<BigNumber>;

    "accrueSystemRewards()"(overrides?: Overrides): Promise<BigNumber>;

    approximateAdditionalPairTokensAllowed(
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "approximateAdditionalPairTokensAllowed(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowRewardsPortion()"(overrides?: CallOverrides): Promise<BigNumber>;

    collateralPairRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralPairRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeSetup(overrides?: Overrides): Promise<BigNumber>;

    "completeSetup()"(overrides?: Overrides): Promise<BigNumber>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    "deployer()"(overrides?: CallOverrides): Promise<BigNumber>;

    firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRewards(pair: string, overrides?: Overrides): Promise<BigNumber>;

    "getRewards(address)"(
      pair: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    init(_governor: string, overrides?: Overrides): Promise<BigNumber>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    "initialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastPeriodRewardsAccrued(overrides?: CallOverrides): Promise<BigNumber>;

    "lastPeriodRewardsAccrued()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockPairTokens(
      pair: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "lockPairTokens(address,uint256)"(
      pair: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    maxCollateralPoolLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    "maxCollateralPoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPriceAge(overrides?: CallOverrides): Promise<BigNumber>;

    "maxPriceAge()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxReferencePoolLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    "maxReferencePoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxTwapTime(overrides?: CallOverrides): Promise<BigNumber>;

    "maxTwapTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    minCollateralPoolLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    "minCollateralPoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minReferencePoolLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    "minReferencePoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    periodsLocked(overrides?: CallOverrides): Promise<BigNumber>;

    "periodsLocked()"(overrides?: CallOverrides): Promise<BigNumber>;

    protocolInitialized(overrides?: Overrides): Promise<BigNumber>;

    "protocolInitialized()"(overrides?: Overrides): Promise<BigNumber>;

    referencePairRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "referencePairRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referenceRewardsOffPegSensitivity(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "referenceRewardsOffPegSensitivity()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCollateralPairRewardsPortion(
      portion: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCollateralPairRewardsPortion(uint256)"(
      portion: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxCollateralPoolLiquidity(
      max: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxCollateralPoolLiquidity(uint256)"(
      max: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxPriceAge(
      age: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxPriceAge(uint64)"(
      age: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxReferencePoolLiquidity(
      max: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxReferencePoolLiquidity(uint256)"(
      max: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxTwapTime(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxTwapTime(uint64)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinCollateralPoolLiquidity(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinCollateralPoolLiquidity(uint256)"(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinReferencePoolLiquidity(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinReferencePoolLiquidity(uint256)"(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPeriodsLocked(
      periods: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPeriodsLocked(uint64)"(
      periods: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setReferencePairRewardsPortion(
      portion: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setReferencePairRewardsPortion(uint256)"(
      portion: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setReferenceRewardsOffPegSensitivity(
      sensitivity: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setReferenceRewardsOffPegSensitivity(uint256)"(
      sensitivity: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setupComplete(overrides?: CallOverrides): Promise<BigNumber>;

    "setupComplete()"(overrides?: CallOverrides): Promise<BigNumber>;

    stop(overrides?: Overrides): Promise<BigNumber>;

    "stop()"(overrides?: Overrides): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    "stopped()"(overrides?: CallOverrides): Promise<BigNumber>;

    systemEnsureMinimumCollateralLiquidity(
      collateralType: BigNumberish,
      collateralDebt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "systemEnsureMinimumCollateralLiquidity(uint8,uint256)"(
      collateralType: BigNumberish,
      collateralDebt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    systemEnsureMinimumReferenceLiquidity(
      debt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "systemEnsureMinimumReferenceLiquidity(uint256)"(
      debt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unlockPairTokens(
      pair: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unlockPairTokens(address,uint256)"(
      pair: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unlockTokensAfterShutdown(
      pair: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unlockTokensAfterShutdown(address)"(
      pair: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validUpdate(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validUpdate(bytes4)"(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accrueSystemRewards(overrides?: Overrides): Promise<PopulatedTransaction>;

    "accrueSystemRewards()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    approximateAdditionalPairTokensAllowed(
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "approximateAdditionalPairTokensAllowed(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowRewardsPortion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "borrowRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralPairRewardsPortion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateralPairRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeSetup(overrides?: Overrides): Promise<PopulatedTransaction>;

    "completeSetup()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    currentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deployer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    firstPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewards(
      pair: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getRewards(address)"(
      pair: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      _governor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastPeriodRewardsAccrued(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastPeriodRewardsAccrued()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockPairTokens(
      pair: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "lockPairTokens(address,uint256)"(
      pair: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    maxCollateralPoolLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxCollateralPoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPriceAge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxPriceAge()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxReferencePoolLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxReferencePoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTwapTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxTwapTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minCollateralPoolLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minCollateralPoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minReferencePoolLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minReferencePoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "periodLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodsLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "periodsLocked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolInitialized(overrides?: Overrides): Promise<PopulatedTransaction>;

    "protocolInitialized()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    referencePairRewardsPortion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "referencePairRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referenceRewardsOffPegSensitivity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "referenceRewardsOffPegSensitivity()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCollateralPairRewardsPortion(
      portion: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCollateralPairRewardsPortion(uint256)"(
      portion: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxCollateralPoolLiquidity(
      max: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxCollateralPoolLiquidity(uint256)"(
      max: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxPriceAge(
      age: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxPriceAge(uint64)"(
      age: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxReferencePoolLiquidity(
      max: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxReferencePoolLiquidity(uint256)"(
      max: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxTwapTime(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxTwapTime(uint64)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinCollateralPoolLiquidity(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinCollateralPoolLiquidity(uint256)"(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinReferencePoolLiquidity(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinReferencePoolLiquidity(uint256)"(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPeriodsLocked(
      periods: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPeriodsLocked(uint64)"(
      periods: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setReferencePairRewardsPortion(
      portion: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setReferencePairRewardsPortion(uint256)"(
      portion: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setReferenceRewardsOffPegSensitivity(
      sensitivity: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setReferenceRewardsOffPegSensitivity(uint256)"(
      sensitivity: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setupComplete(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "setupComplete()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stop(overrides?: Overrides): Promise<PopulatedTransaction>;

    "stop()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stopped()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    systemEnsureMinimumCollateralLiquidity(
      collateralType: BigNumberish,
      collateralDebt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "systemEnsureMinimumCollateralLiquidity(uint8,uint256)"(
      collateralType: BigNumberish,
      collateralDebt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    systemEnsureMinimumReferenceLiquidity(
      debt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "systemEnsureMinimumReferenceLiquidity(uint256)"(
      debt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unlockPairTokens(
      pair: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unlockPairTokens(address,uint256)"(
      pair: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unlockTokensAfterShutdown(
      pair: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unlockTokensAfterShutdown(address)"(
      pair: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validUpdate(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validUpdate(bytes4)"(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
