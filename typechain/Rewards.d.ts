/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RewardsInterface extends ethers.utils.Interface {
  functions: {
    "accrueRewards()": FunctionFragment;
    "addReferencePool(address)": FunctionFragment;
    "borrowRewardsPortion()": FunctionFragment;
    "burnNFTFromLiquidityPositionAndRetrieveTokens(uint256,uint256,uint256,uint256)": FunctionFragment;
    "claimRewards(uint256,bool,bool)": FunctionFragment;
    "collateralPool()": FunctionFragment;
    "collateralPoolRewardsPortion()": FunctionFragment;
    "completeSetup()": FunctionFragment;
    "createNewNFTAndLockIntoLiquidityPosition(tuple,tuple)": FunctionFragment;
    "current(uint16)": FunctionFragment;
    "currentPeriod()": FunctionFragment;
    "decreaseLiquidityPosition(uint256,uint128,uint256,uint256,uint256)": FunctionFragment;
    "deployer()": FunctionFragment;
    "firstPeriod()": FunctionFragment;
    "governor()": FunctionFragment;
    "increaseLiquidityPosition(uint256,uint128,uint256,uint256,uint256,tuple)": FunctionFragment;
    "init(address)": FunctionFragment;
    "lastPeriodGlobalRewardsAccrued()": FunctionFragment;
    "lockNFTIntoLiquidityPosition(uint256,tuple)": FunctionFragment;
    "maxDebtSupported()": FunctionFragment;
    "maxDebtSupportedByPool(uint16,uint256)": FunctionFragment;
    "maxLiquidityDecreasePerPeriod()": FunctionFragment;
    "minCoinLiquidityPerPosition()": FunctionFragment;
    "minCollateralPoolLiquidity()": FunctionFragment;
    "minLiquidationRatio()": FunctionFragment;
    "minLiquidityByPeriod(uint16)": FunctionFragment;
    "minTotalReferencePoolLiquidity()": FunctionFragment;
    "periodLength()": FunctionFragment;
    "pointOutOutofRangePositions(address,uint256[])": FunctionFragment;
    "poolForPoolID(uint16)": FunctionFragment;
    "poolIDForPool(address)": FunctionFragment;
    "priceUpdateTwapDuration()": FunctionFragment;
    "protocolPool()": FunctionFragment;
    "protocolPoolRewardsPortion()": FunctionFragment;
    "referencePoolRewardsPortion()": FunctionFragment;
    "referencePools(uint256)": FunctionFragment;
    "removeReferencePool(address)": FunctionFragment;
    "retrieveLiquidityTokensAfterShutdown(uint256,uint256,uint256,uint256)": FunctionFragment;
    "setMaxLiquidityDecreasePerPeriod(uint256)": FunctionFragment;
    "setMinCoinLiquidityPerPosition(uint128)": FunctionFragment;
    "setMinCollateralPoolLiquidity(uint256)": FunctionFragment;
    "setMinLiquidationRatio(uint256)": FunctionFragment;
    "setMinTotalReferencePoolLiquidity(uint256)": FunctionFragment;
    "setPriceUpdateTwapDuration(uint32)": FunctionFragment;
    "setRewardsPortions(uint256,uint256,uint256)": FunctionFragment;
    "setTimePeriodOfOutOfRangeRewardsToReceive(uint64)": FunctionFragment;
    "stop()": FunctionFragment;
    "stopped()": FunctionFragment;
    "systemNotifyNewPriceInfo(address,uint256,int24)": FunctionFragment;
    "timePeriodOfOutOfRangeRewardsToReceive()": FunctionFragment;
    "unlockNFTFromLiquidityPosition(uint256)": FunctionFragment;
    "updateStalePrice(address)": FunctionFragment;
    "validUpdate(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accrueRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addReferencePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowRewardsPortion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnNFTFromLiquidityPositionAndRetrieveTokens",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralPoolRewardsPortion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeSetup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createNewNFTAndLockIntoLiquidityPosition",
    values: [
      {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount: BigNumberish;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
      },
      { v: BigNumberish; r: BytesLike; s: BytesLike }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "current",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLiquidityPosition",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "firstPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidityPosition",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      { v: BigNumberish; r: BytesLike; s: BytesLike }
    ]
  ): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lastPeriodGlobalRewardsAccrued",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockNFTIntoLiquidityPosition",
    values: [BigNumberish, { v: BigNumberish; r: BytesLike; s: BytesLike }]
  ): string;
  encodeFunctionData(
    functionFragment: "maxDebtSupported",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxDebtSupportedByPool",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxLiquidityDecreasePerPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minCoinLiquidityPerPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minCollateralPoolLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minLiquidationRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minLiquidityByPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minTotalReferencePoolLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "periodLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pointOutOutofRangePositions",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "poolForPoolID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolIDForPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "priceUpdateTwapDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolPoolRewardsPortion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referencePoolRewardsPortion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referencePools",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeReferencePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveLiquidityTokensAfterShutdown",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxLiquidityDecreasePerPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinCoinLiquidityPerPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinCollateralPoolLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinLiquidationRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinTotalReferencePoolLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceUpdateTwapDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsPortions",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimePeriodOfOutOfRangeRewardsToReceive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "systemNotifyNewPriceInfo",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timePeriodOfOutOfRangeRewardsToReceive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockNFTFromLiquidityPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStalePrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validUpdate",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "accrueRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addReferencePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowRewardsPortion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnNFTFromLiquidityPositionAndRetrieveTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralPoolRewardsPortion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewNFTAndLockIntoLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "current", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "firstPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastPeriodGlobalRewardsAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockNFTIntoLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDebtSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDebtSupportedByPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLiquidityDecreasePerPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minCoinLiquidityPerPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minCollateralPoolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minLiquidationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minLiquidityByPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minTotalReferencePoolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pointOutOutofRangePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolForPoolID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolIDForPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceUpdateTwapDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolPoolRewardsPortion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referencePoolRewardsPortion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referencePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeReferencePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveLiquidityTokensAfterShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxLiquidityDecreasePerPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinCoinLiquidityPerPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinCollateralPoolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinLiquidationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinTotalReferencePoolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceUpdateTwapDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsPortions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimePeriodOfOutOfRangeRewardsToReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "systemNotifyNewPriceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timePeriodOfOutOfRangeRewardsToReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockNFTFromLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStalePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validUpdate",
    data: BytesLike
  ): Result;

  events: {
    "AddReferencePool(address)": EventFragment;
    "Initialized(address)": EventFragment;
    "MaxLiquidityDecreasePerPeriod(uint256)": EventFragment;
    "MinCoinLiquidityPerPosition(uint128)": EventFragment;
    "MinCollateralPoolLiquidity(uint256)": EventFragment;
    "MinLiquidationRatio(uint256)": EventFragment;
    "MinTotalReferencePoolLiquidity(uint256)": EventFragment;
    "PoolTokensUnlocked(address,address,uint256)": EventFragment;
    "PositionLocked(uint256,address,uint128,int24,int24)": EventFragment;
    "PriceUpdateTwapDuration(uint32)": EventFragment;
    "RemoveReferencePool(address)": EventFragment;
    "RewardsAccrued(uint256,uint64)": EventFragment;
    "RewardsDistributed(address,uint64,uint256)": EventFragment;
    "RewardsPortions(uint256,uint256,uint256)": EventFragment;
    "ShutdownPoolTokensUnlocked(address,address,uint256)": EventFragment;
    "Stopped()": EventFragment;
    "TimePeriodOfOutOfRangeRewardsToReceive(uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddReferencePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MaxLiquidityDecreasePerPeriod"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinCoinLiquidityPerPosition"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinCollateralPoolLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinLiquidationRatio"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinTotalReferencePoolLiquidity"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolTokensUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdateTwapDuration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveReferencePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsAccrued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsPortions"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShutdownPoolTokensUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stopped"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TimePeriodOfOutOfRangeRewardsToReceive"
  ): EventFragment;
}

export class Rewards extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RewardsInterface;

  functions: {
    accrueRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "accrueRewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowRewardsPortion(overrides?: CallOverrides): Promise<[BigNumber]>;

    "borrowRewardsPortion()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    burnNFTFromLiquidityPositionAndRetrieveTokens(
      nftTokenID: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "burnNFTFromLiquidityPositionAndRetrieveTokens(uint256,uint256,uint256,uint256)"(
      nftTokenID: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRewards(
      nftTokenID: BigNumberish,
      collectInflationRewards: boolean,
      collectTradingFees: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimRewards(uint256,bool,bool)"(
      nftTokenID: BigNumberish,
      collectInflationRewards: boolean,
      collectTradingFees: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collateralPool(overrides?: CallOverrides): Promise<[number]>;

    "collateralPool()"(overrides?: CallOverrides): Promise<[number]>;

    collateralPoolRewardsPortion(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "collateralPoolRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    completeSetup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "completeSetup()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createNewNFTAndLockIntoLiquidityPosition(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount: BigNumberish;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
      },
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createNewNFTAndLockIntoLiquidityPosition((address,address,uint24,int24,int24,uint128,uint256,uint256,address,uint256),(uint8,bytes32,bytes32))"(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount: BigNumberish;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
      },
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    current(arg0: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    "current(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    currentPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { period: BigNumber }>;

    "currentPeriod()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { period: BigNumber }>;

    decreaseLiquidityPosition(
      nftTokenID: BigNumberish,
      amount: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "decreaseLiquidityPosition(uint256,uint128,uint256,uint256,uint256)"(
      nftTokenID: BigNumberish,
      amount: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    "deployer()"(overrides?: CallOverrides): Promise<[string]>;

    firstPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    "governor()"(overrides?: CallOverrides): Promise<[string]>;

    increaseLiquidityPosition(
      nftTokenID: BigNumberish,
      amount: BigNumberish,
      amount0Max: BigNumberish,
      amount1Max: BigNumberish,
      deadline: BigNumberish,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "increaseLiquidityPosition(uint256,uint128,uint256,uint256,uint256,(uint8,bytes32,bytes32))"(
      nftTokenID: BigNumberish,
      amount: BigNumberish,
      amount0Max: BigNumberish,
      amount1Max: BigNumberish,
      deadline: BigNumberish,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastPeriodGlobalRewardsAccrued(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lastPeriodGlobalRewardsAccrued()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockNFTIntoLiquidityPosition(
      nftTokenID: BigNumberish,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockNFTIntoLiquidityPosition(uint256,(uint8,bytes32,bytes32))"(
      nftTokenID: BigNumberish,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxDebtSupported(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxDebtSupported()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxDebtSupportedByPool(
      poolID: BigNumberish,
      minLiquidityRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxDebt: BigNumber }>;

    "maxDebtSupportedByPool(uint16,uint256)"(
      poolID: BigNumberish,
      minLiquidityRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxDebt: BigNumber }>;

    maxLiquidityDecreasePerPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "maxLiquidityDecreasePerPeriod()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minCoinLiquidityPerPosition(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "minCoinLiquidityPerPosition()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minCollateralPoolLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minCollateralPoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minLiquidationRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minLiquidationRatio()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minLiquidityByPeriod(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { period: BigNumber; minLiquidity: BigNumber }
    >;

    "minLiquidityByPeriod(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { period: BigNumber; minLiquidity: BigNumber }
    >;

    minTotalReferencePoolLiquidity(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "minTotalReferencePoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    periodLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "periodLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    pointOutOutofRangePositions(
      pool: string,
      nftTokenIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pointOutOutofRangePositions(address,uint256[])"(
      pool: string,
      nftTokenIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    poolForPoolID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "poolForPoolID(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    poolIDForPool(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    "poolIDForPool(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    priceUpdateTwapDuration(overrides?: CallOverrides): Promise<[number]>;

    "priceUpdateTwapDuration()"(overrides?: CallOverrides): Promise<[number]>;

    protocolPool(overrides?: CallOverrides): Promise<[number]>;

    "protocolPool()"(overrides?: CallOverrides): Promise<[number]>;

    protocolPoolRewardsPortion(overrides?: CallOverrides): Promise<[BigNumber]>;

    "protocolPoolRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    referencePoolRewardsPortion(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "referencePoolRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    referencePools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "referencePools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retrieveLiquidityTokensAfterShutdown(
      nftTokenID: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "retrieveLiquidityTokensAfterShutdown(uint256,uint256,uint256,uint256)"(
      nftTokenID: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxLiquidityDecreasePerPeriod(
      decreasePortion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMaxLiquidityDecreasePerPeriod(uint256)"(
      decreasePortion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinCoinLiquidityPerPosition(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMinCoinLiquidityPerPosition(uint128)"(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinCollateralPoolLiquidity(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMinCollateralPoolLiquidity(uint256)"(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinLiquidationRatio(
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMinLiquidationRatio(uint256)"(
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinTotalReferencePoolLiquidity(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMinTotalReferencePoolLiquidity(uint256)"(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceUpdateTwapDuration(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPriceUpdateTwapDuration(uint32)"(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardsPortions(
      _protocol: BigNumberish,
      _collateral: BigNumberish,
      _reference: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRewardsPortions(uint256,uint256,uint256)"(
      _protocol: BigNumberish,
      _collateral: BigNumberish,
      _reference: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTimePeriodOfOutOfRangeRewardsToReceive(
      timePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTimePeriodOfOutOfRangeRewardsToReceive(uint64)"(
      timePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stop()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopped(overrides?: CallOverrides): Promise<[boolean]>;

    "stopped()"(overrides?: CallOverrides): Promise<[boolean]>;

    systemNotifyNewPriceInfo(
      pool: string,
      liquidityPerCoin: BigNumberish,
      tick: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "systemNotifyNewPriceInfo(address,uint256,int24)"(
      pool: string,
      liquidityPerCoin: BigNumberish,
      tick: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timePeriodOfOutOfRangeRewardsToReceive(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "timePeriodOfOutOfRangeRewardsToReceive()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unlockNFTFromLiquidityPosition(
      nftTokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unlockNFTFromLiquidityPosition(uint256)"(
      nftTokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStalePrice(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateStalePrice(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  accrueRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "accrueRewards()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addReferencePool(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addReferencePool(address)"(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

  "borrowRewardsPortion()"(overrides?: CallOverrides): Promise<BigNumber>;

  burnNFTFromLiquidityPositionAndRetrieveTokens(
    nftTokenID: BigNumberish,
    amount0Min: BigNumberish,
    amount1Min: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "burnNFTFromLiquidityPositionAndRetrieveTokens(uint256,uint256,uint256,uint256)"(
    nftTokenID: BigNumberish,
    amount0Min: BigNumberish,
    amount1Min: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRewards(
    nftTokenID: BigNumberish,
    collectInflationRewards: boolean,
    collectTradingFees: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimRewards(uint256,bool,bool)"(
    nftTokenID: BigNumberish,
    collectInflationRewards: boolean,
    collectTradingFees: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collateralPool(overrides?: CallOverrides): Promise<number>;

  "collateralPool()"(overrides?: CallOverrides): Promise<number>;

  collateralPoolRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

  "collateralPoolRewardsPortion()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  completeSetup(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "completeSetup()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createNewNFTAndLockIntoLiquidityPosition(
    params: {
      token0: string;
      token1: string;
      fee: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      amount: BigNumberish;
      amount0Max: BigNumberish;
      amount1Max: BigNumberish;
      recipient: string;
      deadline: BigNumberish;
    },
    ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createNewNFTAndLockIntoLiquidityPosition((address,address,uint24,int24,int24,uint128,uint256,uint256,address,uint256),(uint8,bytes32,bytes32))"(
    params: {
      token0: string;
      token1: string;
      fee: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      amount: BigNumberish;
      amount0Max: BigNumberish;
      amount1Max: BigNumberish;
      recipient: string;
      deadline: BigNumberish;
    },
    ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  current(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "current(uint16)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "currentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  decreaseLiquidityPosition(
    nftTokenID: BigNumberish,
    amount: BigNumberish,
    amount0Min: BigNumberish,
    amount1Min: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "decreaseLiquidityPosition(uint256,uint128,uint256,uint256,uint256)"(
    nftTokenID: BigNumberish,
    amount: BigNumberish,
    amount0Min: BigNumberish,
    amount1Min: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployer(overrides?: CallOverrides): Promise<string>;

  "deployer()"(overrides?: CallOverrides): Promise<string>;

  firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "firstPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  increaseLiquidityPosition(
    nftTokenID: BigNumberish,
    amount: BigNumberish,
    amount0Max: BigNumberish,
    amount1Max: BigNumberish,
    deadline: BigNumberish,
    ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "increaseLiquidityPosition(uint256,uint128,uint256,uint256,uint256,(uint8,bytes32,bytes32))"(
    nftTokenID: BigNumberish,
    amount: BigNumberish,
    amount0Max: BigNumberish,
    amount1Max: BigNumberish,
    deadline: BigNumberish,
    ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    _governor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "init(address)"(
    _governor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastPeriodGlobalRewardsAccrued(overrides?: CallOverrides): Promise<BigNumber>;

  "lastPeriodGlobalRewardsAccrued()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockNFTIntoLiquidityPosition(
    nftTokenID: BigNumberish,
    ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockNFTIntoLiquidityPosition(uint256,(uint8,bytes32,bytes32))"(
    nftTokenID: BigNumberish,
    ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxDebtSupported(overrides?: CallOverrides): Promise<BigNumber>;

  "maxDebtSupported()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxDebtSupportedByPool(
    poolID: BigNumberish,
    minLiquidityRatio: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "maxDebtSupportedByPool(uint16,uint256)"(
    poolID: BigNumberish,
    minLiquidityRatio: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxLiquidityDecreasePerPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "maxLiquidityDecreasePerPeriod()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minCoinLiquidityPerPosition(overrides?: CallOverrides): Promise<BigNumber>;

  "minCoinLiquidityPerPosition()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minCollateralPoolLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  "minCollateralPoolLiquidity()"(overrides?: CallOverrides): Promise<BigNumber>;

  minLiquidationRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "minLiquidationRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  minLiquidityByPeriod(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { period: BigNumber; minLiquidity: BigNumber }
  >;

  "minLiquidityByPeriod(uint16)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { period: BigNumber; minLiquidity: BigNumber }
  >;

  minTotalReferencePoolLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  "minTotalReferencePoolLiquidity()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  periodLength(overrides?: CallOverrides): Promise<BigNumber>;

  "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  pointOutOutofRangePositions(
    pool: string,
    nftTokenIDs: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pointOutOutofRangePositions(address,uint256[])"(
    pool: string,
    nftTokenIDs: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  poolForPoolID(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "poolForPoolID(uint16)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  poolIDForPool(arg0: string, overrides?: CallOverrides): Promise<number>;

  "poolIDForPool(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<number>;

  priceUpdateTwapDuration(overrides?: CallOverrides): Promise<number>;

  "priceUpdateTwapDuration()"(overrides?: CallOverrides): Promise<number>;

  protocolPool(overrides?: CallOverrides): Promise<number>;

  "protocolPool()"(overrides?: CallOverrides): Promise<number>;

  protocolPoolRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

  "protocolPoolRewardsPortion()"(overrides?: CallOverrides): Promise<BigNumber>;

  referencePoolRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

  "referencePoolRewardsPortion()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  referencePools(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  "referencePools(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  removeReferencePool(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeReferencePool(address)"(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retrieveLiquidityTokensAfterShutdown(
    nftTokenID: BigNumberish,
    amount0Min: BigNumberish,
    amount1Min: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "retrieveLiquidityTokensAfterShutdown(uint256,uint256,uint256,uint256)"(
    nftTokenID: BigNumberish,
    amount0Min: BigNumberish,
    amount1Min: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxLiquidityDecreasePerPeriod(
    decreasePortion: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMaxLiquidityDecreasePerPeriod(uint256)"(
    decreasePortion: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinCoinLiquidityPerPosition(
    min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMinCoinLiquidityPerPosition(uint128)"(
    min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinCollateralPoolLiquidity(
    min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMinCollateralPoolLiquidity(uint256)"(
    min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinLiquidationRatio(
    ratio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMinLiquidationRatio(uint256)"(
    ratio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinTotalReferencePoolLiquidity(
    min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMinTotalReferencePoolLiquidity(uint256)"(
    min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceUpdateTwapDuration(
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPriceUpdateTwapDuration(uint32)"(
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardsPortions(
    _protocol: BigNumberish,
    _collateral: BigNumberish,
    _reference: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRewardsPortions(uint256,uint256,uint256)"(
    _protocol: BigNumberish,
    _collateral: BigNumberish,
    _reference: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTimePeriodOfOutOfRangeRewardsToReceive(
    timePeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTimePeriodOfOutOfRangeRewardsToReceive(uint64)"(
    timePeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stop(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stop()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopped(overrides?: CallOverrides): Promise<boolean>;

  "stopped()"(overrides?: CallOverrides): Promise<boolean>;

  systemNotifyNewPriceInfo(
    pool: string,
    liquidityPerCoin: BigNumberish,
    tick: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "systemNotifyNewPriceInfo(address,uint256,int24)"(
    pool: string,
    liquidityPerCoin: BigNumberish,
    tick: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timePeriodOfOutOfRangeRewardsToReceive(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "timePeriodOfOutOfRangeRewardsToReceive()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unlockNFTFromLiquidityPosition(
    nftTokenID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unlockNFTFromLiquidityPosition(uint256)"(
    nftTokenID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStalePrice(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateStalePrice(address)"(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "validUpdate(bytes4)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    accrueRewards(overrides?: CallOverrides): Promise<void>;

    "accrueRewards()"(overrides?: CallOverrides): Promise<void>;

    addReferencePool(pool: string, overrides?: CallOverrides): Promise<void>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowRewardsPortion()"(overrides?: CallOverrides): Promise<BigNumber>;

    burnNFTFromLiquidityPositionAndRetrieveTokens(
      nftTokenID: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burnNFTFromLiquidityPositionAndRetrieveTokens(uint256,uint256,uint256,uint256)"(
      nftTokenID: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewards(
      nftTokenID: BigNumberish,
      collectInflationRewards: boolean,
      collectTradingFees: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimRewards(uint256,bool,bool)"(
      nftTokenID: BigNumberish,
      collectInflationRewards: boolean,
      collectTradingFees: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    collateralPool(overrides?: CallOverrides): Promise<number>;

    "collateralPool()"(overrides?: CallOverrides): Promise<number>;

    collateralPoolRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralPoolRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeSetup(overrides?: CallOverrides): Promise<void>;

    "completeSetup()"(overrides?: CallOverrides): Promise<void>;

    createNewNFTAndLockIntoLiquidityPosition(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount: BigNumberish;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
      },
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createNewNFTAndLockIntoLiquidityPosition((address,address,uint24,int24,int24,uint128,uint256,uint256,address,uint256),(uint8,bytes32,bytes32))"(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount: BigNumberish;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
      },
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    current(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "current(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseLiquidityPosition(
      nftTokenID: BigNumberish,
      amount: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "decreaseLiquidityPosition(uint256,uint128,uint256,uint256,uint256)"(
      nftTokenID: BigNumberish,
      amount: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deployer(overrides?: CallOverrides): Promise<string>;

    "deployer()"(overrides?: CallOverrides): Promise<string>;

    firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    increaseLiquidityPosition(
      nftTokenID: BigNumberish,
      amount: BigNumberish,
      amount0Max: BigNumberish,
      amount1Max: BigNumberish,
      deadline: BigNumberish,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<void>;

    "increaseLiquidityPosition(uint256,uint128,uint256,uint256,uint256,(uint8,bytes32,bytes32))"(
      nftTokenID: BigNumberish,
      amount: BigNumberish,
      amount0Max: BigNumberish,
      amount1Max: BigNumberish,
      deadline: BigNumberish,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<void>;

    init(_governor: string, overrides?: CallOverrides): Promise<void>;

    "init(address)"(
      _governor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastPeriodGlobalRewardsAccrued(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastPeriodGlobalRewardsAccrued()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockNFTIntoLiquidityPosition(
      nftTokenID: BigNumberish,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<void>;

    "lockNFTIntoLiquidityPosition(uint256,(uint8,bytes32,bytes32))"(
      nftTokenID: BigNumberish,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<void>;

    maxDebtSupported(overrides?: CallOverrides): Promise<BigNumber>;

    "maxDebtSupported()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxDebtSupportedByPool(
      poolID: BigNumberish,
      minLiquidityRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maxDebtSupportedByPool(uint16,uint256)"(
      poolID: BigNumberish,
      minLiquidityRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxLiquidityDecreasePerPeriod(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maxLiquidityDecreasePerPeriod()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minCoinLiquidityPerPosition(overrides?: CallOverrides): Promise<BigNumber>;

    "minCoinLiquidityPerPosition()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minCollateralPoolLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    "minCollateralPoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minLiquidationRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "minLiquidationRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    minLiquidityByPeriod(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { period: BigNumber; minLiquidity: BigNumber }
    >;

    "minLiquidityByPeriod(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { period: BigNumber; minLiquidity: BigNumber }
    >;

    minTotalReferencePoolLiquidity(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minTotalReferencePoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    pointOutOutofRangePositions(
      pool: string,
      nftTokenIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "pointOutOutofRangePositions(address,uint256[])"(
      pool: string,
      nftTokenIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    poolForPoolID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "poolForPoolID(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    poolIDForPool(arg0: string, overrides?: CallOverrides): Promise<number>;

    "poolIDForPool(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<number>;

    priceUpdateTwapDuration(overrides?: CallOverrides): Promise<number>;

    "priceUpdateTwapDuration()"(overrides?: CallOverrides): Promise<number>;

    protocolPool(overrides?: CallOverrides): Promise<number>;

    "protocolPool()"(overrides?: CallOverrides): Promise<number>;

    protocolPoolRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolPoolRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referencePoolRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "referencePoolRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referencePools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "referencePools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    removeReferencePool(pool: string, overrides?: CallOverrides): Promise<void>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    retrieveLiquidityTokensAfterShutdown(
      nftTokenID: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "retrieveLiquidityTokensAfterShutdown(uint256,uint256,uint256,uint256)"(
      nftTokenID: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxLiquidityDecreasePerPeriod(
      decreasePortion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxLiquidityDecreasePerPeriod(uint256)"(
      decreasePortion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinCoinLiquidityPerPosition(
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinCoinLiquidityPerPosition(uint128)"(
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinCollateralPoolLiquidity(
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinCollateralPoolLiquidity(uint256)"(
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinLiquidationRatio(
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinLiquidationRatio(uint256)"(
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinTotalReferencePoolLiquidity(
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinTotalReferencePoolLiquidity(uint256)"(
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceUpdateTwapDuration(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPriceUpdateTwapDuration(uint32)"(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardsPortions(
      _protocol: BigNumberish,
      _collateral: BigNumberish,
      _reference: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRewardsPortions(uint256,uint256,uint256)"(
      _protocol: BigNumberish,
      _collateral: BigNumberish,
      _reference: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimePeriodOfOutOfRangeRewardsToReceive(
      timePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTimePeriodOfOutOfRangeRewardsToReceive(uint64)"(
      timePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stop(overrides?: CallOverrides): Promise<void>;

    "stop()"(overrides?: CallOverrides): Promise<void>;

    stopped(overrides?: CallOverrides): Promise<boolean>;

    "stopped()"(overrides?: CallOverrides): Promise<boolean>;

    systemNotifyNewPriceInfo(
      pool: string,
      liquidityPerCoin: BigNumberish,
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "systemNotifyNewPriceInfo(address,uint256,int24)"(
      pool: string,
      liquidityPerCoin: BigNumberish,
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    timePeriodOfOutOfRangeRewardsToReceive(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "timePeriodOfOutOfRangeRewardsToReceive()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockNFTFromLiquidityPosition(
      nftTokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unlockNFTFromLiquidityPosition(uint256)"(
      nftTokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStalePrice(pool: string, overrides?: CallOverrides): Promise<void>;

    "updateStalePrice(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    AddReferencePool(
      pool: string | null
    ): TypedEventFilter<[string], { pool: string }>;

    Initialized(
      governor: string | null
    ): TypedEventFilter<[string], { governor: string }>;

    MaxLiquidityDecreasePerPeriod(
      decreasePortion: null
    ): TypedEventFilter<[BigNumber], { decreasePortion: BigNumber }>;

    MinCoinLiquidityPerPosition(
      minCoinLiquidityPerPosition: null
    ): TypedEventFilter<
      [BigNumber],
      { minCoinLiquidityPerPosition: BigNumber }
    >;

    MinCollateralPoolLiquidity(
      min: null
    ): TypedEventFilter<[BigNumber], { min: BigNumber }>;

    MinLiquidationRatio(
      min: null
    ): TypedEventFilter<[BigNumber], { min: BigNumber }>;

    MinTotalReferencePoolLiquidity(
      min: null
    ): TypedEventFilter<[BigNumber], { min: BigNumber }>;

    PoolTokensUnlocked(
      sender: string | null,
      pool: string | null,
      count: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; pool: string; count: BigNumber }
    >;

    PositionLocked(
      nftID: BigNumberish | null,
      pool: string | null,
      liquidity: null,
      tickLower: null,
      tickUpper: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, number, number],
      {
        nftID: BigNumber;
        pool: string;
        liquidity: BigNumber;
        tickLower: number;
        tickUpper: number;
      }
    >;

    PriceUpdateTwapDuration(
      duration: null
    ): TypedEventFilter<[number], { duration: number }>;

    RemoveReferencePool(
      pool: string | null
    ): TypedEventFilter<[string], { pool: string }>;

    RewardsAccrued(
      count: null,
      periods: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { count: BigNumber; periods: BigNumber }
    >;

    RewardsDistributed(
      account: string | null,
      period: BigNumberish | null,
      cnpRewards: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; period: BigNumber; cnpRewards: BigNumber }
    >;

    RewardsPortions(
      protocolPortion: null,
      collateralPortion: null,
      referencePortion: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        protocolPortion: BigNumber;
        collateralPortion: BigNumber;
        referencePortion: BigNumber;
      }
    >;

    ShutdownPoolTokensUnlocked(
      sender: string | null,
      pool: string | null,
      count: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; pool: string; count: BigNumber }
    >;

    Stopped(): TypedEventFilter<[], {}>;

    TimePeriodOfOutOfRangeRewardsToReceive(
      timePeriod: null
    ): TypedEventFilter<[BigNumber], { timePeriod: BigNumber }>;
  };

  estimateGas: {
    accrueRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "accrueRewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowRewardsPortion()"(overrides?: CallOverrides): Promise<BigNumber>;

    burnNFTFromLiquidityPositionAndRetrieveTokens(
      nftTokenID: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "burnNFTFromLiquidityPositionAndRetrieveTokens(uint256,uint256,uint256,uint256)"(
      nftTokenID: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRewards(
      nftTokenID: BigNumberish,
      collectInflationRewards: boolean,
      collectTradingFees: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimRewards(uint256,bool,bool)"(
      nftTokenID: BigNumberish,
      collectInflationRewards: boolean,
      collectTradingFees: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collateralPool(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    collateralPoolRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralPoolRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeSetup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "completeSetup()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createNewNFTAndLockIntoLiquidityPosition(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount: BigNumberish;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
      },
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createNewNFTAndLockIntoLiquidityPosition((address,address,uint24,int24,int24,uint128,uint256,uint256,address,uint256),(uint8,bytes32,bytes32))"(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount: BigNumberish;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
      },
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    current(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "current(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseLiquidityPosition(
      nftTokenID: BigNumberish,
      amount: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "decreaseLiquidityPosition(uint256,uint128,uint256,uint256,uint256)"(
      nftTokenID: BigNumberish,
      amount: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    "deployer()"(overrides?: CallOverrides): Promise<BigNumber>;

    firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseLiquidityPosition(
      nftTokenID: BigNumberish,
      amount: BigNumberish,
      amount0Max: BigNumberish,
      amount1Max: BigNumberish,
      deadline: BigNumberish,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "increaseLiquidityPosition(uint256,uint128,uint256,uint256,uint256,(uint8,bytes32,bytes32))"(
      nftTokenID: BigNumberish,
      amount: BigNumberish,
      amount0Max: BigNumberish,
      amount1Max: BigNumberish,
      deadline: BigNumberish,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastPeriodGlobalRewardsAccrued(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastPeriodGlobalRewardsAccrued()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockNFTIntoLiquidityPosition(
      nftTokenID: BigNumberish,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockNFTIntoLiquidityPosition(uint256,(uint8,bytes32,bytes32))"(
      nftTokenID: BigNumberish,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxDebtSupported(overrides?: CallOverrides): Promise<BigNumber>;

    "maxDebtSupported()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxDebtSupportedByPool(
      poolID: BigNumberish,
      minLiquidityRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maxDebtSupportedByPool(uint16,uint256)"(
      poolID: BigNumberish,
      minLiquidityRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxLiquidityDecreasePerPeriod(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maxLiquidityDecreasePerPeriod()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minCoinLiquidityPerPosition(overrides?: CallOverrides): Promise<BigNumber>;

    "minCoinLiquidityPerPosition()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minCollateralPoolLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    "minCollateralPoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minLiquidationRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "minLiquidationRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    minLiquidityByPeriod(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minLiquidityByPeriod(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minTotalReferencePoolLiquidity(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minTotalReferencePoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    pointOutOutofRangePositions(
      pool: string,
      nftTokenIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pointOutOutofRangePositions(address,uint256[])"(
      pool: string,
      nftTokenIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    poolForPoolID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolForPoolID(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolIDForPool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "poolIDForPool(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceUpdateTwapDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "priceUpdateTwapDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    protocolPool(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    protocolPoolRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolPoolRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referencePoolRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "referencePoolRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referencePools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "referencePools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retrieveLiquidityTokensAfterShutdown(
      nftTokenID: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "retrieveLiquidityTokensAfterShutdown(uint256,uint256,uint256,uint256)"(
      nftTokenID: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxLiquidityDecreasePerPeriod(
      decreasePortion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMaxLiquidityDecreasePerPeriod(uint256)"(
      decreasePortion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinCoinLiquidityPerPosition(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMinCoinLiquidityPerPosition(uint128)"(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinCollateralPoolLiquidity(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMinCollateralPoolLiquidity(uint256)"(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinLiquidationRatio(
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMinLiquidationRatio(uint256)"(
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinTotalReferencePoolLiquidity(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMinTotalReferencePoolLiquidity(uint256)"(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceUpdateTwapDuration(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPriceUpdateTwapDuration(uint32)"(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardsPortions(
      _protocol: BigNumberish,
      _collateral: BigNumberish,
      _reference: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRewardsPortions(uint256,uint256,uint256)"(
      _protocol: BigNumberish,
      _collateral: BigNumberish,
      _reference: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTimePeriodOfOutOfRangeRewardsToReceive(
      timePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTimePeriodOfOutOfRangeRewardsToReceive(uint64)"(
      timePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stop()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    "stopped()"(overrides?: CallOverrides): Promise<BigNumber>;

    systemNotifyNewPriceInfo(
      pool: string,
      liquidityPerCoin: BigNumberish,
      tick: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "systemNotifyNewPriceInfo(address,uint256,int24)"(
      pool: string,
      liquidityPerCoin: BigNumberish,
      tick: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timePeriodOfOutOfRangeRewardsToReceive(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "timePeriodOfOutOfRangeRewardsToReceive()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockNFTFromLiquidityPosition(
      nftTokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unlockNFTFromLiquidityPosition(uint256)"(
      nftTokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStalePrice(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateStalePrice(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accrueRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "accrueRewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowRewardsPortion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "borrowRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnNFTFromLiquidityPositionAndRetrieveTokens(
      nftTokenID: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "burnNFTFromLiquidityPositionAndRetrieveTokens(uint256,uint256,uint256,uint256)"(
      nftTokenID: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRewards(
      nftTokenID: BigNumberish,
      collectInflationRewards: boolean,
      collectTradingFees: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimRewards(uint256,bool,bool)"(
      nftTokenID: BigNumberish,
      collectInflationRewards: boolean,
      collectTradingFees: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collateralPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "collateralPool()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralPoolRewardsPortion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateralPoolRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeSetup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "completeSetup()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createNewNFTAndLockIntoLiquidityPosition(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount: BigNumberish;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
      },
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createNewNFTAndLockIntoLiquidityPosition((address,address,uint24,int24,int24,uint128,uint256,uint256,address,uint256),(uint8,bytes32,bytes32))"(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount: BigNumberish;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
      },
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    current(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "current(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseLiquidityPosition(
      nftTokenID: BigNumberish,
      amount: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "decreaseLiquidityPosition(uint256,uint128,uint256,uint256,uint256)"(
      nftTokenID: BigNumberish,
      amount: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deployer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    firstPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseLiquidityPosition(
      nftTokenID: BigNumberish,
      amount: BigNumberish,
      amount0Max: BigNumberish,
      amount1Max: BigNumberish,
      deadline: BigNumberish,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "increaseLiquidityPosition(uint256,uint128,uint256,uint256,uint256,(uint8,bytes32,bytes32))"(
      nftTokenID: BigNumberish,
      amount: BigNumberish,
      amount0Max: BigNumberish,
      amount1Max: BigNumberish,
      deadline: BigNumberish,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastPeriodGlobalRewardsAccrued(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastPeriodGlobalRewardsAccrued()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockNFTIntoLiquidityPosition(
      nftTokenID: BigNumberish,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockNFTIntoLiquidityPosition(uint256,(uint8,bytes32,bytes32))"(
      nftTokenID: BigNumberish,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxDebtSupported(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxDebtSupported()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxDebtSupportedByPool(
      poolID: BigNumberish,
      minLiquidityRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxDebtSupportedByPool(uint16,uint256)"(
      poolID: BigNumberish,
      minLiquidityRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxLiquidityDecreasePerPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxLiquidityDecreasePerPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minCoinLiquidityPerPosition(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minCoinLiquidityPerPosition()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minCollateralPoolLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minCollateralPoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minLiquidationRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minLiquidationRatio()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minLiquidityByPeriod(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minLiquidityByPeriod(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minTotalReferencePoolLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minTotalReferencePoolLiquidity()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "periodLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pointOutOutofRangePositions(
      pool: string,
      nftTokenIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pointOutOutofRangePositions(address,uint256[])"(
      pool: string,
      nftTokenIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    poolForPoolID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolForPoolID(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolIDForPool(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolIDForPool(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceUpdateTwapDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceUpdateTwapDuration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "protocolPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolPoolRewardsPortion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "protocolPoolRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referencePoolRewardsPortion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "referencePoolRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referencePools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "referencePools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retrieveLiquidityTokensAfterShutdown(
      nftTokenID: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "retrieveLiquidityTokensAfterShutdown(uint256,uint256,uint256,uint256)"(
      nftTokenID: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxLiquidityDecreasePerPeriod(
      decreasePortion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMaxLiquidityDecreasePerPeriod(uint256)"(
      decreasePortion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinCoinLiquidityPerPosition(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMinCoinLiquidityPerPosition(uint128)"(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinCollateralPoolLiquidity(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMinCollateralPoolLiquidity(uint256)"(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinLiquidationRatio(
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMinLiquidationRatio(uint256)"(
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinTotalReferencePoolLiquidity(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMinTotalReferencePoolLiquidity(uint256)"(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceUpdateTwapDuration(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPriceUpdateTwapDuration(uint32)"(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardsPortions(
      _protocol: BigNumberish,
      _collateral: BigNumberish,
      _reference: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRewardsPortions(uint256,uint256,uint256)"(
      _protocol: BigNumberish,
      _collateral: BigNumberish,
      _reference: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTimePeriodOfOutOfRangeRewardsToReceive(
      timePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTimePeriodOfOutOfRangeRewardsToReceive(uint64)"(
      timePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stop()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stopped()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    systemNotifyNewPriceInfo(
      pool: string,
      liquidityPerCoin: BigNumberish,
      tick: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "systemNotifyNewPriceInfo(address,uint256,int24)"(
      pool: string,
      liquidityPerCoin: BigNumberish,
      tick: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timePeriodOfOutOfRangeRewardsToReceive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "timePeriodOfOutOfRangeRewardsToReceive()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockNFTFromLiquidityPosition(
      nftTokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unlockNFTFromLiquidityPosition(uint256)"(
      nftTokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStalePrice(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateStalePrice(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validUpdate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
