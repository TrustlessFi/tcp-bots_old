/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IEnforcedDecentralizationInterface extends ethers.utils.Interface {
  functions: {
    "validateAction(string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "validateAction",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "validateAction",
    data: BytesLike
  ): Result;

  events: {
    "UpdateLockDelayed(uint64,uint8)": EventFragment;
    "UpgradeLockDelayed(uint64,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "UpdateLockDelayed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeLockDelayed"): EventFragment;
}

export class IEnforcedDecentralization extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IEnforcedDecentralizationInterface;

  functions: {
    validateAction(
      signature: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "validateAction(string)"(
      signature: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;
  };

  validateAction(signature: string, overrides?: CallOverrides): Promise<void>;

  "validateAction(string)"(
    signature: string,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    validateAction(signature: string, overrides?: CallOverrides): Promise<void>;

    "validateAction(string)"(
      signature: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    UpdateLockDelayed(locktime: null, delaysRemaining: null): EventFilter;

    UpgradeLockDelayed(locktime: null, delaysRemaining: null): EventFilter;
  };

  estimateGas: {
    validateAction(
      signature: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validateAction(string)"(
      signature: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    validateAction(
      signature: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validateAction(string)"(
      signature: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
