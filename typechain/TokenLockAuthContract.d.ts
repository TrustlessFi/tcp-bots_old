/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TokenLockAuthContractInterface extends ethers.utils.Interface {
  functions: {
    "NAME()": FunctionFragment;
    "abdicateTokenExtraction()": FunctionFragment;
    "authenticator()": FunctionFragment;
    "canExtractTokens()": FunctionFragment;
    "chainID()": FunctionFragment;
    "extendDeadline(uint40)": FunctionFragment;
    "extractTokens(address,uint256)": FunctionFragment;
    "getMessage(address,uint256)": FunctionFragment;
    "guardian()": FunctionFragment;
    "lastBlock()": FunctionFragment;
    "retreiveTokens(tuple,uint256)": FunctionFragment;
    "tokenMinter()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "abdicateTokenExtraction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authenticator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canExtractTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "chainID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "extendDeadline",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "extractTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessage",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "guardian", values?: undefined): string;
  encodeFunctionData(functionFragment: "lastBlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "retreiveTokens",
    values: [{ v: BigNumberish; r: BytesLike; s: BytesLike }, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMinter",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "abdicateTokenExtraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authenticator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canExtractTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extendDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extractTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMessage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guardian", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "retreiveTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenMinter",
    data: BytesLike
  ): Result;

  events: {
    "BlockDeadlineSet(uint64)": EventFragment;
    "TokensDistributed(address,uint256)": EventFragment;
    "TokensExtracted(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BlockDeadlineSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensExtracted"): EventFragment;
}

export class TokenLockAuthContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TokenLockAuthContractInterface;

  functions: {
    NAME(overrides?: CallOverrides): Promise<[string]>;

    abdicateTokenExtraction(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authenticator(overrides?: CallOverrides): Promise<[string]>;

    canExtractTokens(overrides?: CallOverrides): Promise<[boolean]>;

    chainID(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _chainID: BigNumber }>;

    extendDeadline(
      newLastBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    extractTokens(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMessage(
      userAddress: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    guardian(overrides?: CallOverrides): Promise<[string]>;

    lastBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    retreiveTokens(
      auth: { v: BigNumberish; r: BytesLike; s: BytesLike },
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenMinter(overrides?: CallOverrides): Promise<[string]>;
  };

  NAME(overrides?: CallOverrides): Promise<string>;

  abdicateTokenExtraction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authenticator(overrides?: CallOverrides): Promise<string>;

  canExtractTokens(overrides?: CallOverrides): Promise<boolean>;

  chainID(overrides?: CallOverrides): Promise<BigNumber>;

  extendDeadline(
    newLastBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  extractTokens(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMessage(
    userAddress: string,
    count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  guardian(overrides?: CallOverrides): Promise<string>;

  lastBlock(overrides?: CallOverrides): Promise<BigNumber>;

  retreiveTokens(
    auth: { v: BigNumberish; r: BytesLike; s: BytesLike },
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenMinter(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>;

    abdicateTokenExtraction(overrides?: CallOverrides): Promise<void>;

    authenticator(overrides?: CallOverrides): Promise<string>;

    canExtractTokens(overrides?: CallOverrides): Promise<boolean>;

    chainID(overrides?: CallOverrides): Promise<BigNumber>;

    extendDeadline(
      newLastBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    extractTokens(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getMessage(
      userAddress: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    guardian(overrides?: CallOverrides): Promise<string>;

    lastBlock(overrides?: CallOverrides): Promise<BigNumber>;

    retreiveTokens(
      auth: { v: BigNumberish; r: BytesLike; s: BytesLike },
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenMinter(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    BlockDeadlineSet(
      lastBlock?: null
    ): TypedEventFilter<[BigNumber], { lastBlock: BigNumber }>;

    TokensDistributed(
      receiver?: string | null,
      count?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { receiver: string; count: BigNumber }
    >;

    TokensExtracted(
      receiver?: string | null,
      count?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { receiver: string; count: BigNumber }
    >;
  };

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    abdicateTokenExtraction(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authenticator(overrides?: CallOverrides): Promise<BigNumber>;

    canExtractTokens(overrides?: CallOverrides): Promise<BigNumber>;

    chainID(overrides?: CallOverrides): Promise<BigNumber>;

    extendDeadline(
      newLastBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    extractTokens(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMessage(
      userAddress: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<BigNumber>;

    lastBlock(overrides?: CallOverrides): Promise<BigNumber>;

    retreiveTokens(
      auth: { v: BigNumberish; r: BytesLike; s: BytesLike },
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenMinter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    abdicateTokenExtraction(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authenticator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canExtractTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extendDeadline(
      newLastBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    extractTokens(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMessage(
      userAddress: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    retreiveTokens(
      auth: { v: BigNumberish; r: BytesLike; s: BytesLike },
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenMinter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
