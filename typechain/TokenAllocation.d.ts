/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TokenAllocationInterface extends ethers.utils.Interface {
  functions: {
    "accept()": FunctionFragment;
    "accepted()": FunctionFragment;
    "allocatee()": FunctionFragment;
    "allocationCount()": FunctionFragment;
    "allocationPurposeExplanation()": FunctionFragment;
    "available()": FunctionFragment;
    "burnTokensForEmergencyShutdown(uint256)": FunctionFragment;
    "claim(uint256)": FunctionFragment;
    "claimed()": FunctionFragment;
    "cnp()": FunctionFragment;
    "delegate()": FunctionFragment;
    "endTime()": FunctionFragment;
    "governor()": FunctionFragment;
    "id()": FunctionFragment;
    "stakeTokensForSettlementPrice(uint256)": FunctionFragment;
    "startTime()": FunctionFragment;
    "sweep()": FunctionFragment;
    "unstakeTokensForSettlementPrice(address,uint64)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "accept", values?: undefined): string;
  encodeFunctionData(functionFragment: "accepted", values?: undefined): string;
  encodeFunctionData(functionFragment: "allocatee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allocationCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allocationPurposeExplanation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "available", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burnTokensForEmergencyShutdown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "claimed", values?: undefined): string;
  encodeFunctionData(functionFragment: "cnp", values?: undefined): string;
  encodeFunctionData(functionFragment: "delegate", values?: undefined): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "id", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakeTokensForSettlementPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "sweep", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstakeTokensForSettlementPrice",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "accept", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "accepted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allocatee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allocationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocationPurposeExplanation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "available", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnTokensForEmergencyShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cnp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "id", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeTokensForSettlementPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeTokensForSettlementPrice",
    data: BytesLike
  ): Result;

  events: {
    "Accepted()": EventFragment;
    "Claimed(uint256,uint256)": EventFragment;
    "EmergencyShutdownTokensBurned(address,uint256)": EventFragment;
    "Initialized()": EventFragment;
    "StakedTokens(address,uint256)": EventFragment;
    "Sweeped(uint256)": EventFragment;
    "UnstakedTokens(address,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Accepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EmergencyShutdownTokensBurned"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakedTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sweeped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakedTokens"): EventFragment;
}

export class TokenAllocation extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TokenAllocationInterface;

  functions: {
    accept(overrides?: Overrides): Promise<ContractTransaction>;

    "accept()"(overrides?: Overrides): Promise<ContractTransaction>;

    accepted(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "accepted()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    allocatee(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "allocatee()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    allocationCount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allocationCount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    allocationPurposeExplanation(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "allocationPurposeExplanation()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    available(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "available()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    burnTokensForEmergencyShutdown(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burnTokensForEmergencyShutdown(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claim(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claim(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimed(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "claimed()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    cnp(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "cnp()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    delegate(overrides?: Overrides): Promise<ContractTransaction>;

    "delegate()"(overrides?: Overrides): Promise<ContractTransaction>;

    endTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "endTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    governor(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "governor()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    id(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "id()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    stakeTokensForSettlementPrice(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stakeTokensForSettlementPrice(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    startTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "startTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    sweep(overrides?: Overrides): Promise<ContractTransaction>;

    "sweep()"(overrides?: Overrides): Promise<ContractTransaction>;

    unstakeTokensForSettlementPrice(
      settlement: string,
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unstakeTokensForSettlementPrice(address,uint64)"(
      settlement: string,
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  accept(overrides?: Overrides): Promise<ContractTransaction>;

  "accept()"(overrides?: Overrides): Promise<ContractTransaction>;

  accepted(overrides?: CallOverrides): Promise<boolean>;

  "accepted()"(overrides?: CallOverrides): Promise<boolean>;

  allocatee(overrides?: CallOverrides): Promise<string>;

  "allocatee()"(overrides?: CallOverrides): Promise<string>;

  allocationCount(overrides?: CallOverrides): Promise<BigNumber>;

  "allocationCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  allocationPurposeExplanation(overrides?: CallOverrides): Promise<string>;

  "allocationPurposeExplanation()"(overrides?: CallOverrides): Promise<string>;

  available(overrides?: CallOverrides): Promise<BigNumber>;

  "available()"(overrides?: CallOverrides): Promise<BigNumber>;

  burnTokensForEmergencyShutdown(
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burnTokensForEmergencyShutdown(uint256)"(
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claim(
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claim(uint256)"(
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimed(overrides?: CallOverrides): Promise<BigNumber>;

  "claimed()"(overrides?: CallOverrides): Promise<BigNumber>;

  cnp(overrides?: CallOverrides): Promise<string>;

  "cnp()"(overrides?: CallOverrides): Promise<string>;

  delegate(overrides?: Overrides): Promise<ContractTransaction>;

  "delegate()"(overrides?: Overrides): Promise<ContractTransaction>;

  endTime(overrides?: CallOverrides): Promise<BigNumber>;

  "endTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  id(overrides?: CallOverrides): Promise<BigNumber>;

  "id()"(overrides?: CallOverrides): Promise<BigNumber>;

  stakeTokensForSettlementPrice(
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stakeTokensForSettlementPrice(uint256)"(
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  "startTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  sweep(overrides?: Overrides): Promise<ContractTransaction>;

  "sweep()"(overrides?: Overrides): Promise<ContractTransaction>;

  unstakeTokensForSettlementPrice(
    settlement: string,
    period: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unstakeTokensForSettlementPrice(address,uint64)"(
    settlement: string,
    period: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    accept(overrides?: CallOverrides): Promise<void>;

    "accept()"(overrides?: CallOverrides): Promise<void>;

    accepted(overrides?: CallOverrides): Promise<boolean>;

    "accepted()"(overrides?: CallOverrides): Promise<boolean>;

    allocatee(overrides?: CallOverrides): Promise<string>;

    "allocatee()"(overrides?: CallOverrides): Promise<string>;

    allocationCount(overrides?: CallOverrides): Promise<BigNumber>;

    "allocationCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    allocationPurposeExplanation(overrides?: CallOverrides): Promise<string>;

    "allocationPurposeExplanation()"(
      overrides?: CallOverrides
    ): Promise<string>;

    available(overrides?: CallOverrides): Promise<BigNumber>;

    "available()"(overrides?: CallOverrides): Promise<BigNumber>;

    burnTokensForEmergencyShutdown(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burnTokensForEmergencyShutdown(uint256)"(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(count: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "claim(uint256)"(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimed(overrides?: CallOverrides): Promise<BigNumber>;

    "claimed()"(overrides?: CallOverrides): Promise<BigNumber>;

    cnp(overrides?: CallOverrides): Promise<string>;

    "cnp()"(overrides?: CallOverrides): Promise<string>;

    delegate(overrides?: CallOverrides): Promise<void>;

    "delegate()"(overrides?: CallOverrides): Promise<void>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    "endTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    "id()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakeTokensForSettlementPrice(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "stakeTokensForSettlementPrice(uint256)"(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    "startTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    sweep(overrides?: CallOverrides): Promise<void>;

    "sweep()"(overrides?: CallOverrides): Promise<void>;

    unstakeTokensForSettlementPrice(
      settlement: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unstakeTokensForSettlementPrice(address,uint64)"(
      settlement: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Accepted(): EventFilter;

    Claimed(count: null, available: null): EventFilter;

    EmergencyShutdownTokensBurned(
      governor: string | null,
      count: null
    ): EventFilter;

    Initialized(): EventFilter;

    StakedTokens(settlement: string | null, count: null): EventFilter;

    Sweeped(count: null): EventFilter;

    UnstakedTokens(
      settlement: string | null,
      period: BigNumberish | null
    ): EventFilter;
  };

  estimateGas: {
    accept(overrides?: Overrides): Promise<BigNumber>;

    "accept()"(overrides?: Overrides): Promise<BigNumber>;

    accepted(overrides?: CallOverrides): Promise<BigNumber>;

    "accepted()"(overrides?: CallOverrides): Promise<BigNumber>;

    allocatee(overrides?: CallOverrides): Promise<BigNumber>;

    "allocatee()"(overrides?: CallOverrides): Promise<BigNumber>;

    allocationCount(overrides?: CallOverrides): Promise<BigNumber>;

    "allocationCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    allocationPurposeExplanation(overrides?: CallOverrides): Promise<BigNumber>;

    "allocationPurposeExplanation()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    available(overrides?: CallOverrides): Promise<BigNumber>;

    "available()"(overrides?: CallOverrides): Promise<BigNumber>;

    burnTokensForEmergencyShutdown(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burnTokensForEmergencyShutdown(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claim(count: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "claim(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimed(overrides?: CallOverrides): Promise<BigNumber>;

    "claimed()"(overrides?: CallOverrides): Promise<BigNumber>;

    cnp(overrides?: CallOverrides): Promise<BigNumber>;

    "cnp()"(overrides?: CallOverrides): Promise<BigNumber>;

    delegate(overrides?: Overrides): Promise<BigNumber>;

    "delegate()"(overrides?: Overrides): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    "endTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    "id()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakeTokensForSettlementPrice(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "stakeTokensForSettlementPrice(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    "startTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    sweep(overrides?: Overrides): Promise<BigNumber>;

    "sweep()"(overrides?: Overrides): Promise<BigNumber>;

    unstakeTokensForSettlementPrice(
      settlement: string,
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unstakeTokensForSettlementPrice(address,uint64)"(
      settlement: string,
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accept(overrides?: Overrides): Promise<PopulatedTransaction>;

    "accept()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    accepted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accepted()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allocatee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "allocatee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allocationCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "allocationCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allocationPurposeExplanation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allocationPurposeExplanation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    available(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "available()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnTokensForEmergencyShutdown(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burnTokensForEmergencyShutdown(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claim(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claim(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "claimed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cnp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cnp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegate(overrides?: Overrides): Promise<PopulatedTransaction>;

    "delegate()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    endTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "endTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "id()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeTokensForSettlementPrice(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stakeTokensForSettlementPrice(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sweep(overrides?: Overrides): Promise<PopulatedTransaction>;

    "sweep()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    unstakeTokensForSettlementPrice(
      settlement: string,
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unstakeTokensForSettlementPrice(address,uint64)"(
      settlement: string,
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
