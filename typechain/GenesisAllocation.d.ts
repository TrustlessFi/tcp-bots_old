/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface GenesisAllocationInterface extends ethers.utils.Interface {
  functions: {
    "NAME()": FunctionFragment;
    "abdicateTokenRemoval()": FunctionFragment;
    "authenticator()": FunctionFragment;
    "canRemoveTokens()": FunctionFragment;
    "chainID()": FunctionFragment;
    "claimedTokens(uint8,bytes32,bytes32)": FunctionFragment;
    "dao()": FunctionFragment;
    "deadline()": FunctionFragment;
    "extendDeadline(uint40)": FunctionFragment;
    "getMessage(address,uint256)": FunctionFragment;
    "guardian()": FunctionFragment;
    "removeTokens(address,uint256)": FunctionFragment;
    "retreiveTokens(tuple,uint256,uint256,uint8)": FunctionFragment;
    "token()": FunctionFragment;
    "tokenMinter()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "abdicateTokenRemoval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authenticator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canRemoveTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "chainID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimedTokens",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "dao", values?: undefined): string;
  encodeFunctionData(functionFragment: "deadline", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "extendDeadline",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessage",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "guardian", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "retreiveTokens",
    values: [
      { v: BigNumberish; r: BytesLike; s: BytesLike },
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenMinter",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "abdicateTokenRemoval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authenticator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canRemoveTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deadline", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extendDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMessage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guardian", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retreiveTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenMinter",
    data: BytesLike
  ): Result;

  events: {
    "DeadlineSet(uint64)": EventFragment;
    "PositionCreated(address,uint8,uint256)": EventFragment;
    "TokensExtracted(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeadlineSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensExtracted"): EventFragment;
}

export class GenesisAllocation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GenesisAllocationInterface;

  functions: {
    NAME(overrides?: CallOverrides): Promise<[string]>;

    abdicateTokenRemoval(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authenticator(overrides?: CallOverrides): Promise<[string]>;

    canRemoveTokens(overrides?: CallOverrides): Promise<[boolean]>;

    chainID(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _chainID: BigNumber }>;

    claimedTokens(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dao(overrides?: CallOverrides): Promise<[string]>;

    deadline(overrides?: CallOverrides): Promise<[BigNumber]>;

    extendDeadline(
      newDeadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMessage(
      userAddress: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    guardian(overrides?: CallOverrides): Promise<[string]>;

    removeTokens(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retreiveTokens(
      auth: { v: BigNumberish; r: BytesLike; s: BytesLike },
      totalGrantCount: BigNumberish,
      countToAllocate: BigNumberish,
      lockDurationMonths: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenMinter(overrides?: CallOverrides): Promise<[string]>;
  };

  NAME(overrides?: CallOverrides): Promise<string>;

  abdicateTokenRemoval(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authenticator(overrides?: CallOverrides): Promise<string>;

  canRemoveTokens(overrides?: CallOverrides): Promise<boolean>;

  chainID(overrides?: CallOverrides): Promise<BigNumber>;

  claimedTokens(
    arg0: BigNumberish,
    arg1: BytesLike,
    arg2: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dao(overrides?: CallOverrides): Promise<string>;

  deadline(overrides?: CallOverrides): Promise<BigNumber>;

  extendDeadline(
    newDeadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMessage(
    userAddress: string,
    count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  guardian(overrides?: CallOverrides): Promise<string>;

  removeTokens(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retreiveTokens(
    auth: { v: BigNumberish; r: BytesLike; s: BytesLike },
    totalGrantCount: BigNumberish,
    countToAllocate: BigNumberish,
    lockDurationMonths: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenMinter(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>;

    abdicateTokenRemoval(overrides?: CallOverrides): Promise<void>;

    authenticator(overrides?: CallOverrides): Promise<string>;

    canRemoveTokens(overrides?: CallOverrides): Promise<boolean>;

    chainID(overrides?: CallOverrides): Promise<BigNumber>;

    claimedTokens(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<string>;

    deadline(overrides?: CallOverrides): Promise<BigNumber>;

    extendDeadline(
      newDeadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getMessage(
      userAddress: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    guardian(overrides?: CallOverrides): Promise<string>;

    removeTokens(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    retreiveTokens(
      auth: { v: BigNumberish; r: BytesLike; s: BytesLike },
      totalGrantCount: BigNumberish,
      countToAllocate: BigNumberish,
      lockDurationMonths: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenMinter(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    DeadlineSet(
      deadline?: null
    ): TypedEventFilter<[BigNumber], { deadline: BigNumber }>;

    PositionCreated(
      receiver?: string | null,
      lockDurationMonths?: BigNumberish | null,
      count?: null
    ): TypedEventFilter<
      [string, number, BigNumber],
      { receiver: string; lockDurationMonths: number; count: BigNumber }
    >;

    TokensExtracted(
      receiver?: string | null,
      count?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { receiver: string; count: BigNumber }
    >;
  };

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    abdicateTokenRemoval(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authenticator(overrides?: CallOverrides): Promise<BigNumber>;

    canRemoveTokens(overrides?: CallOverrides): Promise<BigNumber>;

    chainID(overrides?: CallOverrides): Promise<BigNumber>;

    claimedTokens(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<BigNumber>;

    deadline(overrides?: CallOverrides): Promise<BigNumber>;

    extendDeadline(
      newDeadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMessage(
      userAddress: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<BigNumber>;

    removeTokens(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retreiveTokens(
      auth: { v: BigNumberish; r: BytesLike; s: BytesLike },
      totalGrantCount: BigNumberish,
      countToAllocate: BigNumberish,
      lockDurationMonths: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenMinter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    abdicateTokenRemoval(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authenticator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canRemoveTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimedTokens(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deadline(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extendDeadline(
      newDeadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMessage(
      userAddress: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeTokens(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retreiveTokens(
      auth: { v: BigNumberish; r: BytesLike; s: BytesLike },
      totalGrantCount: BigNumberish,
      countToAllocate: BigNumberish,
      lockDurationMonths: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenMinter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
