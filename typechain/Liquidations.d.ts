/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LiquidationsInterface extends ethers.utils.Interface {
  functions: {
    "completeSetup()": FunctionFragment;
    "coverUnbackedDebt()": FunctionFragment;
    "discoverUndercollateralizedPositions(uint64[])": FunctionFragment;
    "discoveryIncentive()": FunctionFragment;
    "flashLiquidate(uint256)": FunctionFragment;
    "governor()": FunctionFragment;
    "init(address)": FunctionFragment;
    "liquidate(uint256)": FunctionFragment;
    "liquidationIncentive()": FunctionFragment;
    "maxPriceAge()": FunctionFragment;
    "maxRewardsRatio()": FunctionFragment;
    "maxTwapTime()": FunctionFragment;
    "minLiquidationIncentive()": FunctionFragment;
    "rewardsLimit()": FunctionFragment;
    "setDiscoveryIncentive(uint256)": FunctionFragment;
    "setLiquidationIncentive(uint256)": FunctionFragment;
    "setMaxPriceAge(uint64)": FunctionFragment;
    "setMaxRewardsRatio(uint256)": FunctionFragment;
    "setMaxTwapTime(uint64)": FunctionFragment;
    "setMinLiquidationIncentive(uint256)": FunctionFragment;
    "stop()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "completeSetup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coverUnbackedDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "discoverUndercollateralizedPositions",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "discoveryIncentive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flashLiquidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationIncentive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPriceAge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxRewardsRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTwapTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minLiquidationIncentive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDiscoveryIncentive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationIncentive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPriceAge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxRewardsRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTwapTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinLiquidationIncentive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "completeSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coverUnbackedDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "discoverUndercollateralizedPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "discoveryIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPriceAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxRewardsRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTwapTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minLiquidationIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDiscoveryIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPriceAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxRewardsRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTwapTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinLiquidationIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;

  events: {
    "CoveredUnbackedDebt(uint256,uint256,uint256)": EventFragment;
    "Initialized(address)": EventFragment;
    "Liquidated(uint256,bool)": EventFragment;
    "ParameterUpdated(string,uint256)": EventFragment;
    "ParameterUpdated64(string,uint64)": EventFragment;
    "Stopped()": EventFragment;
    "UndercollatPositionDiscovered(uint64,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CoveredUnbackedDebt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated64"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stopped"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UndercollatPositionDiscovered"
  ): EventFragment;
}

export class Liquidations extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LiquidationsInterface;

  functions: {
    completeSetup(overrides?: Overrides): Promise<ContractTransaction>;

    "completeSetup()"(overrides?: Overrides): Promise<ContractTransaction>;

    coverUnbackedDebt(overrides?: Overrides): Promise<ContractTransaction>;

    "coverUnbackedDebt()"(overrides?: Overrides): Promise<ContractTransaction>;

    discoverUndercollateralizedPositions(
      positionIDs: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "discoverUndercollateralizedPositions(uint64[])"(
      positionIDs: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    discoveryIncentive(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "discoveryIncentive()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    flashLiquidate(
      baseTokensToRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "flashLiquidate(uint256)"(
      baseTokensToRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    governor(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "governor()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    init(
      governor_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address)"(
      governor_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidate(
      baseTokensToRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "liquidate(uint256)"(
      baseTokensToRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidationIncentive(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "liquidationIncentive()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    maxPriceAge(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "maxPriceAge()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    maxRewardsRatio(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "maxRewardsRatio()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    maxTwapTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "maxTwapTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    minLiquidationIncentive(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "minLiquidationIncentive()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    rewardsLimit(
      overrides?: CallOverrides
    ): Promise<{
      remaining: BigNumber;
      priceTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "rewardsLimit()"(
      overrides?: CallOverrides
    ): Promise<{
      remaining: BigNumber;
      priceTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    setDiscoveryIncentive(
      incentive: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDiscoveryIncentive(uint256)"(
      incentive: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLiquidationIncentive(
      incentive: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLiquidationIncentive(uint256)"(
      incentive: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxPriceAge(
      age: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxPriceAge(uint64)"(
      age: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxRewardsRatio(
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxRewardsRatio(uint256)"(
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxTwapTime(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxTwapTime(uint64)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinLiquidationIncentive(
      incentive: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinLiquidationIncentive(uint256)"(
      incentive: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stop(overrides?: Overrides): Promise<ContractTransaction>;

    "stop()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  completeSetup(overrides?: Overrides): Promise<ContractTransaction>;

  "completeSetup()"(overrides?: Overrides): Promise<ContractTransaction>;

  coverUnbackedDebt(overrides?: Overrides): Promise<ContractTransaction>;

  "coverUnbackedDebt()"(overrides?: Overrides): Promise<ContractTransaction>;

  discoverUndercollateralizedPositions(
    positionIDs: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "discoverUndercollateralizedPositions(uint64[])"(
    positionIDs: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  discoveryIncentive(overrides?: CallOverrides): Promise<BigNumber>;

  "discoveryIncentive()"(overrides?: CallOverrides): Promise<BigNumber>;

  flashLiquidate(
    baseTokensToRepay: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "flashLiquidate(uint256)"(
    baseTokensToRepay: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  init(governor_: string, overrides?: Overrides): Promise<ContractTransaction>;

  "init(address)"(
    governor_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidate(
    baseTokensToRepay: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "liquidate(uint256)"(
    baseTokensToRepay: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidationIncentive(overrides?: CallOverrides): Promise<BigNumber>;

  "liquidationIncentive()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxPriceAge(overrides?: CallOverrides): Promise<BigNumber>;

  "maxPriceAge()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxRewardsRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "maxRewardsRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxTwapTime(overrides?: CallOverrides): Promise<BigNumber>;

  "maxTwapTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  minLiquidationIncentive(overrides?: CallOverrides): Promise<BigNumber>;

  "minLiquidationIncentive()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewardsLimit(
    overrides?: CallOverrides
  ): Promise<{
    remaining: BigNumber;
    priceTime: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "rewardsLimit()"(
    overrides?: CallOverrides
  ): Promise<{
    remaining: BigNumber;
    priceTime: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  setDiscoveryIncentive(
    incentive: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDiscoveryIncentive(uint256)"(
    incentive: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLiquidationIncentive(
    incentive: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLiquidationIncentive(uint256)"(
    incentive: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxPriceAge(
    age: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxPriceAge(uint64)"(
    age: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxRewardsRatio(
    ratio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxRewardsRatio(uint256)"(
    ratio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxTwapTime(
    time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxTwapTime(uint64)"(
    time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinLiquidationIncentive(
    incentive: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinLiquidationIncentive(uint256)"(
    incentive: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stop(overrides?: Overrides): Promise<ContractTransaction>;

  "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    completeSetup(overrides?: CallOverrides): Promise<void>;

    "completeSetup()"(overrides?: CallOverrides): Promise<void>;

    coverUnbackedDebt(overrides?: CallOverrides): Promise<void>;

    "coverUnbackedDebt()"(overrides?: CallOverrides): Promise<void>;

    discoverUndercollateralizedPositions(
      positionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "discoverUndercollateralizedPositions(uint64[])"(
      positionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    discoveryIncentive(overrides?: CallOverrides): Promise<BigNumber>;

    "discoveryIncentive()"(overrides?: CallOverrides): Promise<BigNumber>;

    flashLiquidate(
      baseTokensToRepay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "flashLiquidate(uint256)"(
      baseTokensToRepay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    init(governor_: string, overrides?: CallOverrides): Promise<void>;

    "init(address)"(
      governor_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidate(
      baseTokensToRepay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "liquidate(uint256)"(
      baseTokensToRepay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidationIncentive(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidationIncentive()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxPriceAge(overrides?: CallOverrides): Promise<BigNumber>;

    "maxPriceAge()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxRewardsRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "maxRewardsRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxTwapTime(overrides?: CallOverrides): Promise<BigNumber>;

    "maxTwapTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    minLiquidationIncentive(overrides?: CallOverrides): Promise<BigNumber>;

    "minLiquidationIncentive()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsLimit(
      overrides?: CallOverrides
    ): Promise<{
      remaining: BigNumber;
      priceTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "rewardsLimit()"(
      overrides?: CallOverrides
    ): Promise<{
      remaining: BigNumber;
      priceTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    setDiscoveryIncentive(
      incentive: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDiscoveryIncentive(uint256)"(
      incentive: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationIncentive(
      incentive: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLiquidationIncentive(uint256)"(
      incentive: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPriceAge(age: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setMaxPriceAge(uint64)"(
      age: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxRewardsRatio(
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxRewardsRatio(uint256)"(
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTwapTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxTwapTime(uint64)"(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinLiquidationIncentive(
      incentive: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinLiquidationIncentive(uint256)"(
      incentive: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stop(overrides?: CallOverrides): Promise<void>;

    "stop()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    CoveredUnbackedDebt(
      price: null,
      positionDebt: null,
      positionCollateral: null
    ): EventFilter;

    Initialized(governor: string | null): EventFilter;

    Liquidated(baseTokensToRepay: null, flash: boolean | null): EventFilter;

    ParameterUpdated(paramName: string | null, value: null): EventFilter;

    ParameterUpdated64(paramName: string | null, value: null): EventFilter;

    Stopped(): EventFilter;

    UndercollatPositionDiscovered(
      positionID: BigNumberish | null,
      debtCount: null,
      collateralCount: null,
      price: null
    ): EventFilter;
  };

  estimateGas: {
    completeSetup(overrides?: Overrides): Promise<BigNumber>;

    "completeSetup()"(overrides?: Overrides): Promise<BigNumber>;

    coverUnbackedDebt(overrides?: Overrides): Promise<BigNumber>;

    "coverUnbackedDebt()"(overrides?: Overrides): Promise<BigNumber>;

    discoverUndercollateralizedPositions(
      positionIDs: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "discoverUndercollateralizedPositions(uint64[])"(
      positionIDs: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    discoveryIncentive(overrides?: CallOverrides): Promise<BigNumber>;

    "discoveryIncentive()"(overrides?: CallOverrides): Promise<BigNumber>;

    flashLiquidate(
      baseTokensToRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "flashLiquidate(uint256)"(
      baseTokensToRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    init(governor_: string, overrides?: Overrides): Promise<BigNumber>;

    "init(address)"(
      governor_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    liquidate(
      baseTokensToRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "liquidate(uint256)"(
      baseTokensToRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    liquidationIncentive(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidationIncentive()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxPriceAge(overrides?: CallOverrides): Promise<BigNumber>;

    "maxPriceAge()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxRewardsRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "maxRewardsRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxTwapTime(overrides?: CallOverrides): Promise<BigNumber>;

    "maxTwapTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    minLiquidationIncentive(overrides?: CallOverrides): Promise<BigNumber>;

    "minLiquidationIncentive()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    setDiscoveryIncentive(
      incentive: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDiscoveryIncentive(uint256)"(
      incentive: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLiquidationIncentive(
      incentive: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLiquidationIncentive(uint256)"(
      incentive: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxPriceAge(
      age: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxPriceAge(uint64)"(
      age: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxRewardsRatio(
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxRewardsRatio(uint256)"(
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxTwapTime(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxTwapTime(uint64)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinLiquidationIncentive(
      incentive: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinLiquidationIncentive(uint256)"(
      incentive: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stop(overrides?: Overrides): Promise<BigNumber>;

    "stop()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    completeSetup(overrides?: Overrides): Promise<PopulatedTransaction>;

    "completeSetup()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    coverUnbackedDebt(overrides?: Overrides): Promise<PopulatedTransaction>;

    "coverUnbackedDebt()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    discoverUndercollateralizedPositions(
      positionIDs: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "discoverUndercollateralizedPositions(uint64[])"(
      positionIDs: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    discoveryIncentive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "discoveryIncentive()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flashLiquidate(
      baseTokensToRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "flashLiquidate(uint256)"(
      baseTokensToRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      governor_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address)"(
      governor_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      baseTokensToRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "liquidate(uint256)"(
      baseTokensToRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liquidationIncentive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liquidationIncentive()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPriceAge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxPriceAge()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRewardsRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxRewardsRatio()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTwapTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxTwapTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minLiquidationIncentive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minLiquidationIncentive()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardsLimit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDiscoveryIncentive(
      incentive: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDiscoveryIncentive(uint256)"(
      incentive: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLiquidationIncentive(
      incentive: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLiquidationIncentive(uint256)"(
      incentive: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxPriceAge(
      age: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxPriceAge(uint64)"(
      age: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxRewardsRatio(
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxRewardsRatio(uint256)"(
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxTwapTime(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxTwapTime(uint64)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinLiquidationIncentive(
      incentive: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinLiquidationIncentive(uint256)"(
      incentive: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stop(overrides?: Overrides): Promise<PopulatedTransaction>;

    "stop()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
