/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AuctionsInterface extends ethers.utils.Interface {
  functions: {
    "batchSize()": FunctionFragment;
    "bidDeficitAuction(uint64,uint256)": FunctionFragment;
    "bidSurplusAuction(uint64,uint256)": FunctionFragment;
    "checkReservesAndStartAuctions()": FunctionFragment;
    "cleanerRewardRatio()": FunctionFragment;
    "cnp()": FunctionFragment;
    "coinToBeBought()": FunctionFragment;
    "coinToBeSold()": FunctionFragment;
    "creatorRewardRatio()": FunctionFragment;
    "deficitAuction(uint64)": FunctionFragment;
    "deficitAuctionCount()": FunctionFragment;
    "deficitAuctionLotSize()": FunctionFragment;
    "deficitAuctionReadyToBeSettled(uint64)": FunctionFragment;
    "extensionPerBid()": FunctionFragment;
    "governor()": FunctionFragment;
    "init(address)": FunctionFragment;
    "lastAuctionCompletionTime()": FunctionFragment;
    "maxAuctionDuration()": FunctionFragment;
    "minAuctionDuration()": FunctionFragment;
    "minAuctionLotSize()": FunctionFragment;
    "minBidDelta()": FunctionFragment;
    "oldestDeficitAuction()": FunctionFragment;
    "oldestSurplusAuction()": FunctionFragment;
    "reservesBufferLowerBound()": FunctionFragment;
    "reservesBufferUpperBound()": FunctionFragment;
    "setBatchSize(uint64)": FunctionFragment;
    "setCleanerRewardRatio(uint256)": FunctionFragment;
    "setCreatorRewardRatio(uint256)": FunctionFragment;
    "setDeficitAuctionLotSize(uint256)": FunctionFragment;
    "setExtensionPerBid(uint64)": FunctionFragment;
    "setMaxAuctionDuration(uint64)": FunctionFragment;
    "setMinAuctionDuration(uint64)": FunctionFragment;
    "setMinAuctionLotSize(uint256)": FunctionFragment;
    "setMinBidDelta(uint256)": FunctionFragment;
    "setReservesBufferLowerBound(uint256)": FunctionFragment;
    "setReservesBufferUpperBound(uint256)": FunctionFragment;
    "setSurplusAuctionLotSize(uint256)": FunctionFragment;
    "settleDeficitAuction(uint64)": FunctionFragment;
    "settleSurplusAuction(uint64)": FunctionFragment;
    "shouldStartAuctions()": FunctionFragment;
    "stop()": FunctionFragment;
    "surplusAuction(uint64)": FunctionFragment;
    "surplusAuctionCount()": FunctionFragment;
    "surplusAuctionLotSize()": FunctionFragment;
    "surplusAuctionReadyToBeSettled(uint64)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "batchSize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bidDeficitAuction",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bidSurplusAuction",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkReservesAndStartAuctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cleanerRewardRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cnp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "coinToBeBought",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coinToBeSold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creatorRewardRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deficitAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deficitAuctionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deficitAuctionLotSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deficitAuctionReadyToBeSettled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "extensionPerBid",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lastAuctionCompletionTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxAuctionDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minAuctionDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minAuctionLotSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBidDelta",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oldestDeficitAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oldestSurplusAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reservesBufferLowerBound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reservesBufferUpperBound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBatchSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCleanerRewardRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreatorRewardRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeficitAuctionLotSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExtensionPerBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxAuctionDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinAuctionDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinAuctionLotSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBidDelta",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReservesBufferLowerBound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReservesBufferUpperBound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSurplusAuctionLotSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleDeficitAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleSurplusAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldStartAuctions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "surplusAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "surplusAuctionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "surplusAuctionLotSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "surplusAuctionReadyToBeSettled",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "batchSize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bidDeficitAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bidSurplusAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkReservesAndStartAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cleanerRewardRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cnp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "coinToBeBought",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coinToBeSold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorRewardRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deficitAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deficitAuctionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deficitAuctionLotSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deficitAuctionReadyToBeSettled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extensionPerBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastAuctionCompletionTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAuctionLotSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBidDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oldestDeficitAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oldestSurplusAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservesBufferLowerBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservesBufferUpperBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBatchSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCleanerRewardRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreatorRewardRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDeficitAuctionLotSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExtensionPerBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinAuctionLotSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinBidDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReservesBufferLowerBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReservesBufferUpperBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSurplusAuctionLotSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleDeficitAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleSurplusAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldStartAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "surplusAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "surplusAuctionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "surplusAuctionLotSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "surplusAuctionReadyToBeSettled",
    data: BytesLike
  ): Result;

  events: {
    "AuctionBid(bool,uint64,address,uint256)": EventFragment;
    "AuctionSettled(bool,uint64,address,address,address)": EventFragment;
    "AuctionStarted(bool,uint64,uint256,uint64)": EventFragment;
    "Initialized(address)": EventFragment;
    "ParameterUpdated(string,uint256)": EventFragment;
    "ParameterUpdated64(string,uint64)": EventFragment;
    "Stopped()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated64"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stopped"): EventFragment;
}

export class Auctions extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AuctionsInterface;

  functions: {
    batchSize(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "batchSize()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    bidDeficitAuction(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "bidDeficitAuction(uint64,uint256)"(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    bidSurplusAuction(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "bidSurplusAuction(uint64,uint256)"(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    checkReservesAndStartAuctions(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "checkReservesAndStartAuctions()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cleanerRewardRatio(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "cleanerRewardRatio()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    cnp(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "cnp()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    coinToBeBought(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "coinToBeBought()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    coinToBeSold(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "coinToBeSold()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    creatorRewardRatio(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "creatorRewardRatio()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    deficitAuction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      bid: BigNumber;
      count: BigNumber;
      endTime: BigNumber;
      bidder: string;
      maxEndTime: BigNumber;
      creator: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: string;
    }>;

    "deficitAuction(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      bid: BigNumber;
      count: BigNumber;
      endTime: BigNumber;
      bidder: string;
      maxEndTime: BigNumber;
      creator: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: string;
    }>;

    deficitAuctionCount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "deficitAuctionCount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    deficitAuctionLotSize(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "deficitAuctionLotSize()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    deficitAuctionReadyToBeSettled(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      complete: boolean;
      0: boolean;
    }>;

    "deficitAuctionReadyToBeSettled(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      complete: boolean;
      0: boolean;
    }>;

    extensionPerBid(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "extensionPerBid()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    governor(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "governor()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    init(
      governor_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address)"(
      governor_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lastAuctionCompletionTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lastAuctionCompletionTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    maxAuctionDuration(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "maxAuctionDuration()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    minAuctionDuration(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "minAuctionDuration()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    minAuctionLotSize(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "minAuctionLotSize()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    minBidDelta(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "minBidDelta()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    oldestDeficitAuction(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "oldestDeficitAuction()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    oldestSurplusAuction(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "oldestSurplusAuction()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    reservesBufferLowerBound(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "reservesBufferLowerBound()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    reservesBufferUpperBound(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "reservesBufferUpperBound()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    setBatchSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBatchSize(uint64)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCleanerRewardRatio(
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCleanerRewardRatio(uint256)"(
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCreatorRewardRatio(
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCreatorRewardRatio(uint256)"(
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDeficitAuctionLotSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDeficitAuctionLotSize(uint256)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setExtensionPerBid(
      extension: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setExtensionPerBid(uint64)"(
      extension: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxAuctionDuration(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxAuctionDuration(uint64)"(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinAuctionDuration(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinAuctionDuration(uint64)"(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinAuctionLotSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinAuctionLotSize(uint256)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinBidDelta(
      delta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinBidDelta(uint256)"(
      delta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setReservesBufferLowerBound(
      bound: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setReservesBufferLowerBound(uint256)"(
      bound: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setReservesBufferUpperBound(
      bound: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setReservesBufferUpperBound(uint256)"(
      bound: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSurplusAuctionLotSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSurplusAuctionLotSize(uint256)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settleDeficitAuction(
      auctionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "settleDeficitAuction(uint64)"(
      auctionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settleSurplusAuction(
      auctionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "settleSurplusAuction(uint64)"(
      auctionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shouldStartAuctions(
      overrides?: CallOverrides
    ): Promise<{
      surplusAmount: BigNumber;
      deficitAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "shouldStartAuctions()"(
      overrides?: CallOverrides
    ): Promise<{
      surplusAmount: BigNumber;
      deficitAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    stop(overrides?: Overrides): Promise<ContractTransaction>;

    "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

    surplusAuction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      bid: BigNumber;
      count: BigNumber;
      endTime: BigNumber;
      bidder: string;
      maxEndTime: BigNumber;
      creator: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: string;
    }>;

    "surplusAuction(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      bid: BigNumber;
      count: BigNumber;
      endTime: BigNumber;
      bidder: string;
      maxEndTime: BigNumber;
      creator: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: string;
    }>;

    surplusAuctionCount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "surplusAuctionCount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    surplusAuctionLotSize(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "surplusAuctionLotSize()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    surplusAuctionReadyToBeSettled(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      complete: boolean;
      0: boolean;
    }>;

    "surplusAuctionReadyToBeSettled(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      complete: boolean;
      0: boolean;
    }>;
  };

  batchSize(overrides?: CallOverrides): Promise<BigNumber>;

  "batchSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  bidDeficitAuction(
    auctionID: BigNumberish,
    bid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "bidDeficitAuction(uint64,uint256)"(
    auctionID: BigNumberish,
    bid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  bidSurplusAuction(
    auctionID: BigNumberish,
    bid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "bidSurplusAuction(uint64,uint256)"(
    auctionID: BigNumberish,
    bid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  checkReservesAndStartAuctions(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "checkReservesAndStartAuctions()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cleanerRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "cleanerRewardRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  cnp(overrides?: CallOverrides): Promise<string>;

  "cnp()"(overrides?: CallOverrides): Promise<string>;

  coinToBeBought(overrides?: CallOverrides): Promise<BigNumber>;

  "coinToBeBought()"(overrides?: CallOverrides): Promise<BigNumber>;

  coinToBeSold(overrides?: CallOverrides): Promise<BigNumber>;

  "coinToBeSold()"(overrides?: CallOverrides): Promise<BigNumber>;

  creatorRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "creatorRewardRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  deficitAuction(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    bid: BigNumber;
    count: BigNumber;
    endTime: BigNumber;
    bidder: string;
    maxEndTime: BigNumber;
    creator: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: BigNumber;
    5: string;
  }>;

  "deficitAuction(uint64)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    bid: BigNumber;
    count: BigNumber;
    endTime: BigNumber;
    bidder: string;
    maxEndTime: BigNumber;
    creator: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: BigNumber;
    5: string;
  }>;

  deficitAuctionCount(overrides?: CallOverrides): Promise<BigNumber>;

  "deficitAuctionCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  deficitAuctionLotSize(overrides?: CallOverrides): Promise<BigNumber>;

  "deficitAuctionLotSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  deficitAuctionReadyToBeSettled(
    auctionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "deficitAuctionReadyToBeSettled(uint64)"(
    auctionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  extensionPerBid(overrides?: CallOverrides): Promise<BigNumber>;

  "extensionPerBid()"(overrides?: CallOverrides): Promise<BigNumber>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  init(governor_: string, overrides?: Overrides): Promise<ContractTransaction>;

  "init(address)"(
    governor_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lastAuctionCompletionTime(overrides?: CallOverrides): Promise<BigNumber>;

  "lastAuctionCompletionTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

  "maxAuctionDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

  minAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

  "minAuctionDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

  minAuctionLotSize(overrides?: CallOverrides): Promise<BigNumber>;

  "minAuctionLotSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  minBidDelta(overrides?: CallOverrides): Promise<BigNumber>;

  "minBidDelta()"(overrides?: CallOverrides): Promise<BigNumber>;

  oldestDeficitAuction(overrides?: CallOverrides): Promise<BigNumber>;

  "oldestDeficitAuction()"(overrides?: CallOverrides): Promise<BigNumber>;

  oldestSurplusAuction(overrides?: CallOverrides): Promise<BigNumber>;

  "oldestSurplusAuction()"(overrides?: CallOverrides): Promise<BigNumber>;

  reservesBufferLowerBound(overrides?: CallOverrides): Promise<BigNumber>;

  "reservesBufferLowerBound()"(overrides?: CallOverrides): Promise<BigNumber>;

  reservesBufferUpperBound(overrides?: CallOverrides): Promise<BigNumber>;

  "reservesBufferUpperBound()"(overrides?: CallOverrides): Promise<BigNumber>;

  setBatchSize(
    size: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBatchSize(uint64)"(
    size: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCleanerRewardRatio(
    ratio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCleanerRewardRatio(uint256)"(
    ratio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCreatorRewardRatio(
    ratio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCreatorRewardRatio(uint256)"(
    ratio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDeficitAuctionLotSize(
    size: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDeficitAuctionLotSize(uint256)"(
    size: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setExtensionPerBid(
    extension: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setExtensionPerBid(uint64)"(
    extension: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxAuctionDuration(
    duration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxAuctionDuration(uint64)"(
    duration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinAuctionDuration(
    duration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinAuctionDuration(uint64)"(
    duration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinAuctionLotSize(
    size: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinAuctionLotSize(uint256)"(
    size: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinBidDelta(
    delta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinBidDelta(uint256)"(
    delta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setReservesBufferLowerBound(
    bound: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setReservesBufferLowerBound(uint256)"(
    bound: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setReservesBufferUpperBound(
    bound: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setReservesBufferUpperBound(uint256)"(
    bound: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSurplusAuctionLotSize(
    size: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSurplusAuctionLotSize(uint256)"(
    size: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settleDeficitAuction(
    auctionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "settleDeficitAuction(uint64)"(
    auctionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settleSurplusAuction(
    auctionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "settleSurplusAuction(uint64)"(
    auctionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shouldStartAuctions(
    overrides?: CallOverrides
  ): Promise<{
    surplusAmount: BigNumber;
    deficitAmount: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "shouldStartAuctions()"(
    overrides?: CallOverrides
  ): Promise<{
    surplusAmount: BigNumber;
    deficitAmount: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  stop(overrides?: Overrides): Promise<ContractTransaction>;

  "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

  surplusAuction(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    bid: BigNumber;
    count: BigNumber;
    endTime: BigNumber;
    bidder: string;
    maxEndTime: BigNumber;
    creator: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: BigNumber;
    5: string;
  }>;

  "surplusAuction(uint64)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    bid: BigNumber;
    count: BigNumber;
    endTime: BigNumber;
    bidder: string;
    maxEndTime: BigNumber;
    creator: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: BigNumber;
    5: string;
  }>;

  surplusAuctionCount(overrides?: CallOverrides): Promise<BigNumber>;

  "surplusAuctionCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  surplusAuctionLotSize(overrides?: CallOverrides): Promise<BigNumber>;

  "surplusAuctionLotSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  surplusAuctionReadyToBeSettled(
    auctionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "surplusAuctionReadyToBeSettled(uint64)"(
    auctionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    batchSize(overrides?: CallOverrides): Promise<BigNumber>;

    "batchSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    bidDeficitAuction(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "bidDeficitAuction(uint64,uint256)"(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bidSurplusAuction(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "bidSurplusAuction(uint64,uint256)"(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkReservesAndStartAuctions(overrides?: CallOverrides): Promise<void>;

    "checkReservesAndStartAuctions()"(overrides?: CallOverrides): Promise<void>;

    cleanerRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "cleanerRewardRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    cnp(overrides?: CallOverrides): Promise<string>;

    "cnp()"(overrides?: CallOverrides): Promise<string>;

    coinToBeBought(overrides?: CallOverrides): Promise<BigNumber>;

    "coinToBeBought()"(overrides?: CallOverrides): Promise<BigNumber>;

    coinToBeSold(overrides?: CallOverrides): Promise<BigNumber>;

    "coinToBeSold()"(overrides?: CallOverrides): Promise<BigNumber>;

    creatorRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "creatorRewardRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    deficitAuction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      bid: BigNumber;
      count: BigNumber;
      endTime: BigNumber;
      bidder: string;
      maxEndTime: BigNumber;
      creator: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: string;
    }>;

    "deficitAuction(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      bid: BigNumber;
      count: BigNumber;
      endTime: BigNumber;
      bidder: string;
      maxEndTime: BigNumber;
      creator: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: string;
    }>;

    deficitAuctionCount(overrides?: CallOverrides): Promise<BigNumber>;

    "deficitAuctionCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    deficitAuctionLotSize(overrides?: CallOverrides): Promise<BigNumber>;

    "deficitAuctionLotSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    deficitAuctionReadyToBeSettled(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "deficitAuctionReadyToBeSettled(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    extensionPerBid(overrides?: CallOverrides): Promise<BigNumber>;

    "extensionPerBid()"(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    init(governor_: string, overrides?: CallOverrides): Promise<void>;

    "init(address)"(
      governor_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastAuctionCompletionTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastAuctionCompletionTime()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "maxAuctionDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    minAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "minAuctionDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    minAuctionLotSize(overrides?: CallOverrides): Promise<BigNumber>;

    "minAuctionLotSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    minBidDelta(overrides?: CallOverrides): Promise<BigNumber>;

    "minBidDelta()"(overrides?: CallOverrides): Promise<BigNumber>;

    oldestDeficitAuction(overrides?: CallOverrides): Promise<BigNumber>;

    "oldestDeficitAuction()"(overrides?: CallOverrides): Promise<BigNumber>;

    oldestSurplusAuction(overrides?: CallOverrides): Promise<BigNumber>;

    "oldestSurplusAuction()"(overrides?: CallOverrides): Promise<BigNumber>;

    reservesBufferLowerBound(overrides?: CallOverrides): Promise<BigNumber>;

    "reservesBufferLowerBound()"(overrides?: CallOverrides): Promise<BigNumber>;

    reservesBufferUpperBound(overrides?: CallOverrides): Promise<BigNumber>;

    "reservesBufferUpperBound()"(overrides?: CallOverrides): Promise<BigNumber>;

    setBatchSize(size: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setBatchSize(uint64)"(
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCleanerRewardRatio(
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCleanerRewardRatio(uint256)"(
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreatorRewardRatio(
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCreatorRewardRatio(uint256)"(
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDeficitAuctionLotSize(
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDeficitAuctionLotSize(uint256)"(
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setExtensionPerBid(
      extension: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setExtensionPerBid(uint64)"(
      extension: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxAuctionDuration(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxAuctionDuration(uint64)"(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinAuctionDuration(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinAuctionDuration(uint64)"(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinAuctionLotSize(
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinAuctionLotSize(uint256)"(
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinBidDelta(
      delta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinBidDelta(uint256)"(
      delta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReservesBufferLowerBound(
      bound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReservesBufferLowerBound(uint256)"(
      bound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReservesBufferUpperBound(
      bound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReservesBufferUpperBound(uint256)"(
      bound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSurplusAuctionLotSize(
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSurplusAuctionLotSize(uint256)"(
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settleDeficitAuction(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "settleDeficitAuction(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settleSurplusAuction(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "settleSurplusAuction(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shouldStartAuctions(
      overrides?: CallOverrides
    ): Promise<{
      surplusAmount: BigNumber;
      deficitAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "shouldStartAuctions()"(
      overrides?: CallOverrides
    ): Promise<{
      surplusAmount: BigNumber;
      deficitAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    stop(overrides?: CallOverrides): Promise<void>;

    "stop()"(overrides?: CallOverrides): Promise<void>;

    surplusAuction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      bid: BigNumber;
      count: BigNumber;
      endTime: BigNumber;
      bidder: string;
      maxEndTime: BigNumber;
      creator: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: string;
    }>;

    "surplusAuction(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      bid: BigNumber;
      count: BigNumber;
      endTime: BigNumber;
      bidder: string;
      maxEndTime: BigNumber;
      creator: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: string;
    }>;

    surplusAuctionCount(overrides?: CallOverrides): Promise<BigNumber>;

    "surplusAuctionCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    surplusAuctionLotSize(overrides?: CallOverrides): Promise<BigNumber>;

    "surplusAuctionLotSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    surplusAuctionReadyToBeSettled(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "surplusAuctionReadyToBeSettled(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    AuctionBid(
      isSurplus: boolean | null,
      auctionID: BigNumberish | null,
      bidder: string | null,
      bid: null
    ): EventFilter;

    AuctionSettled(
      isSurplus: boolean | null,
      auctionID: BigNumberish | null,
      winner: string | null,
      creator: null,
      cleaner: null
    ): EventFilter;

    AuctionStarted(
      isSurplus: boolean | null,
      auctionID: BigNumberish | null,
      count: BigNumberish | null,
      maxEndTime: null
    ): EventFilter;

    Initialized(governor: string | null): EventFilter;

    ParameterUpdated(paramName: string | null, value: null): EventFilter;

    ParameterUpdated64(paramName: string | null, value: null): EventFilter;

    Stopped(): EventFilter;
  };

  estimateGas: {
    batchSize(overrides?: CallOverrides): Promise<BigNumber>;

    "batchSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    bidDeficitAuction(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "bidDeficitAuction(uint64,uint256)"(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    bidSurplusAuction(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "bidSurplusAuction(uint64,uint256)"(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    checkReservesAndStartAuctions(overrides?: Overrides): Promise<BigNumber>;

    "checkReservesAndStartAuctions()"(
      overrides?: Overrides
    ): Promise<BigNumber>;

    cleanerRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "cleanerRewardRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    cnp(overrides?: CallOverrides): Promise<BigNumber>;

    "cnp()"(overrides?: CallOverrides): Promise<BigNumber>;

    coinToBeBought(overrides?: CallOverrides): Promise<BigNumber>;

    "coinToBeBought()"(overrides?: CallOverrides): Promise<BigNumber>;

    coinToBeSold(overrides?: CallOverrides): Promise<BigNumber>;

    "coinToBeSold()"(overrides?: CallOverrides): Promise<BigNumber>;

    creatorRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "creatorRewardRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    deficitAuction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deficitAuction(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deficitAuctionCount(overrides?: CallOverrides): Promise<BigNumber>;

    "deficitAuctionCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    deficitAuctionLotSize(overrides?: CallOverrides): Promise<BigNumber>;

    "deficitAuctionLotSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    deficitAuctionReadyToBeSettled(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deficitAuctionReadyToBeSettled(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extensionPerBid(overrides?: CallOverrides): Promise<BigNumber>;

    "extensionPerBid()"(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    init(governor_: string, overrides?: Overrides): Promise<BigNumber>;

    "init(address)"(
      governor_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lastAuctionCompletionTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastAuctionCompletionTime()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "maxAuctionDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    minAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "minAuctionDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    minAuctionLotSize(overrides?: CallOverrides): Promise<BigNumber>;

    "minAuctionLotSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    minBidDelta(overrides?: CallOverrides): Promise<BigNumber>;

    "minBidDelta()"(overrides?: CallOverrides): Promise<BigNumber>;

    oldestDeficitAuction(overrides?: CallOverrides): Promise<BigNumber>;

    "oldestDeficitAuction()"(overrides?: CallOverrides): Promise<BigNumber>;

    oldestSurplusAuction(overrides?: CallOverrides): Promise<BigNumber>;

    "oldestSurplusAuction()"(overrides?: CallOverrides): Promise<BigNumber>;

    reservesBufferLowerBound(overrides?: CallOverrides): Promise<BigNumber>;

    "reservesBufferLowerBound()"(overrides?: CallOverrides): Promise<BigNumber>;

    reservesBufferUpperBound(overrides?: CallOverrides): Promise<BigNumber>;

    "reservesBufferUpperBound()"(overrides?: CallOverrides): Promise<BigNumber>;

    setBatchSize(size: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setBatchSize(uint64)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCleanerRewardRatio(
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCleanerRewardRatio(uint256)"(
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCreatorRewardRatio(
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCreatorRewardRatio(uint256)"(
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDeficitAuctionLotSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDeficitAuctionLotSize(uint256)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setExtensionPerBid(
      extension: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setExtensionPerBid(uint64)"(
      extension: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxAuctionDuration(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxAuctionDuration(uint64)"(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinAuctionDuration(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinAuctionDuration(uint64)"(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinAuctionLotSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinAuctionLotSize(uint256)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinBidDelta(
      delta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinBidDelta(uint256)"(
      delta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setReservesBufferLowerBound(
      bound: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setReservesBufferLowerBound(uint256)"(
      bound: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setReservesBufferUpperBound(
      bound: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setReservesBufferUpperBound(uint256)"(
      bound: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSurplusAuctionLotSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSurplusAuctionLotSize(uint256)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    settleDeficitAuction(
      auctionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "settleDeficitAuction(uint64)"(
      auctionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    settleSurplusAuction(
      auctionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "settleSurplusAuction(uint64)"(
      auctionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    shouldStartAuctions(overrides?: CallOverrides): Promise<BigNumber>;

    "shouldStartAuctions()"(overrides?: CallOverrides): Promise<BigNumber>;

    stop(overrides?: Overrides): Promise<BigNumber>;

    "stop()"(overrides?: Overrides): Promise<BigNumber>;

    surplusAuction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "surplusAuction(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    surplusAuctionCount(overrides?: CallOverrides): Promise<BigNumber>;

    "surplusAuctionCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    surplusAuctionLotSize(overrides?: CallOverrides): Promise<BigNumber>;

    "surplusAuctionLotSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    surplusAuctionReadyToBeSettled(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "surplusAuctionReadyToBeSettled(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "batchSize()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bidDeficitAuction(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "bidDeficitAuction(uint64,uint256)"(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    bidSurplusAuction(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "bidSurplusAuction(uint64,uint256)"(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    checkReservesAndStartAuctions(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "checkReservesAndStartAuctions()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cleanerRewardRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "cleanerRewardRatio()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cnp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cnp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coinToBeBought(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "coinToBeBought()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coinToBeSold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "coinToBeSold()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creatorRewardRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "creatorRewardRatio()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deficitAuction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deficitAuction(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deficitAuctionCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deficitAuctionCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deficitAuctionLotSize(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deficitAuctionLotSize()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deficitAuctionReadyToBeSettled(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deficitAuctionReadyToBeSettled(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extensionPerBid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "extensionPerBid()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      governor_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address)"(
      governor_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lastAuctionCompletionTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastAuctionCompletionTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxAuctionDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxAuctionDuration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minAuctionDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minAuctionDuration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minAuctionLotSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minAuctionLotSize()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minBidDelta(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minBidDelta()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oldestDeficitAuction(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "oldestDeficitAuction()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oldestSurplusAuction(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "oldestSurplusAuction()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reservesBufferLowerBound(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reservesBufferLowerBound()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reservesBufferUpperBound(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reservesBufferUpperBound()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBatchSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBatchSize(uint64)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCleanerRewardRatio(
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCleanerRewardRatio(uint256)"(
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCreatorRewardRatio(
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCreatorRewardRatio(uint256)"(
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDeficitAuctionLotSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDeficitAuctionLotSize(uint256)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setExtensionPerBid(
      extension: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setExtensionPerBid(uint64)"(
      extension: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxAuctionDuration(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxAuctionDuration(uint64)"(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinAuctionDuration(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinAuctionDuration(uint64)"(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinAuctionLotSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinAuctionLotSize(uint256)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinBidDelta(
      delta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinBidDelta(uint256)"(
      delta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setReservesBufferLowerBound(
      bound: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setReservesBufferLowerBound(uint256)"(
      bound: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setReservesBufferUpperBound(
      bound: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setReservesBufferUpperBound(uint256)"(
      bound: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSurplusAuctionLotSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSurplusAuctionLotSize(uint256)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settleDeficitAuction(
      auctionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "settleDeficitAuction(uint64)"(
      auctionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settleSurplusAuction(
      auctionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "settleSurplusAuction(uint64)"(
      auctionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shouldStartAuctions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "shouldStartAuctions()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stop(overrides?: Overrides): Promise<PopulatedTransaction>;

    "stop()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    surplusAuction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "surplusAuction(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    surplusAuctionCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "surplusAuctionCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    surplusAuctionLotSize(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "surplusAuctionLotSize()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    surplusAuctionReadyToBeSettled(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "surplusAuctionReadyToBeSettled(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
