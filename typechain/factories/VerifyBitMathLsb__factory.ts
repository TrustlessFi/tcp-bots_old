/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { VerifyBitMathLsb } from "../VerifyBitMathLsb";

export class VerifyBitMathLsb__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VerifyBitMathLsb> {
    return super.deploy(overrides || {}) as Promise<VerifyBitMathLsb>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): VerifyBitMathLsb {
    return super.attach(address) as VerifyBitMathLsb;
  }
  connect(signer: Signer): VerifyBitMathLsb__factory {
    return super.connect(signer) as VerifyBitMathLsb__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VerifyBitMathLsb {
    return new Contract(address, _abi, signerOrProvider) as VerifyBitMathLsb;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156100115760006000fd5b50610017565b610252806100266000396000f3fe60806040523480156100115760006000fd5b50600436106100305760003560e01c80638753367f1461003657610030565b60006000fd5b6100636004803603602081101561004d5760006000fd5b8101908080359060200190929190505050610065565b005b6000610076826100b163ffffffff16565b60ff169050600060008260020a84161415801561009b575060006001830360020a8416145b9050801515156100ab5760006000fd5b50505b50565b60006000821115156100c35760006000fd5b60ff9050805060006fffffffffffffffffffffffffffffffff6fffffffffffffffffffffffffffffffff168316111561010357608081039050805061010d565b608082901c915081505b600067ffffffffffffffff67ffffffffffffffff1683161115610137576040810390508050610141565b604082901c915081505b600063ffffffff63ffffffff168316111561016357602081039050805061016d565b602082901c915081505b600061ffff61ffff168316111561018b576010810390508050610195565b601082901c915081505b600060ff60ff16831611156101b15760088103905080506101bb565b600882901c915081505b6000600f831611156101d45760048103905080506101de565b600482901c915081505b60006003831611156101f7576002810390508050610201565b600282901c915081505b60006001831611156102165760018103905080505b5b91905056fea2646970667358221220c608b3a0686f306574fa66af2f2b2dddd5c70c3fce76ed73f16c8822d6feb25b64736f6c63430007060033";
