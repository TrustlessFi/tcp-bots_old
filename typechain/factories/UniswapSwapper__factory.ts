/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { UniswapSwapper } from "../UniswapSwapper";

export class UniswapSwapper__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _token0: string,
    _token1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<UniswapSwapper> {
    return super.deploy(
      _token0,
      _token1,
      overrides || {}
    ) as Promise<UniswapSwapper>;
  }
  getDeployTransaction(
    _token0: string,
    _token1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token0, _token1, overrides || {});
  }
  attach(address: string): UniswapSwapper {
    return super.attach(address) as UniswapSwapper;
  }
  connect(signer: Signer): UniswapSwapper__factory {
    return super.connect(signer) as UniswapSwapper__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniswapSwapper {
    return new Contract(address, _abi, signerOrProvider) as UniswapSwapper;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract TestERC20",
        name: "_token0",
        type: "address",
      },
      {
        internalType: "contract TestERC20",
        name: "_token1",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_zeroForOne",
        type: "bool",
      },
      {
        internalType: "int256",
        name: "_amountSpecified",
        type: "int256",
      },
      {
        internalType: "uint160",
        name: "_sqrtPriceLimitX96",
        type: "uint160",
      },
    ],
    name: "doSwap",
    outputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "liq",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "feeGrowthGlobal0X128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthGlobal1X128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "bal0",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "bal1",
            type: "uint256",
          },
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
        ],
        internalType: "struct UniswapSwapper.SwapperStats",
        name: "bfre",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint128",
            name: "liq",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "feeGrowthGlobal0X128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthGlobal1X128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "bal0",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "bal1",
            type: "uint256",
          },
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
        ],
        internalType: "struct UniswapSwapper.SwapperStats",
        name: "aftr",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract UniswapV3Pool",
        name: "_pool",
        type: "address",
      },
    ],
    name: "setPool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "amount0Delta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "amount1Delta",
        type: "int256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "uniswapV3SwapCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156100115760006000fd5b50604051610e0f380380610e0f833981810160405281019061003391906100e6565b5b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505061011b5661011a565b6000815190506001600160a01b038116811415156100e05760006000fd5b5b919050565b60006000604083850312156100f9578182fd5b610102836100c2565b9150610110602084016100c2565b90505b9250929050565b5b610ce58061012a6000396000f3fe60806040523480156100115760006000fd5b50600436106100465760003560e01c80634437152a1461004c578063eac748fe14610068578063fa461e331461009957610046565b60006000fd5b6100666004803603810190610061919061091c565b6100b5565b005b610082600480360381019061007d91906108d7565b6100fa565b604051610090929190610c48565b60405180910390f35b6100b360048036038101906100ae9190610969565b61023c565b005b80600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b61010261083f565b61010a61083f565b6101186103ff63ffffffff16565b91508150600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663128acb0830878787600067ffffffffffffffff811180156101775760006000fd5b506040519080825280601f01601f1916602001820160405280156101aa5781602001600182028036833780820191505090505b506040518663ffffffff1660e01b81526004016101cb959493929190610b67565b604060405180830381600087803b1580156101e65760006000fd5b505af11580156101fb573d600060003e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021f9190610943565b505061022f6103ff63ffffffff16565b905080505b935093915050565b600084131561031a57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518363ffffffff1660e01b81526004016102c4929190610c19565b602060405180830381600087803b1580156102df5760006000fd5b505af11580156102f4573d600060003e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031891906108b0565b505b60008313156103f857600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518363ffffffff1660e01b81526004016103a2929190610c19565b602060405180830381600087803b1580156103bd5760006000fd5b505af11580156103d2573d600060003e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f691906108b0565b505b5b50505050565b61040761083f565b6000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b1580156104725760006000fd5b505afa158015610487573d600060003e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ab9190610a2c565b50505050509150506040518060c00160405280600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b1580156105275760006000fd5b505afa15801561053c573d600060003e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056091906109ef565b6fffffffffffffffffffffffffffffffff168152602001600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f30583996040518163ffffffff1660e01b815260040160206040518083038186803b1580156105e05760006000fd5b505afa1580156105f5573d600060003e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106199190610ad3565b8152602001600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663461413196040518163ffffffff1660e01b815260040160206040518083038186803b1580156106875760006000fd5b505afa15801561069c573d600060003e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c09190610ad3565b8152602001600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107209190610b3f565b60206040518083038186803b1580156107395760006000fd5b505afa15801561074e573d600060003e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107729190610ad3565b8152602001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107d29190610b3f565b60206040518083038186803b1580156107eb5760006000fd5b505afa158015610800573d600060003e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108249190610ad3565b81526020018260020b81526020015091505061083c56505b90565b6040518060c0016040528060006fffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600060020b8152602001509056610cae565b60008151905061ffff8116811415156108aa5760006000fd5b5b919050565b6000602082840312156108c1578081fd5b81516108cc81610c70565b809150505b92915050565b600060006000606084860312156108ec578182fd5b83356108f781610c70565b8093505060208401359150604084013561091081610c85565b809150505b9250925092565b60006020828403121561092d578081fd5b813561093881610c85565b809150505b92915050565b6000600060408385031215610956578182fd5b82519150602083015190505b9250929050565b600060006000600060608587031215610980578081fd5b8435935060208501359250604085013567ffffffffffffffff808211156109a5578283fd5b818701915087601f83011215156109ba578283fd5b8135818111156109c8578384fd5b8860208285010111156109d9578384fd5b6020830194508093505050505b92959194509250565b600060208284031215610a00578081fd5b81516fffffffffffffffffffffffffffffffff811681141515610a21578182fd5b809150505b92915050565b600060006000600060006000600060e0888a031215610a49578283fd5b8751610a5481610c85565b8097505060208801518060020b81141515610a6d578384fd5b80965050610a7d60408901610891565b9450610a8b60608901610891565b9350610a9960808901610891565b925060a088015160ff811681141515610ab0578283fd5b8092505060c0880151610ac281610c70565b809150505b92959891949750929550565b600060208284031215610ae4578081fd5b815190505b92915050565b6fffffffffffffffffffffffffffffffff81511682526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160020b60a08301525b5050565b600060208201905073ffffffffffffffffffffffffffffffffffffffff831682525b92915050565b600073ffffffffffffffffffffffffffffffffffffffff8088168352602087151581850152866040850152818616606085015260a06080850152845191508160a0850152825b82811015610bcd5781818701015160c082870101525b8181019050610bad565b82811115610bde578360c084870101525b505060c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168401019150505b9695505050505050565b600060408201905073ffffffffffffffffffffffffffffffffffffffff841682528260208301525b9392505050565b600061018082019050610c5b8285610aef565b610c6860c0830184610aef565b5b9392505050565b80151581141515610c815760006000fd5b5b50565b73ffffffffffffffffffffffffffffffffffffffff811681141515610caa5760006000fd5b5b50565bfea2646970667358221220221e29fc0f91f3adb6c4f009905913e2379cc4ae3ce0757097620608213dfca564736f6c63430007060033";
