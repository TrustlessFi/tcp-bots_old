/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { PoolAddressTest } from "../PoolAddressTest";

export class PoolAddressTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PoolAddressTest> {
    return super.deploy(overrides || {}) as Promise<PoolAddressTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PoolAddressTest {
    return super.attach(address) as PoolAddressTest;
  }
  connect(signer: Signer): PoolAddressTest__factory {
    return super.connect(signer) as PoolAddressTest__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PoolAddressTest {
    return new Contract(address, _abi, signerOrProvider) as PoolAddressTest;
  }
}

const _abi = [
  {
    inputs: [],
    name: "POOL_INIT_CODE_HASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "factory",
        type: "address",
      },
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "fee",
        type: "uint24",
      },
    ],
    name: "computeAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "factory",
        type: "address",
      },
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "fee",
        type: "uint24",
      },
    ],
    name: "getGasCostOfComputeAddress",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156100115760006000fd5b50610017565b61044f806100266000396000f3fe60806040523480156100115760006000fd5b50600436106100465760003560e01c80638716c5ff1461004c578063cce34ec61461010a578063dc6fd8ab146101b257610046565b60006000fd5b6100de600480360360808110156100635760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803562ffffff1690602001909291905050506101d4565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61019c600480360360808110156101215760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803562ffffff169060200190929190505050610243565b6040518082815260200191505060405180910390f35b6101ba6102bd565b604051808260001916815260200191505060405180910390f35b60006102348560405180606001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018562ffffff168152602001506102ed63ffffffff16565b905061023b565b949350505050565b600060005a90506102a88660405180606001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018662ffffff168152602001506102ed63ffffffff16565b505a81039150506102b556505b949350505050565b60007fa8180af292c6986c74fa300a542e049db8a89221e2452e431c3d8103b610c56860001b90506102ea565b90565b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161015156103325760006000fd5b8273ffffffffffffffffffffffffffffffffffffffff16631698ee828360000151846020015185604001516040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018262ffffff168152602001935050505060206040518083038186803b1580156103d15760006000fd5b505afa1580156103e6573d600060003e3d6000fd5b505050506040513d60208110156103fd5760006000fd5b8101908080519060200190929190505050905080505b9291505056fea26469706673582212201f2b624eb49868bc4e2e28f7525692c515683cfd5f6bc222aac988f6789f0ace64736f6c63430007060033";
