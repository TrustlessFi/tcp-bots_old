/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { TickLensTest } from "../TickLensTest";

export class TickLensTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TickLensTest> {
    return super.deploy(overrides || {}) as Promise<TickLensTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TickLensTest {
    return super.attach(address) as TickLensTest;
  }
  connect(signer: Signer): TickLensTest__factory {
    return super.connect(signer) as TickLensTest__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TickLensTest {
    return new Contract(address, _abi, signerOrProvider) as TickLensTest;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "int16",
        name: "tickBitmapIndex",
        type: "int16",
      },
    ],
    name: "getGasCostOfGetPopulatedTicksInWord",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "int16",
        name: "tickBitmapIndex",
        type: "int16",
      },
    ],
    name: "getPopulatedTicksInWord",
    outputs: [
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "int128",
            name: "liquidityNet",
            type: "int128",
          },
          {
            internalType: "uint128",
            name: "liquidityGross",
            type: "uint128",
          },
        ],
        internalType: "struct ITickLens.PopulatedTick[]",
        name: "populatedTicks",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156100115760006000fd5b50610017565b6105ef806100266000396000f3fe60806040523480156100115760006000fd5b506004361061003b5760003560e01c8063351fb47814610041578063f0c2e7bc146100715761003b565b60006000fd5b61005b600480360381019061005691906103ec565b6100a1565b6040516100689190610500565b60405180910390f35b61008b600480360381019061008691906103ec565b610382565b60405161009891906105a6565b60405180910390f35b606060008373ffffffffffffffffffffffffffffffffffffffff16635339c296846040518263ffffffff1660e01b81526004016100de919061057c565b60206040518083038186803b1580156100f75760006000fd5b505afa15801561010c573d600060003e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013091906104e4565b905060006000600090505b61010081101561016b576000816001901b8416111561015d5781806001019250505b5b808060010191505061013b565b5060008573ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101b55760006000fd5b505afa1580156101ca573d600060003e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ee9190610449565b90508167ffffffffffffffff811180156102085760006000fd5b5060405190808252806020026020018201604052801561024257816020015b61022f6103ac565b8152602001906001900390816102275790505b50935083506000600090505b610100811015610377576000816001901b85161115610369576000828260088960010b60020b901b01029050600060008973ffffffffffffffffffffffffffffffffffffffff1663f30dba93846040518263ffffffff1660e01b81526004016102b79190610591565b60806040518083038186803b1580156102d05760006000fd5b505afa1580156102e5573d600060003e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103099190610477565b50509150915060405180606001604052808460020b815260200182600f0b8152602001836fffffffffffffffffffffffffffffffff1681526020015088876001900397508781518110151561035a57fe5b60200260200101819052505050505b5b808060010191505061024e565b505050505b92915050565b600060005a905061039984846100a163ffffffff16565b505a81039150506103a656505b92915050565b6040518060600160405280600060020b81526020016000600f0b815260200160006fffffffffffffffffffffffffffffffff1681526020015090566105b8565b60006000604083850312156103ff578182fd5b823573ffffffffffffffffffffffffffffffffffffffff811681141515610424578283fd5b8092505060208301358060010b8114151561043d578182fd5b809150505b9250929050565b60006020828403121561045a578081fd5b81518060020b8114151561046c578182fd5b809150505b92915050565b60006000600060006080858703121561048e578182fd5b84516fffffffffffffffffffffffffffffffff8116811415156104af578283fd5b80945050602085015180600f0b811415156104c8578283fd5b8093505060408501519150606085015190505b92959194509250565b6000602082840312156104f5578081fd5b815190505b92915050565b60006020808301818452808551808352604092508286019150838701855b8281101561056c578151805160020b855286810151600f0b878601526fffffffffffffffffffffffffffffffff8682015116868601525060608401935085820191505b60018101905061051e565b5050508093505050505b92915050565b60006020820190508260010b82525b92915050565b60006020820190508260020b82525b92915050565b60006020820190508282525b92915050565bfea26469706673582212201276efafe6300a40cf187506a31954b76b533b6581792133c5670561a7893ee564736f6c63430007060033";
