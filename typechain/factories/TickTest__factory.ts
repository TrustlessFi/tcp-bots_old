/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { TickTest } from "../TickTest";

export class TickTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TickTest> {
    return super.deploy(overrides || {}) as Promise<TickTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TickTest {
    return super.attach(address) as TickTest;
  }
  connect(signer: Signer): TickTest__factory {
    return super.connect(signer) as TickTest__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TickTest {
    return new Contract(address, _abi, signerOrProvider) as TickTest;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "int24",
        name: "tickLower",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickUpper",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickCurrent",
        type: "int24",
      },
      {
        internalType: "uint256",
        name: "feeGrowthGlobal0X128",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeGrowthGlobal1X128",
        type: "uint256",
      },
    ],
    name: "getFeeGrowthInside",
    outputs: [
      {
        internalType: "uint256",
        name: "feeGrowthInside0X128",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeGrowthInside1X128",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        components: [
          {
            internalType: "uint128",
            name: "liquidityGross",
            type: "uint128",
          },
          {
            internalType: "int128",
            name: "liquidityNet",
            type: "int128",
          },
          {
            internalType: "uint256",
            name: "feeGrowthOutside0X128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthOutside1X128",
            type: "uint256",
          },
        ],
        internalType: "struct Tick.Info",
        name: "info",
        type: "tuple",
      },
    ],
    name: "setTick",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tickSpacing",
        type: "int24",
      },
    ],
    name: "tickSpacingToMaxLiquidityPerTick",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
    ],
    name: "ticks",
    outputs: [
      {
        internalType: "uint128",
        name: "liquidityGross",
        type: "uint128",
      },
      {
        internalType: "int128",
        name: "liquidityNet",
        type: "int128",
      },
      {
        internalType: "uint256",
        name: "feeGrowthOutside0X128",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeGrowthOutside1X128",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156100115760006000fd5b50610017565b61067a806100266000396000f3fe60806040523480156100115760006000fd5b50600436106100515760003560e01c806330e3ff4c1461005757806382ab85fb1461008857806382c66f87146100a4578063f30dba93146100d457610051565b60006000fd5b610071600480360381019061006c919061049c565b610107565b60405161007f92919061062a565b60405180910390f35b6100a2600480360381019061009d91906104f5565b61013d565b005b6100be60048036038101906100b99190610479565b610204565b6040516100cb91906105ca565b60405180910390f35b6100ee60048036038101906100e99190610479565b610221565b6040516100fe94939291906105ee565b60405180910390f35b6000600061012a878787878760006000506102839095949392919063ffffffff16565b91509150610133565b9550959350505050565b80600060005060008460020b60020b815260200190815260200160002060005060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff0219169083600f0b6fffffffffffffffffffffffffffffffff1602179055506040820151816001016000509090556060820151816002016000509090559050505b5050565b60006102158261038263ffffffff16565b905061021c565b919050565b60006000506020528060005260406000206000915090508060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a9004600f0b908060010160005054908060020160005054905084565b6000600060008860008960020b60020b8152602001908152602001600020600050905060008960008960020b60020b81526020019081526020016000206000509050600060008a60020b8960020b1215156102f557836001016000505491508150836002016000505490508050610312565b836001016000505488039150815083600201600050548703905080505b600060008b60020b8b60020b12156103415784600101600050549150815084600201600050549050805061035e565b84600101600050548a039150815084600201600050548903905080505b81848b03039750875080838a0303965086505050505050505b965096945050505050565b60006000828360020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761860020b8115156103b857fe5b050290506000838460020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761860000360020b8115156103f357fe5b05029050600060018560020b84840360020b81151561040e57fe5b050190508062ffffff166fffffffffffffffffffffffffffffffff6fffffffffffffffffffffffffffffffff1681151561044457fe5b049350505050610452565050505b91905056610643565b6000813590508060020b811415156104735760006000fd5b5b919050565b60006020828403121561048a578081fd5b6104938261045b565b90505b92915050565b6000600060006000600060a086880312156104b5578081fd5b6104be8661045b565b94506104cc6020870161045b565b93506104da6040870161045b565b925060608601359150608086013590505b9295509295909350565b6000600082840360a0811215610509578283fd5b6105128461045b565b925060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082011215610543578182fd5b506040516080810181811067ffffffffffffffff8211171561056157fe5b806040525060208401356fffffffffffffffffffffffffffffffff81168114151561058a578283fd5b80825250604084013580600f0b811415156105a3578283fd5b806020830152506060840135604082015260808401356060820152809150505b9250929050565b60006020820190506fffffffffffffffffffffffffffffffff831682525b92915050565b60006080820190506fffffffffffffffffffffffffffffffff8616825284600f0b60208301528360408301528260608301525b95945050505050565b60006040820190508382528260208301525b9392505050565bfea2646970667358221220968213f4e26269f60ae7790252d9aaa97418e0a543a6451c0bbcff46a2d7ef0d64736f6c63430007060033";
