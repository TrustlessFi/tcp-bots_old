/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IDelayedRewardsInterface extends ethers.utils.Interface {
  functions: {
    "registerRewards(uint64,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "registerRewards",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "registerRewards",
    data: BytesLike
  ): Result;

  events: {
    "ParameterUpdated64(string,uint64)": EventFragment;
    "RewardsClaimed(uint64,address,uint256)": EventFragment;
    "RewardsClaimedInstantly(address,uint256)": EventFragment;
    "RewardsRegistered(uint64,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ParameterUpdated64"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimedInstantly"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsRegistered"): EventFragment;
}

export class IDelayedRewards extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IDelayedRewardsInterface;

  functions: {
    registerRewards(
      rewardTime: BigNumberish,
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerRewards(uint64,address,uint256)"(
      rewardTime: BigNumberish,
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  registerRewards(
    rewardTime: BigNumberish,
    account: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerRewards(uint64,address,uint256)"(
    rewardTime: BigNumberish,
    account: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    registerRewards(
      rewardTime: BigNumberish,
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerRewards(uint64,address,uint256)"(
      rewardTime: BigNumberish,
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ParameterUpdated64(paramName: string | null, value: null): EventFilter;

    RewardsClaimed(
      period: BigNumberish | null,
      account: string | null,
      amount: null
    ): EventFilter;

    RewardsClaimedInstantly(account: string | null, amount: null): EventFilter;

    RewardsRegistered(
      period: BigNumberish | null,
      account: string | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    registerRewards(
      rewardTime: BigNumberish,
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerRewards(uint64,address,uint256)"(
      rewardTime: BigNumberish,
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    registerRewards(
      rewardTime: BigNumberish,
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerRewards(uint64,address,uint256)"(
      rewardTime: BigNumberish,
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
