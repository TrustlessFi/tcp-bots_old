/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface NonfungibleTokenPositionDescriptorInterface
  extends ethers.utils.Interface {
  functions: {
    "flipRatio(address,address)": FunctionFragment;
    "initialize(tuple[])": FunctionFragment;
    "tokenRatioPriority(address)": FunctionFragment;
    "tokenURI(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "flipRatio",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [{ token: string; priority: BigNumberish }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRatioPriority",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "flipRatio", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenRatioPriority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;

  events: {
    "UpdateTokenRatioPriority(address,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "UpdateTokenRatioPriority"): EventFragment;
}

export class NonfungibleTokenPositionDescriptor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NonfungibleTokenPositionDescriptorInterface;

  functions: {
    flipRatio(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "flipRatio(address,address)"(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      tokens: { token: string; priority: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(tuple[])"(
      tokens: { token: string; priority: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenRatioPriority(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokenRatioPriority(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      positionManager: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tokenURI(address,uint256)"(
      positionManager: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  flipRatio(
    token0: string,
    token1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "flipRatio(address,address)"(
    token0: string,
    token1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    tokens: { token: string; priority: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(tuple[])"(
    tokens: { token: string; priority: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenRatioPriority(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenRatioPriority(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(
    positionManager: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "tokenURI(address,uint256)"(
    positionManager: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    flipRatio(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "flipRatio(address,address)"(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      tokens: { token: string; priority: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(tuple[])"(
      tokens: { token: string; priority: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;

    tokenRatioPriority(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenRatioPriority(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      positionManager: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "tokenURI(address,uint256)"(
      positionManager: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    UpdateTokenRatioPriority(
      token: null,
      priority: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; priority: BigNumber }
    >;
  };

  estimateGas: {
    flipRatio(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "flipRatio(address,address)"(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      tokens: { token: string; priority: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(tuple[])"(
      tokens: { token: string; priority: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenRatioPriority(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenRatioPriority(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      positionManager: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(address,uint256)"(
      positionManager: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    flipRatio(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "flipRatio(address,address)"(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      tokens: { token: string; priority: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(tuple[])"(
      tokens: { token: string; priority: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenRatioPriority(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenRatioPriority(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      positionManager: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(address,uint256)"(
      positionManager: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
