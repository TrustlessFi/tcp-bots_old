/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface GovernorInterfaceInterface extends ethers.utils.Interface {
  functions: {
    "circulatingCNP()": FunctionFragment;
    "validateAction(address,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "circulatingCNP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validateAction",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "circulatingCNP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateAction",
    data: BytesLike
  ): Result;

  events: {};
}

export class GovernorInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: GovernorInterfaceInterface;

  functions: {
    circulatingCNP(overrides?: CallOverrides): Promise<[BigNumber]>;

    "circulatingCNP()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    validateAction(
      target: string,
      signature: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "validateAction(address,string)"(
      target: string,
      signature: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  circulatingCNP(overrides?: CallOverrides): Promise<BigNumber>;

  "circulatingCNP()"(overrides?: CallOverrides): Promise<BigNumber>;

  validateAction(
    target: string,
    signature: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "validateAction(address,string)"(
    target: string,
    signature: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    circulatingCNP(overrides?: CallOverrides): Promise<BigNumber>;

    "circulatingCNP()"(overrides?: CallOverrides): Promise<BigNumber>;

    validateAction(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "validateAction(address,string)"(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    circulatingCNP(overrides?: CallOverrides): Promise<BigNumber>;

    "circulatingCNP()"(overrides?: CallOverrides): Promise<BigNumber>;

    validateAction(
      target: string,
      signature: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "validateAction(address,string)"(
      target: string,
      signature: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    circulatingCNP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "circulatingCNP()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateAction(
      target: string,
      signature: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "validateAction(address,string)"(
      target: string,
      signature: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
