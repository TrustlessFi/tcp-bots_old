/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface GovernorInterface extends ethers.utils.Interface {
  functions: {
    "EMERGENCY_SHUTDOWN_THRESHOLD()": FunctionFragment;
    "accounting()": FunctionFragment;
    "allocate(address)": FunctionFragment;
    "allocationAllotted(address)": FunctionFragment;
    "allocationCreator()": FunctionFragment;
    "auctions()": FunctionFragment;
    "burnTokensForEmergencyShutdown(uint256)": FunctionFragment;
    "cnp()": FunctionFragment;
    "coin()": FunctionFragment;
    "coinPositionNFT()": FunctionFragment;
    "coinWethPair()": FunctionFragment;
    "completeProtocolInitialization(address,address[])": FunctionFragment;
    "currentDailyRewardCount()": FunctionFragment;
    "delayedRewards()": FunctionFragment;
    "deployer()": FunctionFragment;
    "devAllocation()": FunctionFragment;
    "emergencyShutdownTokensBurned()": FunctionFragment;
    "enforcedDecentralization()": FunctionFragment;
    "execute(address,uint256,string,bytes)": FunctionFragment;
    "executeEmergencyShutdown()": FunctionFragment;
    "executeShutdown()": FunctionFragment;
    "getReferencePairs()": FunctionFragment;
    "initUpgradeableContracts(address,address,address,address,address,address,address,address,address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "isShutdown()": FunctionFragment;
    "lendCoin()": FunctionFragment;
    "liquidations()": FunctionFragment;
    "market()": FunctionFragment;
    "mintCNP(address,uint256)": FunctionFragment;
    "pegManager()": FunctionFragment;
    "periodLength()": FunctionFragment;
    "prices()": FunctionFragment;
    "protocolLock()": FunctionFragment;
    "referencePair(uint256)": FunctionFragment;
    "requireCoinReservesBurnAccess(address)": FunctionFragment;
    "requireDebtWriteAccess(address)": FunctionFragment;
    "requirePairTokenWriteAccess(address)": FunctionFragment;
    "requirePositionWriteAccess(address)": FunctionFragment;
    "requirePriceAccess(address)": FunctionFragment;
    "requireStoredCollateralAccess(address)": FunctionFragment;
    "rewards()": FunctionFragment;
    "setAuctions(address)": FunctionFragment;
    "setLiquidations(address)": FunctionFragment;
    "setMarket(address)": FunctionFragment;
    "setPegManager(address)": FunctionFragment;
    "setPrices(address)": FunctionFragment;
    "setRewards(address)": FunctionFragment;
    "setSettlement(address)": FunctionFragment;
    "setTokenAllocationCreator(address)": FunctionFragment;
    "settlement()": FunctionFragment;
    "shutdownTime()": FunctionFragment;
    "timelock()": FunctionFragment;
    "unlockProtocolLock()": FunctionFragment;
    "upgradeProtocol(address)": FunctionFragment;
    "validateAction(string)": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "EMERGENCY_SHUTDOWN_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accounting",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "allocate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "allocationAllotted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allocationCreator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "auctions", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burnTokensForEmergencyShutdown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cnp", values?: undefined): string;
  encodeFunctionData(functionFragment: "coin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "coinPositionNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coinWethPair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeProtocolInitialization",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "currentDailyRewardCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delayedRewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "devAllocation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyShutdownTokensBurned",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enforcedDecentralization",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeEmergencyShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReferencePairs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initUpgradeableContracts",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lendCoin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidations",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "market", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintCNP",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pegManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "periodLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "prices", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referencePair",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requireCoinReservesBurnAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireDebtWriteAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requirePairTokenWriteAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requirePositionWriteAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requirePriceAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireStoredCollateralAccess",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "rewards", values?: undefined): string;
  encodeFunctionData(functionFragment: "setAuctions", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setLiquidations",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setMarket", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPegManager",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setPrices", values: [string]): string;
  encodeFunctionData(functionFragment: "setRewards", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setSettlement",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAllocationCreator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "settlement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shutdownTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unlockProtocolLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeProtocol",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validateAction",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "EMERGENCY_SHUTDOWN_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accounting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allocate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allocationAllotted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocationCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnTokensForEmergencyShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cnp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "coin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "coinPositionNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coinWethPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeProtocolInitialization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentDailyRewardCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delayedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "devAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyShutdownTokensBurned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enforcedDecentralization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeEmergencyShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferencePairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initUpgradeableContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isShutdown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lendCoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "market", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintCNP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pegManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referencePair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireCoinReservesBurnAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireDebtWriteAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requirePairTokenWriteAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requirePositionWriteAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requirePriceAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireStoredCollateralAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPegManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrices", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAllocationCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settlement", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shutdownTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlockProtocolLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "AdminUpdated(address,address)": EventFragment;
    "AllocationAllotted(address,uint256)": EventFragment;
    "ContractUpgraded(string,address)": EventFragment;
    "EmergencyShutdownExecuted(uint256)": EventFragment;
    "ProtocolUpgraded(address)": EventFragment;
    "ShutdownExecuted()": EventFragment;
    "ShutdownTokensBurned(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllocationAllotted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyShutdownExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShutdownExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShutdownTokensBurned"): EventFragment;
}

export class Governor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: GovernorInterface;

  functions: {
    EMERGENCY_SHUTDOWN_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "EMERGENCY_SHUTDOWN_THRESHOLD()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    accounting(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "accounting()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    allocate(
      allocation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "allocate(address)"(
      allocation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allocationAllotted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "allocationAllotted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    allocationCreator(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "allocationCreator()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    auctions(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "auctions()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    burnTokensForEmergencyShutdown(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burnTokensForEmergencyShutdown(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cnp(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "cnp()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    coin(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "coin()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    coinPositionNFT(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "coinPositionNFT()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    coinWethPair(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "coinWethPair()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    completeProtocolInitialization(
      _coinWethPair: string,
      _referencePair: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "completeProtocolInitialization(address,address[])"(
      _coinWethPair: string,
      _referencePair: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    currentDailyRewardCount(
      overrides?: CallOverrides
    ): Promise<{
      count: BigNumber;
      0: BigNumber;
    }>;

    "currentDailyRewardCount()"(
      overrides?: CallOverrides
    ): Promise<{
      count: BigNumber;
      0: BigNumber;
    }>;

    delayedRewards(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "delayedRewards()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    deployer(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "deployer()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    devAllocation(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "devAllocation()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    emergencyShutdownTokensBurned(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "emergencyShutdownTokensBurned()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    enforcedDecentralization(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "enforcedDecentralization()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    execute(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "execute(address,uint256,string,bytes)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeEmergencyShutdown(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeEmergencyShutdown()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeShutdown(overrides?: Overrides): Promise<ContractTransaction>;

    "executeShutdown()"(overrides?: Overrides): Promise<ContractTransaction>;

    getReferencePairs(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "getReferencePairs()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    initUpgradeableContracts(
      _auctions: string,
      _liquidations: string,
      _market: string,
      _pegManager: string,
      _prices: string,
      _protocolLock: string,
      _rewards: string,
      _settlement: string,
      _allocationCreator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initUpgradeableContracts(address,address,address,address,address,address,address,address,address)"(
      _auctions: string,
      _liquidations: string,
      _market: string,
      _pegManager: string,
      _prices: string,
      _protocolLock: string,
      _rewards: string,
      _settlement: string,
      _allocationCreator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isInitialized(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isInitialized()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isShutdown(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isShutdown()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    lendCoin(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "lendCoin()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    liquidations(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "liquidations()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    market(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "market()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    mintCNP(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintCNP(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    pegManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "pegManager()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    periodLength(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "periodLength()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    prices(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "prices()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    protocolLock(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "protocolLock()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    referencePair(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "referencePair(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    requireCoinReservesBurnAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "requireCoinReservesBurnAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    requireDebtWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "requireDebtWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    requirePairTokenWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "requirePairTokenWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    requirePositionWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "requirePositionWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    requirePriceAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "requirePriceAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    requireStoredCollateralAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "requireStoredCollateralAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    rewards(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "rewards()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setAuctions(
      _auctions: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAuctions(address)"(
      _auctions: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLiquidations(
      _liquidations: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLiquidations(address)"(
      _liquidations: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMarket(
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMarket(address)"(
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPegManager(
      _pegManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPegManager(address)"(
      _pegManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPrices(
      _prices: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPrices(address)"(
      _prices: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRewards(
      _rewards: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRewards(address)"(
      _rewards: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSettlement(
      _settlement: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSettlement(address)"(
      _settlement: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTokenAllocationCreator(
      _allocationCreator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTokenAllocationCreator(address)"(
      _allocationCreator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settlement(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "settlement()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    shutdownTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "shutdownTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    timelock(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "timelock()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    unlockProtocolLock(overrides?: Overrides): Promise<ContractTransaction>;

    "unlockProtocolLock()"(overrides?: Overrides): Promise<ContractTransaction>;

    upgradeProtocol(
      newGovernor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeProtocol(address)"(
      newGovernor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validateAction(
      signature: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "validateAction(string)"(
      signature: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    weth(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "weth()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  EMERGENCY_SHUTDOWN_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  "EMERGENCY_SHUTDOWN_THRESHOLD()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  accounting(overrides?: CallOverrides): Promise<string>;

  "accounting()"(overrides?: CallOverrides): Promise<string>;

  allocate(
    allocation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "allocate(address)"(
    allocation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allocationAllotted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "allocationAllotted(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  allocationCreator(overrides?: CallOverrides): Promise<string>;

  "allocationCreator()"(overrides?: CallOverrides): Promise<string>;

  auctions(overrides?: CallOverrides): Promise<string>;

  "auctions()"(overrides?: CallOverrides): Promise<string>;

  burnTokensForEmergencyShutdown(
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burnTokensForEmergencyShutdown(uint256)"(
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cnp(overrides?: CallOverrides): Promise<string>;

  "cnp()"(overrides?: CallOverrides): Promise<string>;

  coin(overrides?: CallOverrides): Promise<string>;

  "coin()"(overrides?: CallOverrides): Promise<string>;

  coinPositionNFT(overrides?: CallOverrides): Promise<string>;

  "coinPositionNFT()"(overrides?: CallOverrides): Promise<string>;

  coinWethPair(overrides?: CallOverrides): Promise<string>;

  "coinWethPair()"(overrides?: CallOverrides): Promise<string>;

  completeProtocolInitialization(
    _coinWethPair: string,
    _referencePair: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "completeProtocolInitialization(address,address[])"(
    _coinWethPair: string,
    _referencePair: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  currentDailyRewardCount(overrides?: CallOverrides): Promise<BigNumber>;

  "currentDailyRewardCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  delayedRewards(overrides?: CallOverrides): Promise<string>;

  "delayedRewards()"(overrides?: CallOverrides): Promise<string>;

  deployer(overrides?: CallOverrides): Promise<string>;

  "deployer()"(overrides?: CallOverrides): Promise<string>;

  devAllocation(overrides?: CallOverrides): Promise<BigNumber>;

  "devAllocation()"(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyShutdownTokensBurned(overrides?: CallOverrides): Promise<BigNumber>;

  "emergencyShutdownTokensBurned()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  enforcedDecentralization(overrides?: CallOverrides): Promise<string>;

  "enforcedDecentralization()"(overrides?: CallOverrides): Promise<string>;

  execute(
    target: string,
    value: BigNumberish,
    signature: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "execute(address,uint256,string,bytes)"(
    target: string,
    value: BigNumberish,
    signature: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeEmergencyShutdown(overrides?: Overrides): Promise<ContractTransaction>;

  "executeEmergencyShutdown()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeShutdown(overrides?: Overrides): Promise<ContractTransaction>;

  "executeShutdown()"(overrides?: Overrides): Promise<ContractTransaction>;

  getReferencePairs(overrides?: CallOverrides): Promise<string[]>;

  "getReferencePairs()"(overrides?: CallOverrides): Promise<string[]>;

  initUpgradeableContracts(
    _auctions: string,
    _liquidations: string,
    _market: string,
    _pegManager: string,
    _prices: string,
    _protocolLock: string,
    _rewards: string,
    _settlement: string,
    _allocationCreator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initUpgradeableContracts(address,address,address,address,address,address,address,address,address)"(
    _auctions: string,
    _liquidations: string,
    _market: string,
    _pegManager: string,
    _prices: string,
    _protocolLock: string,
    _rewards: string,
    _settlement: string,
    _allocationCreator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  isShutdown(overrides?: CallOverrides): Promise<boolean>;

  "isShutdown()"(overrides?: CallOverrides): Promise<boolean>;

  lendCoin(overrides?: CallOverrides): Promise<string>;

  "lendCoin()"(overrides?: CallOverrides): Promise<string>;

  liquidations(overrides?: CallOverrides): Promise<string>;

  "liquidations()"(overrides?: CallOverrides): Promise<string>;

  market(overrides?: CallOverrides): Promise<string>;

  "market()"(overrides?: CallOverrides): Promise<string>;

  mintCNP(
    to: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintCNP(address,uint256)"(
    to: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  pegManager(overrides?: CallOverrides): Promise<string>;

  "pegManager()"(overrides?: CallOverrides): Promise<string>;

  periodLength(overrides?: CallOverrides): Promise<BigNumber>;

  "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  prices(overrides?: CallOverrides): Promise<string>;

  "prices()"(overrides?: CallOverrides): Promise<string>;

  protocolLock(overrides?: CallOverrides): Promise<string>;

  "protocolLock()"(overrides?: CallOverrides): Promise<string>;

  referencePair(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "referencePair(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  requireCoinReservesBurnAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "requireCoinReservesBurnAccess(address)"(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requireDebtWriteAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "requireDebtWriteAccess(address)"(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requirePairTokenWriteAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "requirePairTokenWriteAccess(address)"(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requirePositionWriteAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "requirePositionWriteAccess(address)"(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requirePriceAccess(caller: string, overrides?: CallOverrides): Promise<void>;

  "requirePriceAccess(address)"(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requireStoredCollateralAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "requireStoredCollateralAccess(address)"(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  rewards(overrides?: CallOverrides): Promise<string>;

  "rewards()"(overrides?: CallOverrides): Promise<string>;

  setAuctions(
    _auctions: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAuctions(address)"(
    _auctions: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLiquidations(
    _liquidations: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLiquidations(address)"(
    _liquidations: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMarket(
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMarket(address)"(
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPegManager(
    _pegManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPegManager(address)"(
    _pegManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPrices(
    _prices: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPrices(address)"(
    _prices: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRewards(
    _rewards: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRewards(address)"(
    _rewards: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSettlement(
    _settlement: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSettlement(address)"(
    _settlement: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTokenAllocationCreator(
    _allocationCreator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTokenAllocationCreator(address)"(
    _allocationCreator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settlement(overrides?: CallOverrides): Promise<string>;

  "settlement()"(overrides?: CallOverrides): Promise<string>;

  shutdownTime(overrides?: CallOverrides): Promise<BigNumber>;

  "shutdownTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  timelock(overrides?: CallOverrides): Promise<string>;

  "timelock()"(overrides?: CallOverrides): Promise<string>;

  unlockProtocolLock(overrides?: Overrides): Promise<ContractTransaction>;

  "unlockProtocolLock()"(overrides?: Overrides): Promise<ContractTransaction>;

  upgradeProtocol(
    newGovernor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeProtocol(address)"(
    newGovernor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validateAction(signature: string, overrides?: CallOverrides): Promise<void>;

  "validateAction(string)"(
    signature: string,
    overrides?: CallOverrides
  ): Promise<void>;

  weth(overrides?: CallOverrides): Promise<string>;

  "weth()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    EMERGENCY_SHUTDOWN_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    "EMERGENCY_SHUTDOWN_THRESHOLD()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accounting(overrides?: CallOverrides): Promise<string>;

    "accounting()"(overrides?: CallOverrides): Promise<string>;

    allocate(allocation: string, overrides?: CallOverrides): Promise<void>;

    "allocate(address)"(
      allocation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allocationAllotted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "allocationAllotted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allocationCreator(overrides?: CallOverrides): Promise<string>;

    "allocationCreator()"(overrides?: CallOverrides): Promise<string>;

    auctions(overrides?: CallOverrides): Promise<string>;

    "auctions()"(overrides?: CallOverrides): Promise<string>;

    burnTokensForEmergencyShutdown(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burnTokensForEmergencyShutdown(uint256)"(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cnp(overrides?: CallOverrides): Promise<string>;

    "cnp()"(overrides?: CallOverrides): Promise<string>;

    coin(overrides?: CallOverrides): Promise<string>;

    "coin()"(overrides?: CallOverrides): Promise<string>;

    coinPositionNFT(overrides?: CallOverrides): Promise<string>;

    "coinPositionNFT()"(overrides?: CallOverrides): Promise<string>;

    coinWethPair(overrides?: CallOverrides): Promise<string>;

    "coinWethPair()"(overrides?: CallOverrides): Promise<string>;

    completeProtocolInitialization(
      _coinWethPair: string,
      _referencePair: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "completeProtocolInitialization(address,address[])"(
      _coinWethPair: string,
      _referencePair: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    currentDailyRewardCount(overrides?: CallOverrides): Promise<BigNumber>;

    "currentDailyRewardCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    delayedRewards(overrides?: CallOverrides): Promise<string>;

    "delayedRewards()"(overrides?: CallOverrides): Promise<string>;

    deployer(overrides?: CallOverrides): Promise<string>;

    "deployer()"(overrides?: CallOverrides): Promise<string>;

    devAllocation(overrides?: CallOverrides): Promise<BigNumber>;

    "devAllocation()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyShutdownTokensBurned(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "emergencyShutdownTokensBurned()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enforcedDecentralization(overrides?: CallOverrides): Promise<string>;

    "enforcedDecentralization()"(overrides?: CallOverrides): Promise<string>;

    execute(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      success: boolean;
      returnData: string;
      0: boolean;
      1: string;
    }>;

    "execute(address,uint256,string,bytes)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      success: boolean;
      returnData: string;
      0: boolean;
      1: string;
    }>;

    executeEmergencyShutdown(overrides?: CallOverrides): Promise<void>;

    "executeEmergencyShutdown()"(overrides?: CallOverrides): Promise<void>;

    executeShutdown(overrides?: CallOverrides): Promise<void>;

    "executeShutdown()"(overrides?: CallOverrides): Promise<void>;

    getReferencePairs(overrides?: CallOverrides): Promise<string[]>;

    "getReferencePairs()"(overrides?: CallOverrides): Promise<string[]>;

    initUpgradeableContracts(
      _auctions: string,
      _liquidations: string,
      _market: string,
      _pegManager: string,
      _prices: string,
      _protocolLock: string,
      _rewards: string,
      _settlement: string,
      _allocationCreator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initUpgradeableContracts(address,address,address,address,address,address,address,address,address)"(
      _auctions: string,
      _liquidations: string,
      _market: string,
      _pegManager: string,
      _prices: string,
      _protocolLock: string,
      _rewards: string,
      _settlement: string,
      _allocationCreator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    isShutdown(overrides?: CallOverrides): Promise<boolean>;

    "isShutdown()"(overrides?: CallOverrides): Promise<boolean>;

    lendCoin(overrides?: CallOverrides): Promise<string>;

    "lendCoin()"(overrides?: CallOverrides): Promise<string>;

    liquidations(overrides?: CallOverrides): Promise<string>;

    "liquidations()"(overrides?: CallOverrides): Promise<string>;

    market(overrides?: CallOverrides): Promise<string>;

    "market()"(overrides?: CallOverrides): Promise<string>;

    mintCNP(
      to: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintCNP(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pegManager(overrides?: CallOverrides): Promise<string>;

    "pegManager()"(overrides?: CallOverrides): Promise<string>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    prices(overrides?: CallOverrides): Promise<string>;

    "prices()"(overrides?: CallOverrides): Promise<string>;

    protocolLock(overrides?: CallOverrides): Promise<string>;

    "protocolLock()"(overrides?: CallOverrides): Promise<string>;

    referencePair(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "referencePair(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    requireCoinReservesBurnAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requireCoinReservesBurnAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireDebtWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requireDebtWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requirePairTokenWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requirePairTokenWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requirePositionWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requirePositionWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requirePriceAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requirePriceAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireStoredCollateralAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requireStoredCollateralAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewards(overrides?: CallOverrides): Promise<string>;

    "rewards()"(overrides?: CallOverrides): Promise<string>;

    setAuctions(_auctions: string, overrides?: CallOverrides): Promise<void>;

    "setAuctions(address)"(
      _auctions: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidations(
      _liquidations: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLiquidations(address)"(
      _liquidations: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarket(_market: string, overrides?: CallOverrides): Promise<void>;

    "setMarket(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPegManager(
      _pegManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPegManager(address)"(
      _pegManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrices(_prices: string, overrides?: CallOverrides): Promise<void>;

    "setPrices(address)"(
      _prices: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewards(_rewards: string, overrides?: CallOverrides): Promise<void>;

    "setRewards(address)"(
      _rewards: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSettlement(
      _settlement: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSettlement(address)"(
      _settlement: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenAllocationCreator(
      _allocationCreator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenAllocationCreator(address)"(
      _allocationCreator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    settlement(overrides?: CallOverrides): Promise<string>;

    "settlement()"(overrides?: CallOverrides): Promise<string>;

    shutdownTime(overrides?: CallOverrides): Promise<BigNumber>;

    "shutdownTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<string>;

    "timelock()"(overrides?: CallOverrides): Promise<string>;

    unlockProtocolLock(overrides?: CallOverrides): Promise<void>;

    "unlockProtocolLock()"(overrides?: CallOverrides): Promise<void>;

    upgradeProtocol(
      newGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeProtocol(address)"(
      newGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validateAction(signature: string, overrides?: CallOverrides): Promise<void>;

    "validateAction(string)"(
      signature: string,
      overrides?: CallOverrides
    ): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;

    "weth()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    AdminUpdated(from: string | null, to: string | null): EventFilter;

    AllocationAllotted(allocation: string | null, allotment: null): EventFilter;

    ContractUpgraded(
      contractName: string | null,
      contractAddress: string | null
    ): EventFilter;

    EmergencyShutdownExecuted(emergencyShutdownTokensBurned: null): EventFilter;

    ProtocolUpgraded(newGovernor: string | null): EventFilter;

    ShutdownExecuted(): EventFilter;

    ShutdownTokensBurned(burner: string | null, count: null): EventFilter;
  };

  estimateGas: {
    EMERGENCY_SHUTDOWN_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    "EMERGENCY_SHUTDOWN_THRESHOLD()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accounting(overrides?: CallOverrides): Promise<BigNumber>;

    "accounting()"(overrides?: CallOverrides): Promise<BigNumber>;

    allocate(allocation: string, overrides?: Overrides): Promise<BigNumber>;

    "allocate(address)"(
      allocation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allocationAllotted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allocationAllotted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allocationCreator(overrides?: CallOverrides): Promise<BigNumber>;

    "allocationCreator()"(overrides?: CallOverrides): Promise<BigNumber>;

    auctions(overrides?: CallOverrides): Promise<BigNumber>;

    "auctions()"(overrides?: CallOverrides): Promise<BigNumber>;

    burnTokensForEmergencyShutdown(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burnTokensForEmergencyShutdown(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cnp(overrides?: CallOverrides): Promise<BigNumber>;

    "cnp()"(overrides?: CallOverrides): Promise<BigNumber>;

    coin(overrides?: CallOverrides): Promise<BigNumber>;

    "coin()"(overrides?: CallOverrides): Promise<BigNumber>;

    coinPositionNFT(overrides?: CallOverrides): Promise<BigNumber>;

    "coinPositionNFT()"(overrides?: CallOverrides): Promise<BigNumber>;

    coinWethPair(overrides?: CallOverrides): Promise<BigNumber>;

    "coinWethPair()"(overrides?: CallOverrides): Promise<BigNumber>;

    completeProtocolInitialization(
      _coinWethPair: string,
      _referencePair: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "completeProtocolInitialization(address,address[])"(
      _coinWethPair: string,
      _referencePair: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    currentDailyRewardCount(overrides?: CallOverrides): Promise<BigNumber>;

    "currentDailyRewardCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    delayedRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "delayedRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    "deployer()"(overrides?: CallOverrides): Promise<BigNumber>;

    devAllocation(overrides?: CallOverrides): Promise<BigNumber>;

    "devAllocation()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyShutdownTokensBurned(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "emergencyShutdownTokensBurned()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enforcedDecentralization(overrides?: CallOverrides): Promise<BigNumber>;

    "enforcedDecentralization()"(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "execute(address,uint256,string,bytes)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    executeEmergencyShutdown(overrides?: Overrides): Promise<BigNumber>;

    "executeEmergencyShutdown()"(overrides?: Overrides): Promise<BigNumber>;

    executeShutdown(overrides?: Overrides): Promise<BigNumber>;

    "executeShutdown()"(overrides?: Overrides): Promise<BigNumber>;

    getReferencePairs(overrides?: CallOverrides): Promise<BigNumber>;

    "getReferencePairs()"(overrides?: CallOverrides): Promise<BigNumber>;

    initUpgradeableContracts(
      _auctions: string,
      _liquidations: string,
      _market: string,
      _pegManager: string,
      _prices: string,
      _protocolLock: string,
      _rewards: string,
      _settlement: string,
      _allocationCreator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initUpgradeableContracts(address,address,address,address,address,address,address,address,address)"(
      _auctions: string,
      _liquidations: string,
      _market: string,
      _pegManager: string,
      _prices: string,
      _protocolLock: string,
      _rewards: string,
      _settlement: string,
      _allocationCreator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "isInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    isShutdown(overrides?: CallOverrides): Promise<BigNumber>;

    "isShutdown()"(overrides?: CallOverrides): Promise<BigNumber>;

    lendCoin(overrides?: CallOverrides): Promise<BigNumber>;

    "lendCoin()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidations(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidations()"(overrides?: CallOverrides): Promise<BigNumber>;

    market(overrides?: CallOverrides): Promise<BigNumber>;

    "market()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintCNP(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintCNP(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    pegManager(overrides?: CallOverrides): Promise<BigNumber>;

    "pegManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    prices(overrides?: CallOverrides): Promise<BigNumber>;

    "prices()"(overrides?: CallOverrides): Promise<BigNumber>;

    protocolLock(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolLock()"(overrides?: CallOverrides): Promise<BigNumber>;

    referencePair(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "referencePair(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireCoinReservesBurnAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requireCoinReservesBurnAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireDebtWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requireDebtWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requirePairTokenWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requirePairTokenWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requirePositionWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requirePositionWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requirePriceAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requirePriceAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireStoredCollateralAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requireStoredCollateralAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewards(overrides?: CallOverrides): Promise<BigNumber>;

    "rewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAuctions(_auctions: string, overrides?: Overrides): Promise<BigNumber>;

    "setAuctions(address)"(
      _auctions: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLiquidations(
      _liquidations: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLiquidations(address)"(
      _liquidations: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMarket(_market: string, overrides?: Overrides): Promise<BigNumber>;

    "setMarket(address)"(
      _market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPegManager(
      _pegManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPegManager(address)"(
      _pegManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPrices(_prices: string, overrides?: Overrides): Promise<BigNumber>;

    "setPrices(address)"(
      _prices: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRewards(_rewards: string, overrides?: Overrides): Promise<BigNumber>;

    "setRewards(address)"(
      _rewards: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSettlement(
      _settlement: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSettlement(address)"(
      _settlement: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTokenAllocationCreator(
      _allocationCreator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTokenAllocationCreator(address)"(
      _allocationCreator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    settlement(overrides?: CallOverrides): Promise<BigNumber>;

    "settlement()"(overrides?: CallOverrides): Promise<BigNumber>;

    shutdownTime(overrides?: CallOverrides): Promise<BigNumber>;

    "shutdownTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    "timelock()"(overrides?: CallOverrides): Promise<BigNumber>;

    unlockProtocolLock(overrides?: Overrides): Promise<BigNumber>;

    "unlockProtocolLock()"(overrides?: Overrides): Promise<BigNumber>;

    upgradeProtocol(
      newGovernor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgradeProtocol(address)"(
      newGovernor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validateAction(
      signature: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validateAction(string)"(
      signature: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    "weth()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    EMERGENCY_SHUTDOWN_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "EMERGENCY_SHUTDOWN_THRESHOLD()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accounting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accounting()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allocate(
      allocation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "allocate(address)"(
      allocation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allocationAllotted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allocationAllotted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allocationCreator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "allocationCreator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "auctions()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnTokensForEmergencyShutdown(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burnTokensForEmergencyShutdown(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cnp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cnp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "coin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coinPositionNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "coinPositionNFT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coinWethPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "coinWethPair()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    completeProtocolInitialization(
      _coinWethPair: string,
      _referencePair: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "completeProtocolInitialization(address,address[])"(
      _coinWethPair: string,
      _referencePair: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    currentDailyRewardCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentDailyRewardCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delayedRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "delayedRewards()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deployer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devAllocation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "devAllocation()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyShutdownTokensBurned(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "emergencyShutdownTokensBurned()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enforcedDecentralization(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "enforcedDecentralization()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execute(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "execute(address,uint256,string,bytes)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executeEmergencyShutdown(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeEmergencyShutdown()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executeShutdown(overrides?: Overrides): Promise<PopulatedTransaction>;

    "executeShutdown()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    getReferencePairs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReferencePairs()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initUpgradeableContracts(
      _auctions: string,
      _liquidations: string,
      _market: string,
      _pegManager: string,
      _prices: string,
      _protocolLock: string,
      _rewards: string,
      _settlement: string,
      _allocationCreator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initUpgradeableContracts(address,address,address,address,address,address,address,address,address)"(
      _auctions: string,
      _liquidations: string,
      _market: string,
      _pegManager: string,
      _prices: string,
      _protocolLock: string,
      _rewards: string,
      _settlement: string,
      _allocationCreator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isInitialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isShutdown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isShutdown()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lendCoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lendCoin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidations()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    market(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "market()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintCNP(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintCNP(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    pegManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pegManager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "periodLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prices(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "prices()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "protocolLock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referencePair(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "referencePair(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireCoinReservesBurnAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireCoinReservesBurnAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireDebtWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireDebtWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requirePairTokenWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requirePairTokenWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requirePositionWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requirePositionWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requirePriceAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requirePriceAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireStoredCollateralAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireStoredCollateralAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewards()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAuctions(
      _auctions: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAuctions(address)"(
      _auctions: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLiquidations(
      _liquidations: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLiquidations(address)"(
      _liquidations: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMarket(
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMarket(address)"(
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPegManager(
      _pegManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPegManager(address)"(
      _pegManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPrices(
      _prices: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPrices(address)"(
      _prices: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRewards(
      _rewards: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRewards(address)"(
      _rewards: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSettlement(
      _settlement: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSettlement(address)"(
      _settlement: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTokenAllocationCreator(
      _allocationCreator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTokenAllocationCreator(address)"(
      _allocationCreator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settlement(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "settlement()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shutdownTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "shutdownTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timelock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlockProtocolLock(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unlockProtocolLock()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeProtocol(
      newGovernor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeProtocol(address)"(
      newGovernor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validateAction(
      signature: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validateAction(string)"(
      signature: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
