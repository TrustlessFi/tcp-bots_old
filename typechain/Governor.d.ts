/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface GovernorInterface extends ethers.utils.Interface {
  functions: {
    "EMERGENCY_SHUTDOWN_THRESHOLD()": FunctionFragment;
    "accounting()": FunctionFragment;
    "allocate(address)": FunctionFragment;
    "allocationAllotted(address)": FunctionFragment;
    "allocationCreator()": FunctionFragment;
    "auctions()": FunctionFragment;
    "btc()": FunctionFragment;
    "burnTokensForEmergencyShutdown(uint256)": FunctionFragment;
    "cnp()": FunctionFragment;
    "coin()": FunctionFragment;
    "coinPositionNFT()": FunctionFragment;
    "collateralPair(uint256)": FunctionFragment;
    "collateralToPair(uint8)": FunctionFragment;
    "currentDailyRewardCount()": FunctionFragment;
    "currentPeriod()": FunctionFragment;
    "deployer()": FunctionFragment;
    "distributeCNP(address,uint256)": FunctionFragment;
    "emergencyShutdownTokensBurned()": FunctionFragment;
    "enforcedDecentralization()": FunctionFragment;
    "execute(address,uint256,string,bytes)": FunctionFragment;
    "executeEmergencyShutdown()": FunctionFragment;
    "executeShutdown()": FunctionFragment;
    "firstPeriod()": FunctionFragment;
    "getCollateralPairs()": FunctionFragment;
    "getReferencePairs()": FunctionFragment;
    "initContracts(address,address,address,address,address,address,address,address,address,address)": FunctionFragment;
    "initPricePairs(address[],address[],address[])": FunctionFragment;
    "isShutdown()": FunctionFragment;
    "lendCoin()": FunctionFragment;
    "liquidations()": FunctionFragment;
    "market()": FunctionFragment;
    "mintCNP(address,uint256)": FunctionFragment;
    "pairToCollateral(address)": FunctionFragment;
    "periodLength()": FunctionFragment;
    "powerlessAllocations(uint256)": FunctionFragment;
    "prices()": FunctionFragment;
    "protocolLock()": FunctionFragment;
    "rates()": FunctionFragment;
    "referencePair(uint256)": FunctionFragment;
    "requireCoinReservesBurnAccess(address)": FunctionFragment;
    "requireDebtWriteAccess(address)": FunctionFragment;
    "requirePairTokenWriteAccess(address)": FunctionFragment;
    "requirePositionWriteAccess(address)": FunctionFragment;
    "requirePriceAccess(address)": FunctionFragment;
    "requireStoredCollateralAccess(address)": FunctionFragment;
    "rewards()": FunctionFragment;
    "setTokenAllocationCreator(address)": FunctionFragment;
    "settlement()": FunctionFragment;
    "shutdownTime()": FunctionFragment;
    "timelock()": FunctionFragment;
    "upgradeAuctions(address)": FunctionFragment;
    "upgradeLiquidations(address)": FunctionFragment;
    "upgradeMarket(address)": FunctionFragment;
    "upgradePrices(address)": FunctionFragment;
    "upgradeProtocol(address)": FunctionFragment;
    "upgradeRates(address)": FunctionFragment;
    "upgradeRewards(address)": FunctionFragment;
    "upgradeSettlement(address)": FunctionFragment;
    "votingCNPSupply()": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "EMERGENCY_SHUTDOWN_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accounting",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "allocate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "allocationAllotted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allocationCreator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "auctions", values?: undefined): string;
  encodeFunctionData(functionFragment: "btc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burnTokensForEmergencyShutdown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cnp", values?: undefined): string;
  encodeFunctionData(functionFragment: "coin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "coinPositionNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralPair",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToPair",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentDailyRewardCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distributeCNP",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyShutdownTokensBurned",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enforcedDecentralization",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeEmergencyShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firstPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralPairs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReferencePairs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initContracts",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initPricePairs",
    values: [string[], string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lendCoin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidations",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "market", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintCNP",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pairToCollateral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "periodLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "powerlessAllocations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "prices", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolLock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rates", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "referencePair",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requireCoinReservesBurnAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireDebtWriteAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requirePairTokenWriteAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requirePositionWriteAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requirePriceAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireStoredCollateralAccess",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "rewards", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setTokenAllocationCreator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "settlement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shutdownTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeAuctions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeLiquidations",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeMarket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradePrices",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeProtocol",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeRates",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeSettlement",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "votingCNPSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "EMERGENCY_SHUTDOWN_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accounting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allocate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allocationAllotted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocationCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "btc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnTokensForEmergencyShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cnp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "coin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "coinPositionNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralToPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentDailyRewardCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeCNP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyShutdownTokensBurned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enforcedDecentralization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeEmergencyShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferencePairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initPricePairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isShutdown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lendCoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "market", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintCNP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairToCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "powerlessAllocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referencePair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireCoinReservesBurnAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireDebtWriteAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requirePairTokenWriteAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requirePositionWriteAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requirePriceAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireStoredCollateralAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAllocationCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settlement", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shutdownTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeLiquidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingCNPSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "AdminUpdated(address,address)": EventFragment;
    "AllocationAllotted(address,uint256)": EventFragment;
    "ContractUpgraded(string,address)": EventFragment;
    "EmergencyShutdownExecuted(uint256)": EventFragment;
    "ProtocolUpgraded(address)": EventFragment;
    "ShutdownExecuted()": EventFragment;
    "ShutdownTokensBurned(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllocationAllotted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyShutdownExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShutdownExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShutdownTokensBurned"): EventFragment;
}

export class Governor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: GovernorInterface;

  functions: {
    EMERGENCY_SHUTDOWN_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "EMERGENCY_SHUTDOWN_THRESHOLD()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    accounting(overrides?: CallOverrides): Promise<[string]>;

    "accounting()"(overrides?: CallOverrides): Promise<[string]>;

    allocate(
      allocation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "allocate(address)"(
      allocation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allocationAllotted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "allocationAllotted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    allocationCreator(overrides?: CallOverrides): Promise<[string]>;

    "allocationCreator()"(overrides?: CallOverrides): Promise<[string]>;

    auctions(overrides?: CallOverrides): Promise<[string]>;

    "auctions()"(overrides?: CallOverrides): Promise<[string]>;

    btc(overrides?: CallOverrides): Promise<[string]>;

    "btc()"(overrides?: CallOverrides): Promise<[string]>;

    burnTokensForEmergencyShutdown(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burnTokensForEmergencyShutdown(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cnp(overrides?: CallOverrides): Promise<[string]>;

    "cnp()"(overrides?: CallOverrides): Promise<[string]>;

    coin(overrides?: CallOverrides): Promise<[string]>;

    "coin()"(overrides?: CallOverrides): Promise<[string]>;

    coinPositionNFT(overrides?: CallOverrides): Promise<[string]>;

    "coinPositionNFT()"(overrides?: CallOverrides): Promise<[string]>;

    collateralPair(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "collateralPair(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    collateralToPair(
      collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "collateralToPair(uint8)"(
      collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    currentDailyRewardCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    "currentDailyRewardCount()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    currentPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { period: BigNumber }>;

    "currentPeriod()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { period: BigNumber }>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    "deployer()"(overrides?: CallOverrides): Promise<[string]>;

    distributeCNP(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "distributeCNP(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    emergencyShutdownTokensBurned(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "emergencyShutdownTokensBurned()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    enforcedDecentralization(overrides?: CallOverrides): Promise<[string]>;

    "enforcedDecentralization()"(overrides?: CallOverrides): Promise<[string]>;

    execute(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "execute(address,uint256,string,bytes)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeEmergencyShutdown(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeEmergencyShutdown()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeShutdown(overrides?: Overrides): Promise<ContractTransaction>;

    "executeShutdown()"(overrides?: Overrides): Promise<ContractTransaction>;

    firstPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCollateralPairs(overrides?: CallOverrides): Promise<[string[]]>;

    "getCollateralPairs()"(overrides?: CallOverrides): Promise<[string[]]>;

    getReferencePairs(overrides?: CallOverrides): Promise<[string[]]>;

    "getReferencePairs()"(overrides?: CallOverrides): Promise<[string[]]>;

    initContracts(
      _allocationCreator: string,
      _auctions: string,
      _cnp: string,
      _liquidations: string,
      _market: string,
      _rates: string,
      _prices: string,
      _protocolLock: string,
      _rewards: string,
      _settlement: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initContracts(address,address,address,address,address,address,address,address,address,address)"(
      _allocationCreator: string,
      _auctions: string,
      _cnp: string,
      _liquidations: string,
      _market: string,
      _rates: string,
      _prices: string,
      _protocolLock: string,
      _rewards: string,
      _settlement: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initPricePairs(
      _collateralPair: string[],
      _referencePair: string[],
      _powerlessAllocations: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initPricePairs(address[],address[],address[])"(
      _collateralPair: string[],
      _referencePair: string[],
      _powerlessAllocations: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isShutdown(overrides?: CallOverrides): Promise<[boolean]>;

    "isShutdown()"(overrides?: CallOverrides): Promise<[boolean]>;

    lendCoin(overrides?: CallOverrides): Promise<[string]>;

    "lendCoin()"(overrides?: CallOverrides): Promise<[string]>;

    liquidations(overrides?: CallOverrides): Promise<[string]>;

    "liquidations()"(overrides?: CallOverrides): Promise<[string]>;

    market(overrides?: CallOverrides): Promise<[string]>;

    "market()"(overrides?: CallOverrides): Promise<[string]>;

    mintCNP(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintCNP(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    pairToCollateral(
      pair: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "pairToCollateral(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    periodLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "periodLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    powerlessAllocations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "powerlessAllocations(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    prices(overrides?: CallOverrides): Promise<[string]>;

    "prices()"(overrides?: CallOverrides): Promise<[string]>;

    protocolLock(overrides?: CallOverrides): Promise<[string]>;

    "protocolLock()"(overrides?: CallOverrides): Promise<[string]>;

    rates(overrides?: CallOverrides): Promise<[string]>;

    "rates()"(overrides?: CallOverrides): Promise<[string]>;

    referencePair(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "referencePair(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    requireCoinReservesBurnAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "requireCoinReservesBurnAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    requireDebtWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "requireDebtWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    requirePairTokenWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "requirePairTokenWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    requirePositionWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "requirePositionWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    requirePriceAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "requirePriceAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    requireStoredCollateralAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "requireStoredCollateralAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    rewards(overrides?: CallOverrides): Promise<[string]>;

    "rewards()"(overrides?: CallOverrides): Promise<[string]>;

    setTokenAllocationCreator(
      _allocationCreator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTokenAllocationCreator(address)"(
      _allocationCreator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settlement(overrides?: CallOverrides): Promise<[string]>;

    "settlement()"(overrides?: CallOverrides): Promise<[string]>;

    shutdownTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "shutdownTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    timelock(overrides?: CallOverrides): Promise<[string]>;

    "timelock()"(overrides?: CallOverrides): Promise<[string]>;

    upgradeAuctions(
      _auctions: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeAuctions(address)"(
      _auctions: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeLiquidations(
      _liquidations: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeLiquidations(address)"(
      _liquidations: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeMarket(
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeMarket(address)"(
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradePrices(
      _prices: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradePrices(address)"(
      _prices: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeProtocol(
      newGovernor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeProtocol(address)"(
      newGovernor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeRates(
      _rates: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeRates(address)"(
      _rates: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeRewards(
      _rewards: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeRewards(address)"(
      _rewards: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeSettlement(
      _settlement: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeSettlement(address)"(
      _settlement: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    votingCNPSupply(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { votingSupply: BigNumber }>;

    "votingCNPSupply()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { votingSupply: BigNumber }>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    "weth()"(overrides?: CallOverrides): Promise<[string]>;
  };

  EMERGENCY_SHUTDOWN_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  "EMERGENCY_SHUTDOWN_THRESHOLD()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  accounting(overrides?: CallOverrides): Promise<string>;

  "accounting()"(overrides?: CallOverrides): Promise<string>;

  allocate(
    allocation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "allocate(address)"(
    allocation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allocationAllotted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "allocationAllotted(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  allocationCreator(overrides?: CallOverrides): Promise<string>;

  "allocationCreator()"(overrides?: CallOverrides): Promise<string>;

  auctions(overrides?: CallOverrides): Promise<string>;

  "auctions()"(overrides?: CallOverrides): Promise<string>;

  btc(overrides?: CallOverrides): Promise<string>;

  "btc()"(overrides?: CallOverrides): Promise<string>;

  burnTokensForEmergencyShutdown(
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burnTokensForEmergencyShutdown(uint256)"(
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cnp(overrides?: CallOverrides): Promise<string>;

  "cnp()"(overrides?: CallOverrides): Promise<string>;

  coin(overrides?: CallOverrides): Promise<string>;

  "coin()"(overrides?: CallOverrides): Promise<string>;

  coinPositionNFT(overrides?: CallOverrides): Promise<string>;

  "coinPositionNFT()"(overrides?: CallOverrides): Promise<string>;

  collateralPair(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "collateralPair(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  collateralToPair(
    collateral: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "collateralToPair(uint8)"(
    collateral: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  currentDailyRewardCount(overrides?: CallOverrides): Promise<BigNumber>;

  "currentDailyRewardCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "currentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  deployer(overrides?: CallOverrides): Promise<string>;

  "deployer()"(overrides?: CallOverrides): Promise<string>;

  distributeCNP(
    to: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "distributeCNP(address,uint256)"(
    to: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  emergencyShutdownTokensBurned(overrides?: CallOverrides): Promise<BigNumber>;

  "emergencyShutdownTokensBurned()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  enforcedDecentralization(overrides?: CallOverrides): Promise<string>;

  "enforcedDecentralization()"(overrides?: CallOverrides): Promise<string>;

  execute(
    target: string,
    value: BigNumberish,
    signature: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "execute(address,uint256,string,bytes)"(
    target: string,
    value: BigNumberish,
    signature: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeEmergencyShutdown(overrides?: Overrides): Promise<ContractTransaction>;

  "executeEmergencyShutdown()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeShutdown(overrides?: Overrides): Promise<ContractTransaction>;

  "executeShutdown()"(overrides?: Overrides): Promise<ContractTransaction>;

  firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "firstPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  getCollateralPairs(overrides?: CallOverrides): Promise<string[]>;

  "getCollateralPairs()"(overrides?: CallOverrides): Promise<string[]>;

  getReferencePairs(overrides?: CallOverrides): Promise<string[]>;

  "getReferencePairs()"(overrides?: CallOverrides): Promise<string[]>;

  initContracts(
    _allocationCreator: string,
    _auctions: string,
    _cnp: string,
    _liquidations: string,
    _market: string,
    _rates: string,
    _prices: string,
    _protocolLock: string,
    _rewards: string,
    _settlement: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initContracts(address,address,address,address,address,address,address,address,address,address)"(
    _allocationCreator: string,
    _auctions: string,
    _cnp: string,
    _liquidations: string,
    _market: string,
    _rates: string,
    _prices: string,
    _protocolLock: string,
    _rewards: string,
    _settlement: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initPricePairs(
    _collateralPair: string[],
    _referencePair: string[],
    _powerlessAllocations: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initPricePairs(address[],address[],address[])"(
    _collateralPair: string[],
    _referencePair: string[],
    _powerlessAllocations: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isShutdown(overrides?: CallOverrides): Promise<boolean>;

  "isShutdown()"(overrides?: CallOverrides): Promise<boolean>;

  lendCoin(overrides?: CallOverrides): Promise<string>;

  "lendCoin()"(overrides?: CallOverrides): Promise<string>;

  liquidations(overrides?: CallOverrides): Promise<string>;

  "liquidations()"(overrides?: CallOverrides): Promise<string>;

  market(overrides?: CallOverrides): Promise<string>;

  "market()"(overrides?: CallOverrides): Promise<string>;

  mintCNP(
    to: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintCNP(address,uint256)"(
    to: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  pairToCollateral(pair: string, overrides?: CallOverrides): Promise<number>;

  "pairToCollateral(address)"(
    pair: string,
    overrides?: CallOverrides
  ): Promise<number>;

  periodLength(overrides?: CallOverrides): Promise<BigNumber>;

  "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  powerlessAllocations(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "powerlessAllocations(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  prices(overrides?: CallOverrides): Promise<string>;

  "prices()"(overrides?: CallOverrides): Promise<string>;

  protocolLock(overrides?: CallOverrides): Promise<string>;

  "protocolLock()"(overrides?: CallOverrides): Promise<string>;

  rates(overrides?: CallOverrides): Promise<string>;

  "rates()"(overrides?: CallOverrides): Promise<string>;

  referencePair(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "referencePair(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  requireCoinReservesBurnAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "requireCoinReservesBurnAccess(address)"(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requireDebtWriteAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "requireDebtWriteAccess(address)"(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requirePairTokenWriteAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "requirePairTokenWriteAccess(address)"(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requirePositionWriteAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "requirePositionWriteAccess(address)"(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requirePriceAccess(caller: string, overrides?: CallOverrides): Promise<void>;

  "requirePriceAccess(address)"(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requireStoredCollateralAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "requireStoredCollateralAccess(address)"(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  rewards(overrides?: CallOverrides): Promise<string>;

  "rewards()"(overrides?: CallOverrides): Promise<string>;

  setTokenAllocationCreator(
    _allocationCreator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTokenAllocationCreator(address)"(
    _allocationCreator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settlement(overrides?: CallOverrides): Promise<string>;

  "settlement()"(overrides?: CallOverrides): Promise<string>;

  shutdownTime(overrides?: CallOverrides): Promise<BigNumber>;

  "shutdownTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  timelock(overrides?: CallOverrides): Promise<string>;

  "timelock()"(overrides?: CallOverrides): Promise<string>;

  upgradeAuctions(
    _auctions: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeAuctions(address)"(
    _auctions: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeLiquidations(
    _liquidations: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeLiquidations(address)"(
    _liquidations: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeMarket(
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeMarket(address)"(
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradePrices(
    _prices: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradePrices(address)"(
    _prices: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeProtocol(
    newGovernor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeProtocol(address)"(
    newGovernor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeRates(
    _rates: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeRates(address)"(
    _rates: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeRewards(
    _rewards: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeRewards(address)"(
    _rewards: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeSettlement(
    _settlement: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeSettlement(address)"(
    _settlement: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  votingCNPSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "votingCNPSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  weth(overrides?: CallOverrides): Promise<string>;

  "weth()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    EMERGENCY_SHUTDOWN_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    "EMERGENCY_SHUTDOWN_THRESHOLD()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accounting(overrides?: CallOverrides): Promise<string>;

    "accounting()"(overrides?: CallOverrides): Promise<string>;

    allocate(allocation: string, overrides?: CallOverrides): Promise<void>;

    "allocate(address)"(
      allocation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allocationAllotted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "allocationAllotted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allocationCreator(overrides?: CallOverrides): Promise<string>;

    "allocationCreator()"(overrides?: CallOverrides): Promise<string>;

    auctions(overrides?: CallOverrides): Promise<string>;

    "auctions()"(overrides?: CallOverrides): Promise<string>;

    btc(overrides?: CallOverrides): Promise<string>;

    "btc()"(overrides?: CallOverrides): Promise<string>;

    burnTokensForEmergencyShutdown(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burnTokensForEmergencyShutdown(uint256)"(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cnp(overrides?: CallOverrides): Promise<string>;

    "cnp()"(overrides?: CallOverrides): Promise<string>;

    coin(overrides?: CallOverrides): Promise<string>;

    "coin()"(overrides?: CallOverrides): Promise<string>;

    coinPositionNFT(overrides?: CallOverrides): Promise<string>;

    "coinPositionNFT()"(overrides?: CallOverrides): Promise<string>;

    collateralPair(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "collateralPair(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    collateralToPair(
      collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "collateralToPair(uint8)"(
      collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    currentDailyRewardCount(overrides?: CallOverrides): Promise<BigNumber>;

    "currentDailyRewardCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<string>;

    "deployer()"(overrides?: CallOverrides): Promise<string>;

    distributeCNP(
      to: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "distributeCNP(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyShutdownTokensBurned(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "emergencyShutdownTokensBurned()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enforcedDecentralization(overrides?: CallOverrides): Promise<string>;

    "enforcedDecentralization()"(overrides?: CallOverrides): Promise<string>;

    execute(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; returnData: string }>;

    "execute(address,uint256,string,bytes)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; returnData: string }>;

    executeEmergencyShutdown(overrides?: CallOverrides): Promise<void>;

    "executeEmergencyShutdown()"(overrides?: CallOverrides): Promise<void>;

    executeShutdown(overrides?: CallOverrides): Promise<void>;

    "executeShutdown()"(overrides?: CallOverrides): Promise<void>;

    firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralPairs(overrides?: CallOverrides): Promise<string[]>;

    "getCollateralPairs()"(overrides?: CallOverrides): Promise<string[]>;

    getReferencePairs(overrides?: CallOverrides): Promise<string[]>;

    "getReferencePairs()"(overrides?: CallOverrides): Promise<string[]>;

    initContracts(
      _allocationCreator: string,
      _auctions: string,
      _cnp: string,
      _liquidations: string,
      _market: string,
      _rates: string,
      _prices: string,
      _protocolLock: string,
      _rewards: string,
      _settlement: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initContracts(address,address,address,address,address,address,address,address,address,address)"(
      _allocationCreator: string,
      _auctions: string,
      _cnp: string,
      _liquidations: string,
      _market: string,
      _rates: string,
      _prices: string,
      _protocolLock: string,
      _rewards: string,
      _settlement: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initPricePairs(
      _collateralPair: string[],
      _referencePair: string[],
      _powerlessAllocations: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "initPricePairs(address[],address[],address[])"(
      _collateralPair: string[],
      _referencePair: string[],
      _powerlessAllocations: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    isShutdown(overrides?: CallOverrides): Promise<boolean>;

    "isShutdown()"(overrides?: CallOverrides): Promise<boolean>;

    lendCoin(overrides?: CallOverrides): Promise<string>;

    "lendCoin()"(overrides?: CallOverrides): Promise<string>;

    liquidations(overrides?: CallOverrides): Promise<string>;

    "liquidations()"(overrides?: CallOverrides): Promise<string>;

    market(overrides?: CallOverrides): Promise<string>;

    "market()"(overrides?: CallOverrides): Promise<string>;

    mintCNP(
      to: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintCNP(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pairToCollateral(pair: string, overrides?: CallOverrides): Promise<number>;

    "pairToCollateral(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<number>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    powerlessAllocations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "powerlessAllocations(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    prices(overrides?: CallOverrides): Promise<string>;

    "prices()"(overrides?: CallOverrides): Promise<string>;

    protocolLock(overrides?: CallOverrides): Promise<string>;

    "protocolLock()"(overrides?: CallOverrides): Promise<string>;

    rates(overrides?: CallOverrides): Promise<string>;

    "rates()"(overrides?: CallOverrides): Promise<string>;

    referencePair(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "referencePair(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    requireCoinReservesBurnAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requireCoinReservesBurnAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireDebtWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requireDebtWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requirePairTokenWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requirePairTokenWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requirePositionWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requirePositionWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requirePriceAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requirePriceAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireStoredCollateralAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requireStoredCollateralAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewards(overrides?: CallOverrides): Promise<string>;

    "rewards()"(overrides?: CallOverrides): Promise<string>;

    setTokenAllocationCreator(
      _allocationCreator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenAllocationCreator(address)"(
      _allocationCreator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    settlement(overrides?: CallOverrides): Promise<string>;

    "settlement()"(overrides?: CallOverrides): Promise<string>;

    shutdownTime(overrides?: CallOverrides): Promise<BigNumber>;

    "shutdownTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<string>;

    "timelock()"(overrides?: CallOverrides): Promise<string>;

    upgradeAuctions(
      _auctions: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeAuctions(address)"(
      _auctions: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeLiquidations(
      _liquidations: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeLiquidations(address)"(
      _liquidations: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeMarket(_market: string, overrides?: CallOverrides): Promise<void>;

    "upgradeMarket(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradePrices(_prices: string, overrides?: CallOverrides): Promise<void>;

    "upgradePrices(address)"(
      _prices: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeProtocol(
      newGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeProtocol(address)"(
      newGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeRates(_rates: string, overrides?: CallOverrides): Promise<void>;

    "upgradeRates(address)"(
      _rates: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeRewards(_rewards: string, overrides?: CallOverrides): Promise<void>;

    "upgradeRewards(address)"(
      _rewards: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeSettlement(
      _settlement: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeSettlement(address)"(
      _settlement: string,
      overrides?: CallOverrides
    ): Promise<void>;

    votingCNPSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "votingCNPSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<string>;

    "weth()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    AdminUpdated(from: string | null, to: string | null): EventFilter;

    AllocationAllotted(allocation: string | null, allotment: null): EventFilter;

    ContractUpgraded(
      contractName: string | null,
      contractAddress: string | null
    ): EventFilter;

    EmergencyShutdownExecuted(emergencyShutdownTokensBurned: null): EventFilter;

    ProtocolUpgraded(newGovernor: string | null): EventFilter;

    ShutdownExecuted(): EventFilter;

    ShutdownTokensBurned(burner: string | null, count: null): EventFilter;
  };

  estimateGas: {
    EMERGENCY_SHUTDOWN_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    "EMERGENCY_SHUTDOWN_THRESHOLD()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accounting(overrides?: CallOverrides): Promise<BigNumber>;

    "accounting()"(overrides?: CallOverrides): Promise<BigNumber>;

    allocate(allocation: string, overrides?: Overrides): Promise<BigNumber>;

    "allocate(address)"(
      allocation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allocationAllotted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allocationAllotted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allocationCreator(overrides?: CallOverrides): Promise<BigNumber>;

    "allocationCreator()"(overrides?: CallOverrides): Promise<BigNumber>;

    auctions(overrides?: CallOverrides): Promise<BigNumber>;

    "auctions()"(overrides?: CallOverrides): Promise<BigNumber>;

    btc(overrides?: CallOverrides): Promise<BigNumber>;

    "btc()"(overrides?: CallOverrides): Promise<BigNumber>;

    burnTokensForEmergencyShutdown(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burnTokensForEmergencyShutdown(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cnp(overrides?: CallOverrides): Promise<BigNumber>;

    "cnp()"(overrides?: CallOverrides): Promise<BigNumber>;

    coin(overrides?: CallOverrides): Promise<BigNumber>;

    "coin()"(overrides?: CallOverrides): Promise<BigNumber>;

    coinPositionNFT(overrides?: CallOverrides): Promise<BigNumber>;

    "coinPositionNFT()"(overrides?: CallOverrides): Promise<BigNumber>;

    collateralPair(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collateralPair(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralToPair(
      collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collateralToPair(uint8)"(
      collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentDailyRewardCount(overrides?: CallOverrides): Promise<BigNumber>;

    "currentDailyRewardCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    "deployer()"(overrides?: CallOverrides): Promise<BigNumber>;

    distributeCNP(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "distributeCNP(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    emergencyShutdownTokensBurned(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "emergencyShutdownTokensBurned()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enforcedDecentralization(overrides?: CallOverrides): Promise<BigNumber>;

    "enforcedDecentralization()"(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "execute(address,uint256,string,bytes)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    executeEmergencyShutdown(overrides?: Overrides): Promise<BigNumber>;

    "executeEmergencyShutdown()"(overrides?: Overrides): Promise<BigNumber>;

    executeShutdown(overrides?: Overrides): Promise<BigNumber>;

    "executeShutdown()"(overrides?: Overrides): Promise<BigNumber>;

    firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralPairs(overrides?: CallOverrides): Promise<BigNumber>;

    "getCollateralPairs()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReferencePairs(overrides?: CallOverrides): Promise<BigNumber>;

    "getReferencePairs()"(overrides?: CallOverrides): Promise<BigNumber>;

    initContracts(
      _allocationCreator: string,
      _auctions: string,
      _cnp: string,
      _liquidations: string,
      _market: string,
      _rates: string,
      _prices: string,
      _protocolLock: string,
      _rewards: string,
      _settlement: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initContracts(address,address,address,address,address,address,address,address,address,address)"(
      _allocationCreator: string,
      _auctions: string,
      _cnp: string,
      _liquidations: string,
      _market: string,
      _rates: string,
      _prices: string,
      _protocolLock: string,
      _rewards: string,
      _settlement: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initPricePairs(
      _collateralPair: string[],
      _referencePair: string[],
      _powerlessAllocations: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initPricePairs(address[],address[],address[])"(
      _collateralPair: string[],
      _referencePair: string[],
      _powerlessAllocations: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    isShutdown(overrides?: CallOverrides): Promise<BigNumber>;

    "isShutdown()"(overrides?: CallOverrides): Promise<BigNumber>;

    lendCoin(overrides?: CallOverrides): Promise<BigNumber>;

    "lendCoin()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidations(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidations()"(overrides?: CallOverrides): Promise<BigNumber>;

    market(overrides?: CallOverrides): Promise<BigNumber>;

    "market()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintCNP(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintCNP(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    pairToCollateral(
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pairToCollateral(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    powerlessAllocations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "powerlessAllocations(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prices(overrides?: CallOverrides): Promise<BigNumber>;

    "prices()"(overrides?: CallOverrides): Promise<BigNumber>;

    protocolLock(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolLock()"(overrides?: CallOverrides): Promise<BigNumber>;

    rates(overrides?: CallOverrides): Promise<BigNumber>;

    "rates()"(overrides?: CallOverrides): Promise<BigNumber>;

    referencePair(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "referencePair(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireCoinReservesBurnAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requireCoinReservesBurnAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireDebtWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requireDebtWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requirePairTokenWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requirePairTokenWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requirePositionWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requirePositionWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requirePriceAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requirePriceAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireStoredCollateralAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requireStoredCollateralAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewards(overrides?: CallOverrides): Promise<BigNumber>;

    "rewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    setTokenAllocationCreator(
      _allocationCreator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTokenAllocationCreator(address)"(
      _allocationCreator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    settlement(overrides?: CallOverrides): Promise<BigNumber>;

    "settlement()"(overrides?: CallOverrides): Promise<BigNumber>;

    shutdownTime(overrides?: CallOverrides): Promise<BigNumber>;

    "shutdownTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    "timelock()"(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeAuctions(
      _auctions: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgradeAuctions(address)"(
      _auctions: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeLiquidations(
      _liquidations: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgradeLiquidations(address)"(
      _liquidations: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeMarket(_market: string, overrides?: Overrides): Promise<BigNumber>;

    "upgradeMarket(address)"(
      _market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradePrices(_prices: string, overrides?: Overrides): Promise<BigNumber>;

    "upgradePrices(address)"(
      _prices: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeProtocol(
      newGovernor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgradeProtocol(address)"(
      newGovernor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeRates(_rates: string, overrides?: Overrides): Promise<BigNumber>;

    "upgradeRates(address)"(
      _rates: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeRewards(_rewards: string, overrides?: Overrides): Promise<BigNumber>;

    "upgradeRewards(address)"(
      _rewards: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeSettlement(
      _settlement: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgradeSettlement(address)"(
      _settlement: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    votingCNPSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "votingCNPSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    "weth()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    EMERGENCY_SHUTDOWN_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "EMERGENCY_SHUTDOWN_THRESHOLD()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accounting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accounting()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allocate(
      allocation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "allocate(address)"(
      allocation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allocationAllotted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allocationAllotted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allocationCreator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "allocationCreator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "auctions()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    btc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "btc()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnTokensForEmergencyShutdown(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burnTokensForEmergencyShutdown(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cnp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cnp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "coin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coinPositionNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "coinPositionNFT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralPair(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateralPair(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralToPair(
      collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateralToPair(uint8)"(
      collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentDailyRewardCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentDailyRewardCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deployer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributeCNP(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "distributeCNP(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    emergencyShutdownTokensBurned(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "emergencyShutdownTokensBurned()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enforcedDecentralization(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "enforcedDecentralization()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execute(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "execute(address,uint256,string,bytes)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executeEmergencyShutdown(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeEmergencyShutdown()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executeShutdown(overrides?: Overrides): Promise<PopulatedTransaction>;

    "executeShutdown()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    firstPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollateralPairs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCollateralPairs()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReferencePairs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReferencePairs()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initContracts(
      _allocationCreator: string,
      _auctions: string,
      _cnp: string,
      _liquidations: string,
      _market: string,
      _rates: string,
      _prices: string,
      _protocolLock: string,
      _rewards: string,
      _settlement: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initContracts(address,address,address,address,address,address,address,address,address,address)"(
      _allocationCreator: string,
      _auctions: string,
      _cnp: string,
      _liquidations: string,
      _market: string,
      _rates: string,
      _prices: string,
      _protocolLock: string,
      _rewards: string,
      _settlement: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initPricePairs(
      _collateralPair: string[],
      _referencePair: string[],
      _powerlessAllocations: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initPricePairs(address[],address[],address[])"(
      _collateralPair: string[],
      _referencePair: string[],
      _powerlessAllocations: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isShutdown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isShutdown()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lendCoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lendCoin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidations()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    market(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "market()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintCNP(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintCNP(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    pairToCollateral(
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pairToCollateral(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "periodLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    powerlessAllocations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "powerlessAllocations(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prices(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "prices()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "protocolLock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rates()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referencePair(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "referencePair(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireCoinReservesBurnAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireCoinReservesBurnAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireDebtWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireDebtWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requirePairTokenWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requirePairTokenWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requirePositionWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requirePositionWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requirePriceAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requirePriceAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireStoredCollateralAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireStoredCollateralAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewards()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setTokenAllocationCreator(
      _allocationCreator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTokenAllocationCreator(address)"(
      _allocationCreator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settlement(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "settlement()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shutdownTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "shutdownTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timelock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeAuctions(
      _auctions: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeAuctions(address)"(
      _auctions: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeLiquidations(
      _liquidations: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeLiquidations(address)"(
      _liquidations: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeMarket(
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeMarket(address)"(
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradePrices(
      _prices: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradePrices(address)"(
      _prices: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeProtocol(
      newGovernor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeProtocol(address)"(
      newGovernor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeRates(
      _rates: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeRates(address)"(
      _rates: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeRewards(
      _rewards: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeRewards(address)"(
      _rewards: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeSettlement(
      _settlement: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeSettlement(address)"(
      _settlement: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    votingCNPSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "votingCNPSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
