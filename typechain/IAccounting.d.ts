/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IAccountingInterface extends ethers.utils.Interface {
  functions: {
    "adjustDebt(uint8,uint256,bool)": FunctionFragment;
    "debt()": FunctionFragment;
    "debtByCollateral(uint8)": FunctionFragment;
    "distributePairTokens(address,address,uint256)": FunctionFragment;
    "getBasicPositionInfo(uint64)": FunctionFragment;
    "getLiquidationAccount(uint8)": FunctionFragment;
    "getPairTokenPosition(address,address)": FunctionFragment;
    "getPosition(uint64)": FunctionFragment;
    "getSystemDebtInfo()": FunctionFragment;
    "registerPosition(uint64,uint8)": FunctionFragment;
    "sendCollateral(uint8,address,uint256)": FunctionFragment;
    "sendLentCoin(address,uint256)": FunctionFragment;
    "setLiquidationAccount(uint8,tuple)": FunctionFragment;
    "setPairTokenPosition(address,address,tuple)": FunctionFragment;
    "setPosition(uint64,tuple)": FunctionFragment;
    "setSystemDebtInfo(tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "adjustDebt",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "debt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "debtByCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributePairTokens",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBasicPositionInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationAccount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairTokenPosition",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSystemDebtInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerPosition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendCollateral",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendLentCoin",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationAccount",
    values: [
      BigNumberish,
      {
        startDebtExchangeRate: BigNumberish;
        debt: BigNumberish;
        collateral: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPairTokenPosition",
    values: [
      string,
      string,
      {
        totalRewards: BigNumberish;
        count: BigNumberish;
        cumulativePairCoinCount: BigNumberish;
        lastPeriodRewarded: BigNumberish;
        unlockPeriod: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPosition",
    values: [
      BigNumberish,
      {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startCNPRewards: BigNumberish;
        collateralizationBandIndex: BigNumberish;
        lastUpdateTime: BigNumberish;
        lastBorrowTime: BigNumberish;
        collateralizationBand: BigNumberish;
        collateralType: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setSystemDebtInfo",
    values: [
      {
        ethDebt: BigNumberish;
        btcDebt: BigNumberish;
        totalCNPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      }
    ]
  ): string;

  decodeFunctionResult(functionFragment: "adjustDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "debt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "debtByCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributePairTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBasicPositionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairTokenPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSystemDebtInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendLentCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPairTokenPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSystemDebtInfo",
    data: BytesLike
  ): Result;

  events: {};
}

export class IAccounting extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IAccountingInterface;

  functions: {
    adjustDebt(
      collateralType: BigNumberish,
      count: BigNumberish,
      increase: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adjustDebt(uint8,uint256,bool)"(
      collateralType: BigNumberish,
      count: BigNumberish,
      increase: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    debt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "debt()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    debtByCollateral(
      collateralType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "debtByCollateral(uint8)"(
      collateralType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    distributePairTokens(
      to: string,
      pair: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "distributePairTokens(address,address,uint256)"(
      to: string,
      pair: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getBasicPositionInfo(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        collateralType: number;
        debtCount: BigNumber;
        collateralCount: BigNumber;
      }
    >;

    "getBasicPositionInfo(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        collateralType: number;
        debtCount: BigNumber;
        collateralCount: BigNumber;
      }
    >;

    getLiquidationAccount(
      collateralType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          startDebtExchangeRate: BigNumber;
          debt: BigNumber;
          collateral: BigNumber;
        }
      ] & {
        lqAcct: [BigNumber, BigNumber, BigNumber] & {
          startDebtExchangeRate: BigNumber;
          debt: BigNumber;
          collateral: BigNumber;
        };
      }
    >;

    "getLiquidationAccount(uint8)"(
      collateralType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          startDebtExchangeRate: BigNumber;
          debt: BigNumber;
          collateral: BigNumber;
        }
      ] & {
        lqAcct: [BigNumber, BigNumber, BigNumber] & {
          startDebtExchangeRate: BigNumber;
          debt: BigNumber;
          collateral: BigNumber;
        };
      }
    >;

    getPairTokenPosition(
      owner: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          totalRewards: BigNumber;
          count: BigNumber;
          cumulativePairCoinCount: BigNumber;
          lastPeriodRewarded: BigNumber;
          unlockPeriod: BigNumber;
        }
      ]
    >;

    "getPairTokenPosition(address,address)"(
      owner: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          totalRewards: BigNumber;
          count: BigNumber;
          cumulativePairCoinCount: BigNumber;
          lastPeriodRewarded: BigNumber;
          unlockPeriod: BigNumber;
        }
      ]
    >;

    getPosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number
        ] & {
          startCumulativeDebt: BigNumber;
          collateral: BigNumber;
          debt: BigNumber;
          startDebtExchangeRate: BigNumber;
          startCNPRewards: BigNumber;
          collateralizationBandIndex: BigNumber;
          lastUpdateTime: BigNumber;
          lastBorrowTime: BigNumber;
          collateralizationBand: number;
          collateralType: number;
        }
      ] & {
        acct: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number
        ] & {
          startCumulativeDebt: BigNumber;
          collateral: BigNumber;
          debt: BigNumber;
          startDebtExchangeRate: BigNumber;
          startCNPRewards: BigNumber;
          collateralizationBandIndex: BigNumber;
          lastUpdateTime: BigNumber;
          lastBorrowTime: BigNumber;
          collateralizationBand: number;
          collateralType: number;
        };
      }
    >;

    "getPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number
        ] & {
          startCumulativeDebt: BigNumber;
          collateral: BigNumber;
          debt: BigNumber;
          startDebtExchangeRate: BigNumber;
          startCNPRewards: BigNumber;
          collateralizationBandIndex: BigNumber;
          lastUpdateTime: BigNumber;
          lastBorrowTime: BigNumber;
          collateralizationBand: number;
          collateralType: number;
        }
      ] & {
        acct: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number
        ] & {
          startCumulativeDebt: BigNumber;
          collateral: BigNumber;
          debt: BigNumber;
          startDebtExchangeRate: BigNumber;
          startCNPRewards: BigNumber;
          collateralizationBandIndex: BigNumber;
          lastUpdateTime: BigNumber;
          lastBorrowTime: BigNumber;
          collateralizationBand: number;
          collateralType: number;
        };
      }
    >;

    getSystemDebtInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          ethDebt: BigNumber;
          btcDebt: BigNumber;
          totalCNPRewards: BigNumber;
          cumulativeDebt: BigNumber;
          debtExchangeRate: BigNumber;
        }
      ]
    >;

    "getSystemDebtInfo()"(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          ethDebt: BigNumber;
          btcDebt: BigNumber;
          totalCNPRewards: BigNumber;
          cumulativeDebt: BigNumber;
          debtExchangeRate: BigNumber;
        }
      ]
    >;

    registerPosition(
      positionID: BigNumberish,
      collateralType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerPosition(uint64,uint8)"(
      positionID: BigNumberish,
      collateralType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sendCollateral(
      collateralType: BigNumberish,
      account: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sendCollateral(uint8,address,uint256)"(
      collateralType: BigNumberish,
      account: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sendLentCoin(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sendLentCoin(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLiquidationAccount(
      collateralType: BigNumberish,
      lqAcct: {
        startDebtExchangeRate: BigNumberish;
        debt: BigNumberish;
        collateral: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLiquidationAccount(uint8,tuple)"(
      collateralType: BigNumberish,
      lqAcct: {
        startDebtExchangeRate: BigNumberish;
        debt: BigNumberish;
        collateral: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPairTokenPosition(
      owner: string,
      pair: string,
      pt: {
        totalRewards: BigNumberish;
        count: BigNumberish;
        cumulativePairCoinCount: BigNumberish;
        lastPeriodRewarded: BigNumberish;
        unlockPeriod: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPairTokenPosition(address,address,tuple)"(
      owner: string,
      pair: string,
      pt: {
        totalRewards: BigNumberish;
        count: BigNumberish;
        cumulativePairCoinCount: BigNumberish;
        lastPeriodRewarded: BigNumberish;
        unlockPeriod: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPosition(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startCNPRewards: BigNumberish;
        collateralizationBandIndex: BigNumberish;
        lastUpdateTime: BigNumberish;
        lastBorrowTime: BigNumberish;
        collateralizationBand: BigNumberish;
        collateralType: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPosition(uint64,tuple)"(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startCNPRewards: BigNumberish;
        collateralizationBandIndex: BigNumberish;
        lastUpdateTime: BigNumberish;
        lastBorrowTime: BigNumberish;
        collateralizationBand: BigNumberish;
        collateralType: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSystemDebtInfo(
      _systemDebtInfo: {
        ethDebt: BigNumberish;
        btcDebt: BigNumberish;
        totalCNPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSystemDebtInfo(tuple)"(
      _systemDebtInfo: {
        ethDebt: BigNumberish;
        btcDebt: BigNumberish;
        totalCNPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  adjustDebt(
    collateralType: BigNumberish,
    count: BigNumberish,
    increase: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adjustDebt(uint8,uint256,bool)"(
    collateralType: BigNumberish,
    count: BigNumberish,
    increase: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  debt(overrides?: CallOverrides): Promise<BigNumber>;

  "debt()"(overrides?: CallOverrides): Promise<BigNumber>;

  debtByCollateral(
    collateralType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "debtByCollateral(uint8)"(
    collateralType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  distributePairTokens(
    to: string,
    pair: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "distributePairTokens(address,address,uint256)"(
    to: string,
    pair: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getBasicPositionInfo(
    positionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber] & {
      collateralType: number;
      debtCount: BigNumber;
      collateralCount: BigNumber;
    }
  >;

  "getBasicPositionInfo(uint64)"(
    positionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber] & {
      collateralType: number;
      debtCount: BigNumber;
      collateralCount: BigNumber;
    }
  >;

  getLiquidationAccount(
    collateralType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      startDebtExchangeRate: BigNumber;
      debt: BigNumber;
      collateral: BigNumber;
    }
  >;

  "getLiquidationAccount(uint8)"(
    collateralType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      startDebtExchangeRate: BigNumber;
      debt: BigNumber;
      collateral: BigNumber;
    }
  >;

  getPairTokenPosition(
    owner: string,
    pair: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalRewards: BigNumber;
      count: BigNumber;
      cumulativePairCoinCount: BigNumber;
      lastPeriodRewarded: BigNumber;
      unlockPeriod: BigNumber;
    }
  >;

  "getPairTokenPosition(address,address)"(
    owner: string,
    pair: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalRewards: BigNumber;
      count: BigNumber;
      cumulativePairCoinCount: BigNumber;
      lastPeriodRewarded: BigNumber;
      unlockPeriod: BigNumber;
    }
  >;

  getPosition(
    positionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number
    ] & {
      startCumulativeDebt: BigNumber;
      collateral: BigNumber;
      debt: BigNumber;
      startDebtExchangeRate: BigNumber;
      startCNPRewards: BigNumber;
      collateralizationBandIndex: BigNumber;
      lastUpdateTime: BigNumber;
      lastBorrowTime: BigNumber;
      collateralizationBand: number;
      collateralType: number;
    }
  >;

  "getPosition(uint64)"(
    positionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number
    ] & {
      startCumulativeDebt: BigNumber;
      collateral: BigNumber;
      debt: BigNumber;
      startDebtExchangeRate: BigNumber;
      startCNPRewards: BigNumber;
      collateralizationBandIndex: BigNumber;
      lastUpdateTime: BigNumber;
      lastBorrowTime: BigNumber;
      collateralizationBand: number;
      collateralType: number;
    }
  >;

  getSystemDebtInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      ethDebt: BigNumber;
      btcDebt: BigNumber;
      totalCNPRewards: BigNumber;
      cumulativeDebt: BigNumber;
      debtExchangeRate: BigNumber;
    }
  >;

  "getSystemDebtInfo()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      ethDebt: BigNumber;
      btcDebt: BigNumber;
      totalCNPRewards: BigNumber;
      cumulativeDebt: BigNumber;
      debtExchangeRate: BigNumber;
    }
  >;

  registerPosition(
    positionID: BigNumberish,
    collateralType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerPosition(uint64,uint8)"(
    positionID: BigNumberish,
    collateralType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sendCollateral(
    collateralType: BigNumberish,
    account: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sendCollateral(uint8,address,uint256)"(
    collateralType: BigNumberish,
    account: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sendLentCoin(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sendLentCoin(address,uint256)"(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLiquidationAccount(
    collateralType: BigNumberish,
    lqAcct: {
      startDebtExchangeRate: BigNumberish;
      debt: BigNumberish;
      collateral: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLiquidationAccount(uint8,tuple)"(
    collateralType: BigNumberish,
    lqAcct: {
      startDebtExchangeRate: BigNumberish;
      debt: BigNumberish;
      collateral: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPairTokenPosition(
    owner: string,
    pair: string,
    pt: {
      totalRewards: BigNumberish;
      count: BigNumberish;
      cumulativePairCoinCount: BigNumberish;
      lastPeriodRewarded: BigNumberish;
      unlockPeriod: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPairTokenPosition(address,address,tuple)"(
    owner: string,
    pair: string,
    pt: {
      totalRewards: BigNumberish;
      count: BigNumberish;
      cumulativePairCoinCount: BigNumberish;
      lastPeriodRewarded: BigNumberish;
      unlockPeriod: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPosition(
    positionID: BigNumberish,
    dp: {
      startCumulativeDebt: BigNumberish;
      collateral: BigNumberish;
      debt: BigNumberish;
      startDebtExchangeRate: BigNumberish;
      startCNPRewards: BigNumberish;
      collateralizationBandIndex: BigNumberish;
      lastUpdateTime: BigNumberish;
      lastBorrowTime: BigNumberish;
      collateralizationBand: BigNumberish;
      collateralType: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPosition(uint64,tuple)"(
    positionID: BigNumberish,
    dp: {
      startCumulativeDebt: BigNumberish;
      collateral: BigNumberish;
      debt: BigNumberish;
      startDebtExchangeRate: BigNumberish;
      startCNPRewards: BigNumberish;
      collateralizationBandIndex: BigNumberish;
      lastUpdateTime: BigNumberish;
      lastBorrowTime: BigNumberish;
      collateralizationBand: BigNumberish;
      collateralType: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSystemDebtInfo(
    _systemDebtInfo: {
      ethDebt: BigNumberish;
      btcDebt: BigNumberish;
      totalCNPRewards: BigNumberish;
      cumulativeDebt: BigNumberish;
      debtExchangeRate: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSystemDebtInfo(tuple)"(
    _systemDebtInfo: {
      ethDebt: BigNumberish;
      btcDebt: BigNumberish;
      totalCNPRewards: BigNumberish;
      cumulativeDebt: BigNumberish;
      debtExchangeRate: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    adjustDebt(
      collateralType: BigNumberish,
      count: BigNumberish,
      increase: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "adjustDebt(uint8,uint256,bool)"(
      collateralType: BigNumberish,
      count: BigNumberish,
      increase: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    debt(overrides?: CallOverrides): Promise<BigNumber>;

    "debt()"(overrides?: CallOverrides): Promise<BigNumber>;

    debtByCollateral(
      collateralType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "debtByCollateral(uint8)"(
      collateralType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributePairTokens(
      to: string,
      pair: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "distributePairTokens(address,address,uint256)"(
      to: string,
      pair: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBasicPositionInfo(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        collateralType: number;
        debtCount: BigNumber;
        collateralCount: BigNumber;
      }
    >;

    "getBasicPositionInfo(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        collateralType: number;
        debtCount: BigNumber;
        collateralCount: BigNumber;
      }
    >;

    getLiquidationAccount(
      collateralType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startDebtExchangeRate: BigNumber;
        debt: BigNumber;
        collateral: BigNumber;
      }
    >;

    "getLiquidationAccount(uint8)"(
      collateralType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startDebtExchangeRate: BigNumber;
        debt: BigNumber;
        collateral: BigNumber;
      }
    >;

    getPairTokenPosition(
      owner: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalRewards: BigNumber;
        count: BigNumber;
        cumulativePairCoinCount: BigNumber;
        lastPeriodRewarded: BigNumber;
        unlockPeriod: BigNumber;
      }
    >;

    "getPairTokenPosition(address,address)"(
      owner: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalRewards: BigNumber;
        count: BigNumber;
        cumulativePairCoinCount: BigNumber;
        lastPeriodRewarded: BigNumber;
        unlockPeriod: BigNumber;
      }
    >;

    getPosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number
      ] & {
        startCumulativeDebt: BigNumber;
        collateral: BigNumber;
        debt: BigNumber;
        startDebtExchangeRate: BigNumber;
        startCNPRewards: BigNumber;
        collateralizationBandIndex: BigNumber;
        lastUpdateTime: BigNumber;
        lastBorrowTime: BigNumber;
        collateralizationBand: number;
        collateralType: number;
      }
    >;

    "getPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number
      ] & {
        startCumulativeDebt: BigNumber;
        collateral: BigNumber;
        debt: BigNumber;
        startDebtExchangeRate: BigNumber;
        startCNPRewards: BigNumber;
        collateralizationBandIndex: BigNumber;
        lastUpdateTime: BigNumber;
        lastBorrowTime: BigNumber;
        collateralizationBand: number;
        collateralType: number;
      }
    >;

    getSystemDebtInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        ethDebt: BigNumber;
        btcDebt: BigNumber;
        totalCNPRewards: BigNumber;
        cumulativeDebt: BigNumber;
        debtExchangeRate: BigNumber;
      }
    >;

    "getSystemDebtInfo()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        ethDebt: BigNumber;
        btcDebt: BigNumber;
        totalCNPRewards: BigNumber;
        cumulativeDebt: BigNumber;
        debtExchangeRate: BigNumber;
      }
    >;

    registerPosition(
      positionID: BigNumberish,
      collateralType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerPosition(uint64,uint8)"(
      positionID: BigNumberish,
      collateralType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendCollateral(
      collateralType: BigNumberish,
      account: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendCollateral(uint8,address,uint256)"(
      collateralType: BigNumberish,
      account: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendLentCoin(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendLentCoin(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationAccount(
      collateralType: BigNumberish,
      lqAcct: {
        startDebtExchangeRate: BigNumberish;
        debt: BigNumberish;
        collateral: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setLiquidationAccount(uint8,tuple)"(
      collateralType: BigNumberish,
      lqAcct: {
        startDebtExchangeRate: BigNumberish;
        debt: BigNumberish;
        collateral: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setPairTokenPosition(
      owner: string,
      pair: string,
      pt: {
        totalRewards: BigNumberish;
        count: BigNumberish;
        cumulativePairCoinCount: BigNumberish;
        lastPeriodRewarded: BigNumberish;
        unlockPeriod: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setPairTokenPosition(address,address,tuple)"(
      owner: string,
      pair: string,
      pt: {
        totalRewards: BigNumberish;
        count: BigNumberish;
        cumulativePairCoinCount: BigNumberish;
        lastPeriodRewarded: BigNumberish;
        unlockPeriod: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setPosition(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startCNPRewards: BigNumberish;
        collateralizationBandIndex: BigNumberish;
        lastUpdateTime: BigNumberish;
        lastBorrowTime: BigNumberish;
        collateralizationBand: BigNumberish;
        collateralType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setPosition(uint64,tuple)"(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startCNPRewards: BigNumberish;
        collateralizationBandIndex: BigNumberish;
        lastUpdateTime: BigNumberish;
        lastBorrowTime: BigNumberish;
        collateralizationBand: BigNumberish;
        collateralType: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setSystemDebtInfo(
      _systemDebtInfo: {
        ethDebt: BigNumberish;
        btcDebt: BigNumberish;
        totalCNPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setSystemDebtInfo(tuple)"(
      _systemDebtInfo: {
        ethDebt: BigNumberish;
        btcDebt: BigNumberish;
        totalCNPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    adjustDebt(
      collateralType: BigNumberish,
      count: BigNumberish,
      increase: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adjustDebt(uint8,uint256,bool)"(
      collateralType: BigNumberish,
      count: BigNumberish,
      increase: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    debt(overrides?: CallOverrides): Promise<BigNumber>;

    "debt()"(overrides?: CallOverrides): Promise<BigNumber>;

    debtByCollateral(
      collateralType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "debtByCollateral(uint8)"(
      collateralType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributePairTokens(
      to: string,
      pair: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "distributePairTokens(address,address,uint256)"(
      to: string,
      pair: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getBasicPositionInfo(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBasicPositionInfo(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidationAccount(
      collateralType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLiquidationAccount(uint8)"(
      collateralType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairTokenPosition(
      owner: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPairTokenPosition(address,address)"(
      owner: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSystemDebtInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "getSystemDebtInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    registerPosition(
      positionID: BigNumberish,
      collateralType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerPosition(uint64,uint8)"(
      positionID: BigNumberish,
      collateralType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sendCollateral(
      collateralType: BigNumberish,
      account: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sendCollateral(uint8,address,uint256)"(
      collateralType: BigNumberish,
      account: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sendLentCoin(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sendLentCoin(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLiquidationAccount(
      collateralType: BigNumberish,
      lqAcct: {
        startDebtExchangeRate: BigNumberish;
        debt: BigNumberish;
        collateral: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLiquidationAccount(uint8,tuple)"(
      collateralType: BigNumberish,
      lqAcct: {
        startDebtExchangeRate: BigNumberish;
        debt: BigNumberish;
        collateral: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPairTokenPosition(
      owner: string,
      pair: string,
      pt: {
        totalRewards: BigNumberish;
        count: BigNumberish;
        cumulativePairCoinCount: BigNumberish;
        lastPeriodRewarded: BigNumberish;
        unlockPeriod: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPairTokenPosition(address,address,tuple)"(
      owner: string,
      pair: string,
      pt: {
        totalRewards: BigNumberish;
        count: BigNumberish;
        cumulativePairCoinCount: BigNumberish;
        lastPeriodRewarded: BigNumberish;
        unlockPeriod: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPosition(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startCNPRewards: BigNumberish;
        collateralizationBandIndex: BigNumberish;
        lastUpdateTime: BigNumberish;
        lastBorrowTime: BigNumberish;
        collateralizationBand: BigNumberish;
        collateralType: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPosition(uint64,tuple)"(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startCNPRewards: BigNumberish;
        collateralizationBandIndex: BigNumberish;
        lastUpdateTime: BigNumberish;
        lastBorrowTime: BigNumberish;
        collateralizationBand: BigNumberish;
        collateralType: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSystemDebtInfo(
      _systemDebtInfo: {
        ethDebt: BigNumberish;
        btcDebt: BigNumberish;
        totalCNPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSystemDebtInfo(tuple)"(
      _systemDebtInfo: {
        ethDebt: BigNumberish;
        btcDebt: BigNumberish;
        totalCNPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adjustDebt(
      collateralType: BigNumberish,
      count: BigNumberish,
      increase: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adjustDebt(uint8,uint256,bool)"(
      collateralType: BigNumberish,
      count: BigNumberish,
      increase: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    debt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "debt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtByCollateral(
      collateralType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "debtByCollateral(uint8)"(
      collateralType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributePairTokens(
      to: string,
      pair: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "distributePairTokens(address,address,uint256)"(
      to: string,
      pair: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getBasicPositionInfo(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBasicPositionInfo(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidationAccount(
      collateralType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidationAccount(uint8)"(
      collateralType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPairTokenPosition(
      owner: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPairTokenPosition(address,address)"(
      owner: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSystemDebtInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSystemDebtInfo()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerPosition(
      positionID: BigNumberish,
      collateralType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerPosition(uint64,uint8)"(
      positionID: BigNumberish,
      collateralType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sendCollateral(
      collateralType: BigNumberish,
      account: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sendCollateral(uint8,address,uint256)"(
      collateralType: BigNumberish,
      account: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sendLentCoin(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sendLentCoin(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLiquidationAccount(
      collateralType: BigNumberish,
      lqAcct: {
        startDebtExchangeRate: BigNumberish;
        debt: BigNumberish;
        collateral: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLiquidationAccount(uint8,tuple)"(
      collateralType: BigNumberish,
      lqAcct: {
        startDebtExchangeRate: BigNumberish;
        debt: BigNumberish;
        collateral: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPairTokenPosition(
      owner: string,
      pair: string,
      pt: {
        totalRewards: BigNumberish;
        count: BigNumberish;
        cumulativePairCoinCount: BigNumberish;
        lastPeriodRewarded: BigNumberish;
        unlockPeriod: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPairTokenPosition(address,address,tuple)"(
      owner: string,
      pair: string,
      pt: {
        totalRewards: BigNumberish;
        count: BigNumberish;
        cumulativePairCoinCount: BigNumberish;
        lastPeriodRewarded: BigNumberish;
        unlockPeriod: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPosition(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startCNPRewards: BigNumberish;
        collateralizationBandIndex: BigNumberish;
        lastUpdateTime: BigNumberish;
        lastBorrowTime: BigNumberish;
        collateralizationBand: BigNumberish;
        collateralType: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPosition(uint64,tuple)"(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startCNPRewards: BigNumberish;
        collateralizationBandIndex: BigNumberish;
        lastUpdateTime: BigNumberish;
        lastBorrowTime: BigNumberish;
        collateralizationBand: BigNumberish;
        collateralType: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSystemDebtInfo(
      _systemDebtInfo: {
        ethDebt: BigNumberish;
        btcDebt: BigNumberish;
        totalCNPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSystemDebtInfo(tuple)"(
      _systemDebtInfo: {
        ethDebt: BigNumberish;
        btcDebt: BigNumberish;
        totalCNPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
