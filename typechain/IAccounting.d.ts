/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IAccountingInterface extends ethers.utils.Interface {
  functions: {
    "addPositionToIndex(uint256,int24,int24,address)": FunctionFragment;
    "debt()": FunctionFragment;
    "decreaseDebt(uint256)": FunctionFragment;
    "decreasePoolLiquidity(uint16,uint256)": FunctionFragment;
    "distributeLiquidityNft(uint256,address)": FunctionFragment;
    "getBasicPositionInfo(uint64)": FunctionFragment;
    "getGenesisPeriodCoinLiquidity(address)": FunctionFragment;
    "getLiquidationAccount()": FunctionFragment;
    "getParticipatedInMarketGenesis(address)": FunctionFragment;
    "getPoolPosition(uint256)": FunctionFragment;
    "getPosition(uint64)": FunctionFragment;
    "getRewardStatus(uint16)": FunctionFragment;
    "getSystemDebtInfo()": FunctionFragment;
    "increaseDebt(uint256)": FunctionFragment;
    "increasePoolLiquidity(uint16,uint256)": FunctionFragment;
    "onRewardsUpgrade(address)": FunctionFragment;
    "oneToOneMintedCoin()": FunctionFragment;
    "poolLiquidity(uint16)": FunctionFragment;
    "sendCollateral(address,uint256)": FunctionFragment;
    "sendLentCoin(address,uint256)": FunctionFragment;
    "sendOneToOneBackedTokens(address,address,uint256)": FunctionFragment;
    "setGenesisPeriodCoinTokenCount(address,uint256)": FunctionFragment;
    "setLiquidationAccount(tuple)": FunctionFragment;
    "setOneToOneMintedCoin(uint256)": FunctionFragment;
    "setParticipatedInMarketGenesis(address,bool)": FunctionFragment;
    "setPoolPosition(uint256,tuple)": FunctionFragment;
    "setPosition(uint64,tuple)": FunctionFragment;
    "setRewardStatus(uint16,tuple)": FunctionFragment;
    "setSystemDebtInfo(tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addPositionToIndex",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "debt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePoolLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeLiquidityNft",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBasicPositionInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGenesisPeriodCoinLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipatedInMarketGenesis",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSystemDebtInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePoolLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onRewardsUpgrade",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "oneToOneMintedCoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendCollateral",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendLentCoin",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendOneToOneBackedTokens",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGenesisPeriodCoinTokenCount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationAccount",
    values: [
      {
        startDebtExchangeRate: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOneToOneMintedCoin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setParticipatedInMarketGenesis",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolPosition",
    values: [
      BigNumberish,
      {
        owner: string;
        poolID: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        totalRewards: BigNumberish;
        liquidity: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        lastTimeRewarded: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPosition",
    values: [
      BigNumberish,
      {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startCNPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        collateralizationBand: BigNumberish;
        collateralizationBandIndex: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardStatus",
    values: [
      BigNumberish,
      { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setSystemDebtInfo",
    values: [
      {
        debt: BigNumberish;
        totalCNPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addPositionToIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePoolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeLiquidityNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBasicPositionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGenesisPeriodCoinLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParticipatedInMarketGenesis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSystemDebtInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePoolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onRewardsUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oneToOneMintedCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendLentCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendOneToOneBackedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGenesisPeriodCoinTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOneToOneMintedCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setParticipatedInMarketGenesis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSystemDebtInfo",
    data: BytesLike
  ): Result;

  events: {
    "DebtPositionIndexingDisabled()": EventFragment;
    "PoolPositionIndexingDisabled()": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "DebtPositionIndexingDisabled"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PoolPositionIndexingDisabled"
  ): EventFragment;
}

export class IAccounting extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IAccountingInterface;

  functions: {
    addPositionToIndex(
      nftID: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addPositionToIndex(uint256,int24,int24,address)"(
      nftID: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    debt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "debt()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    decreaseDebt(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "decreaseDebt(uint256)"(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreasePoolLiquidity(
      poolID: BigNumberish,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "decreasePoolLiquidity(uint16,uint256)"(
      poolID: BigNumberish,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributeLiquidityNft(
      nftID: BigNumberish,
      dest: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "distributeLiquidityNft(uint256,address)"(
      nftID: BigNumberish,
      dest: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBasicPositionInfo(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        debtCount: BigNumber;
        collateralCount: BigNumber;
      }
    >;

    "getBasicPositionInfo(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        debtCount: BigNumber;
        collateralCount: BigNumber;
      }
    >;

    getGenesisPeriodCoinLiquidity(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidity: BigNumber }>;

    "getGenesisPeriodCoinLiquidity(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidity: BigNumber }>;

    getLiquidationAccount(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          startDebtExchangeRate: BigNumber;
          collateral: BigNumber;
          debt: BigNumber;
        }
      ] & {
        lqAcct: [BigNumber, BigNumber, BigNumber] & {
          startDebtExchangeRate: BigNumber;
          collateral: BigNumber;
          debt: BigNumber;
        };
      }
    >;

    "getLiquidationAccount()"(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          startDebtExchangeRate: BigNumber;
          collateral: BigNumber;
          debt: BigNumber;
        }
      ] & {
        lqAcct: [BigNumber, BigNumber, BigNumber] & {
          startDebtExchangeRate: BigNumber;
          collateral: BigNumber;
          debt: BigNumber;
        };
      }
    >;

    getParticipatedInMarketGenesis(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { participated: boolean }>;

    "getParticipatedInMarketGenesis(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { participated: boolean }>;

    getPoolPosition(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          number,
          number,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          poolID: number;
          tickLower: number;
          tickUpper: number;
          totalRewards: BigNumber;
          liquidity: BigNumber;
          cumulativeLiquidity: BigNumber;
          lastTimeRewarded: BigNumber;
        }
      ] & {
        pt: [
          string,
          number,
          number,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          poolID: number;
          tickLower: number;
          tickUpper: number;
          totalRewards: BigNumber;
          liquidity: BigNumber;
          cumulativeLiquidity: BigNumber;
          lastTimeRewarded: BigNumber;
        };
      }
    >;

    "getPoolPosition(uint256)"(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          number,
          number,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          poolID: number;
          tickLower: number;
          tickUpper: number;
          totalRewards: BigNumber;
          liquidity: BigNumber;
          cumulativeLiquidity: BigNumber;
          lastTimeRewarded: BigNumber;
        }
      ] & {
        pt: [
          string,
          number,
          number,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          poolID: number;
          tickLower: number;
          tickUpper: number;
          totalRewards: BigNumber;
          liquidity: BigNumber;
          cumulativeLiquidity: BigNumber;
          lastTimeRewarded: BigNumber;
        };
      }
    >;

    getPosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber
        ] & {
          startCumulativeDebt: BigNumber;
          collateral: BigNumber;
          debt: BigNumber;
          startDebtExchangeRate: BigNumber;
          startCNPRewards: BigNumber;
          lastTimeUpdated: BigNumber;
          lastBorrowTime: BigNumber;
          collateralizationBand: number;
          collateralizationBandIndex: BigNumber;
        }
      ] & {
        acct: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber
        ] & {
          startCumulativeDebt: BigNumber;
          collateral: BigNumber;
          debt: BigNumber;
          startDebtExchangeRate: BigNumber;
          startCNPRewards: BigNumber;
          lastTimeUpdated: BigNumber;
          lastBorrowTime: BigNumber;
          collateralizationBand: number;
          collateralizationBandIndex: BigNumber;
        };
      }
    >;

    "getPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber
        ] & {
          startCumulativeDebt: BigNumber;
          collateral: BigNumber;
          debt: BigNumber;
          startDebtExchangeRate: BigNumber;
          startCNPRewards: BigNumber;
          lastTimeUpdated: BigNumber;
          lastBorrowTime: BigNumber;
          collateralizationBand: number;
          collateralizationBandIndex: BigNumber;
        }
      ] & {
        acct: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber
        ] & {
          startCumulativeDebt: BigNumber;
          collateral: BigNumber;
          debt: BigNumber;
          startDebtExchangeRate: BigNumber;
          startCNPRewards: BigNumber;
          lastTimeUpdated: BigNumber;
          lastBorrowTime: BigNumber;
          collateralizationBand: number;
          collateralizationBandIndex: BigNumber;
        };
      }
    >;

    getRewardStatus(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          totalRewards: BigNumber;
          cumulativeLiquidity: BigNumber;
        }
      ] & {
        rs: [BigNumber, BigNumber] & {
          totalRewards: BigNumber;
          cumulativeLiquidity: BigNumber;
        };
      }
    >;

    "getRewardStatus(uint16)"(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          totalRewards: BigNumber;
          cumulativeLiquidity: BigNumber;
        }
      ] & {
        rs: [BigNumber, BigNumber] & {
          totalRewards: BigNumber;
          cumulativeLiquidity: BigNumber;
        };
      }
    >;

    getSystemDebtInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          debt: BigNumber;
          totalCNPRewards: BigNumber;
          cumulativeDebt: BigNumber;
          debtExchangeRate: BigNumber;
        }
      ]
    >;

    "getSystemDebtInfo()"(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          debt: BigNumber;
          totalCNPRewards: BigNumber;
          cumulativeDebt: BigNumber;
          debtExchangeRate: BigNumber;
        }
      ]
    >;

    increaseDebt(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "increaseDebt(uint256)"(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increasePoolLiquidity(
      poolID: BigNumberish,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "increasePoolLiquidity(uint16,uint256)"(
      poolID: BigNumberish,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onRewardsUpgrade(
      newRewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "onRewardsUpgrade(address)"(
      newRewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    oneToOneMintedCoin(overrides?: CallOverrides): Promise<[BigNumber]>;

    "oneToOneMintedCoin()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolLiquidity(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidity: BigNumber }>;

    "poolLiquidity(uint16)"(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidity: BigNumber }>;

    sendCollateral(
      account: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sendCollateral(address,uint256)"(
      account: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendLentCoin(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sendLentCoin(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendOneToOneBackedTokens(
      token: string,
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sendOneToOneBackedTokens(address,address,uint256)"(
      token: string,
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGenesisPeriodCoinTokenCount(
      owner: string,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setGenesisPeriodCoinTokenCount(address,uint256)"(
      owner: string,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidationAccount(
      lqAcct: {
        startDebtExchangeRate: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLiquidationAccount((uint256,uint256,uint256))"(
      lqAcct: {
        startDebtExchangeRate: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOneToOneMintedCoin(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setOneToOneMintedCoin(uint256)"(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setParticipatedInMarketGenesis(
      account: string,
      participated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setParticipatedInMarketGenesis(address,bool)"(
      account: string,
      participated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolPosition(
      nftID: BigNumberish,
      pt: {
        owner: string;
        poolID: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        totalRewards: BigNumberish;
        liquidity: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        lastTimeRewarded: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPoolPosition(uint256,(address,uint16,int24,int24,uint256,uint256,uint256,uint64))"(
      nftID: BigNumberish,
      pt: {
        owner: string;
        poolID: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        totalRewards: BigNumberish;
        liquidity: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        lastTimeRewarded: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPosition(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startCNPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        collateralizationBand: BigNumberish;
        collateralizationBandIndex: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPosition(uint64,(uint256,uint256,uint256,uint256,uint256,uint64,uint64,uint32,uint64))"(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startCNPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        collateralizationBand: BigNumberish;
        collateralizationBandIndex: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardStatus(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRewardStatus(uint16,(uint256,uint256))"(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSystemDebtInfo(
      _systemDebtInfo: {
        debt: BigNumberish;
        totalCNPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setSystemDebtInfo((uint256,uint256,uint256,uint256))"(
      _systemDebtInfo: {
        debt: BigNumberish;
        totalCNPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addPositionToIndex(
    nftID: BigNumberish,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addPositionToIndex(uint256,int24,int24,address)"(
    nftID: BigNumberish,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  debt(overrides?: CallOverrides): Promise<BigNumber>;

  "debt()"(overrides?: CallOverrides): Promise<BigNumber>;

  decreaseDebt(
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "decreaseDebt(uint256)"(
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreasePoolLiquidity(
    poolID: BigNumberish,
    liquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "decreasePoolLiquidity(uint16,uint256)"(
    poolID: BigNumberish,
    liquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributeLiquidityNft(
    nftID: BigNumberish,
    dest: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "distributeLiquidityNft(uint256,address)"(
    nftID: BigNumberish,
    dest: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBasicPositionInfo(
    positionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      debtCount: BigNumber;
      collateralCount: BigNumber;
    }
  >;

  "getBasicPositionInfo(uint64)"(
    positionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      debtCount: BigNumber;
      collateralCount: BigNumber;
    }
  >;

  getGenesisPeriodCoinLiquidity(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getGenesisPeriodCoinLiquidity(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLiquidationAccount(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      startDebtExchangeRate: BigNumber;
      collateral: BigNumber;
      debt: BigNumber;
    }
  >;

  "getLiquidationAccount()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      startDebtExchangeRate: BigNumber;
      collateral: BigNumber;
      debt: BigNumber;
    }
  >;

  getParticipatedInMarketGenesis(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getParticipatedInMarketGenesis(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getPoolPosition(
    nftID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      number,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      owner: string;
      poolID: number;
      tickLower: number;
      tickUpper: number;
      totalRewards: BigNumber;
      liquidity: BigNumber;
      cumulativeLiquidity: BigNumber;
      lastTimeRewarded: BigNumber;
    }
  >;

  "getPoolPosition(uint256)"(
    nftID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      number,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      owner: string;
      poolID: number;
      tickLower: number;
      tickUpper: number;
      totalRewards: BigNumber;
      liquidity: BigNumber;
      cumulativeLiquidity: BigNumber;
      lastTimeRewarded: BigNumber;
    }
  >;

  getPosition(
    positionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber
    ] & {
      startCumulativeDebt: BigNumber;
      collateral: BigNumber;
      debt: BigNumber;
      startDebtExchangeRate: BigNumber;
      startCNPRewards: BigNumber;
      lastTimeUpdated: BigNumber;
      lastBorrowTime: BigNumber;
      collateralizationBand: number;
      collateralizationBandIndex: BigNumber;
    }
  >;

  "getPosition(uint64)"(
    positionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber
    ] & {
      startCumulativeDebt: BigNumber;
      collateral: BigNumber;
      debt: BigNumber;
      startDebtExchangeRate: BigNumber;
      startCNPRewards: BigNumber;
      lastTimeUpdated: BigNumber;
      lastBorrowTime: BigNumber;
      collateralizationBand: number;
      collateralizationBandIndex: BigNumber;
    }
  >;

  getRewardStatus(
    poolID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      totalRewards: BigNumber;
      cumulativeLiquidity: BigNumber;
    }
  >;

  "getRewardStatus(uint16)"(
    poolID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      totalRewards: BigNumber;
      cumulativeLiquidity: BigNumber;
    }
  >;

  getSystemDebtInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      debt: BigNumber;
      totalCNPRewards: BigNumber;
      cumulativeDebt: BigNumber;
      debtExchangeRate: BigNumber;
    }
  >;

  "getSystemDebtInfo()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      debt: BigNumber;
      totalCNPRewards: BigNumber;
      cumulativeDebt: BigNumber;
      debtExchangeRate: BigNumber;
    }
  >;

  increaseDebt(
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "increaseDebt(uint256)"(
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increasePoolLiquidity(
    poolID: BigNumberish,
    liquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "increasePoolLiquidity(uint16,uint256)"(
    poolID: BigNumberish,
    liquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onRewardsUpgrade(
    newRewards: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "onRewardsUpgrade(address)"(
    newRewards: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  oneToOneMintedCoin(overrides?: CallOverrides): Promise<BigNumber>;

  "oneToOneMintedCoin()"(overrides?: CallOverrides): Promise<BigNumber>;

  poolLiquidity(
    poolID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "poolLiquidity(uint16)"(
    poolID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sendCollateral(
    account: string,
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sendCollateral(address,uint256)"(
    account: string,
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendLentCoin(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sendLentCoin(address,uint256)"(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendOneToOneBackedTokens(
    token: string,
    dest: string,
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sendOneToOneBackedTokens(address,address,uint256)"(
    token: string,
    dest: string,
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGenesisPeriodCoinTokenCount(
    owner: string,
    liquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setGenesisPeriodCoinTokenCount(address,uint256)"(
    owner: string,
    liquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidationAccount(
    lqAcct: {
      startDebtExchangeRate: BigNumberish;
      collateral: BigNumberish;
      debt: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLiquidationAccount((uint256,uint256,uint256))"(
    lqAcct: {
      startDebtExchangeRate: BigNumberish;
      collateral: BigNumberish;
      debt: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOneToOneMintedCoin(
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setOneToOneMintedCoin(uint256)"(
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setParticipatedInMarketGenesis(
    account: string,
    participated: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setParticipatedInMarketGenesis(address,bool)"(
    account: string,
    participated: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolPosition(
    nftID: BigNumberish,
    pt: {
      owner: string;
      poolID: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      totalRewards: BigNumberish;
      liquidity: BigNumberish;
      cumulativeLiquidity: BigNumberish;
      lastTimeRewarded: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPoolPosition(uint256,(address,uint16,int24,int24,uint256,uint256,uint256,uint64))"(
    nftID: BigNumberish,
    pt: {
      owner: string;
      poolID: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      totalRewards: BigNumberish;
      liquidity: BigNumberish;
      cumulativeLiquidity: BigNumberish;
      lastTimeRewarded: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPosition(
    positionID: BigNumberish,
    dp: {
      startCumulativeDebt: BigNumberish;
      collateral: BigNumberish;
      debt: BigNumberish;
      startDebtExchangeRate: BigNumberish;
      startCNPRewards: BigNumberish;
      lastTimeUpdated: BigNumberish;
      lastBorrowTime: BigNumberish;
      collateralizationBand: BigNumberish;
      collateralizationBandIndex: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPosition(uint64,(uint256,uint256,uint256,uint256,uint256,uint64,uint64,uint32,uint64))"(
    positionID: BigNumberish,
    dp: {
      startCumulativeDebt: BigNumberish;
      collateral: BigNumberish;
      debt: BigNumberish;
      startDebtExchangeRate: BigNumberish;
      startCNPRewards: BigNumberish;
      lastTimeUpdated: BigNumberish;
      lastBorrowTime: BigNumberish;
      collateralizationBand: BigNumberish;
      collateralizationBandIndex: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardStatus(
    poolID: BigNumberish,
    rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRewardStatus(uint16,(uint256,uint256))"(
    poolID: BigNumberish,
    rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSystemDebtInfo(
    _systemDebtInfo: {
      debt: BigNumberish;
      totalCNPRewards: BigNumberish;
      cumulativeDebt: BigNumberish;
      debtExchangeRate: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setSystemDebtInfo((uint256,uint256,uint256,uint256))"(
    _systemDebtInfo: {
      debt: BigNumberish;
      totalCNPRewards: BigNumberish;
      cumulativeDebt: BigNumberish;
      debtExchangeRate: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPositionToIndex(
      nftID: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPositionToIndex(uint256,int24,int24,address)"(
      nftID: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    debt(overrides?: CallOverrides): Promise<BigNumber>;

    "debt()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseDebt(count: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "decreaseDebt(uint256)"(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decreasePoolLiquidity(
      poolID: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "decreasePoolLiquidity(uint16,uint256)"(
      poolID: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    distributeLiquidityNft(
      nftID: BigNumberish,
      dest: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "distributeLiquidityNft(uint256,address)"(
      nftID: BigNumberish,
      dest: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getBasicPositionInfo(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        debtCount: BigNumber;
        collateralCount: BigNumber;
      }
    >;

    "getBasicPositionInfo(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        debtCount: BigNumber;
        collateralCount: BigNumber;
      }
    >;

    getGenesisPeriodCoinLiquidity(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGenesisPeriodCoinLiquidity(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidationAccount(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startDebtExchangeRate: BigNumber;
        collateral: BigNumber;
        debt: BigNumber;
      }
    >;

    "getLiquidationAccount()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startDebtExchangeRate: BigNumber;
        collateral: BigNumber;
        debt: BigNumber;
      }
    >;

    getParticipatedInMarketGenesis(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getParticipatedInMarketGenesis(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getPoolPosition(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        owner: string;
        poolID: number;
        tickLower: number;
        tickUpper: number;
        totalRewards: BigNumber;
        liquidity: BigNumber;
        cumulativeLiquidity: BigNumber;
        lastTimeRewarded: BigNumber;
      }
    >;

    "getPoolPosition(uint256)"(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        owner: string;
        poolID: number;
        tickLower: number;
        tickUpper: number;
        totalRewards: BigNumber;
        liquidity: BigNumber;
        cumulativeLiquidity: BigNumber;
        lastTimeRewarded: BigNumber;
      }
    >;

    getPosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber
      ] & {
        startCumulativeDebt: BigNumber;
        collateral: BigNumber;
        debt: BigNumber;
        startDebtExchangeRate: BigNumber;
        startCNPRewards: BigNumber;
        lastTimeUpdated: BigNumber;
        lastBorrowTime: BigNumber;
        collateralizationBand: number;
        collateralizationBandIndex: BigNumber;
      }
    >;

    "getPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber
      ] & {
        startCumulativeDebt: BigNumber;
        collateral: BigNumber;
        debt: BigNumber;
        startDebtExchangeRate: BigNumber;
        startCNPRewards: BigNumber;
        lastTimeUpdated: BigNumber;
        lastBorrowTime: BigNumber;
        collateralizationBand: number;
        collateralizationBandIndex: BigNumber;
      }
    >;

    getRewardStatus(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalRewards: BigNumber;
        cumulativeLiquidity: BigNumber;
      }
    >;

    "getRewardStatus(uint16)"(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalRewards: BigNumber;
        cumulativeLiquidity: BigNumber;
      }
    >;

    getSystemDebtInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        debt: BigNumber;
        totalCNPRewards: BigNumber;
        cumulativeDebt: BigNumber;
        debtExchangeRate: BigNumber;
      }
    >;

    "getSystemDebtInfo()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        debt: BigNumber;
        totalCNPRewards: BigNumber;
        cumulativeDebt: BigNumber;
        debtExchangeRate: BigNumber;
      }
    >;

    increaseDebt(count: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "increaseDebt(uint256)"(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increasePoolLiquidity(
      poolID: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "increasePoolLiquidity(uint16,uint256)"(
      poolID: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    onRewardsUpgrade(
      newRewards: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "onRewardsUpgrade(address)"(
      newRewards: string,
      overrides?: CallOverrides
    ): Promise<void>;

    oneToOneMintedCoin(overrides?: CallOverrides): Promise<BigNumber>;

    "oneToOneMintedCoin()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolLiquidity(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolLiquidity(uint16)"(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendCollateral(
      account: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendCollateral(address,uint256)"(
      account: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendLentCoin(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendLentCoin(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendOneToOneBackedTokens(
      token: string,
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendOneToOneBackedTokens(address,address,uint256)"(
      token: string,
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGenesisPeriodCoinTokenCount(
      owner: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGenesisPeriodCoinTokenCount(address,uint256)"(
      owner: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationAccount(
      lqAcct: {
        startDebtExchangeRate: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setLiquidationAccount((uint256,uint256,uint256))"(
      lqAcct: {
        startDebtExchangeRate: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setOneToOneMintedCoin(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOneToOneMintedCoin(uint256)"(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setParticipatedInMarketGenesis(
      account: string,
      participated: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setParticipatedInMarketGenesis(address,bool)"(
      account: string,
      participated: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolPosition(
      nftID: BigNumberish,
      pt: {
        owner: string;
        poolID: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        totalRewards: BigNumberish;
        liquidity: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        lastTimeRewarded: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setPoolPosition(uint256,(address,uint16,int24,int24,uint256,uint256,uint256,uint64))"(
      nftID: BigNumberish,
      pt: {
        owner: string;
        poolID: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        totalRewards: BigNumberish;
        liquidity: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        lastTimeRewarded: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setPosition(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startCNPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        collateralizationBand: BigNumberish;
        collateralizationBandIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setPosition(uint64,(uint256,uint256,uint256,uint256,uint256,uint64,uint64,uint32,uint64))"(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startCNPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        collateralizationBand: BigNumberish;
        collateralizationBandIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardStatus(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "setRewardStatus(uint16,(uint256,uint256))"(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    setSystemDebtInfo(
      _systemDebtInfo: {
        debt: BigNumberish;
        totalCNPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setSystemDebtInfo((uint256,uint256,uint256,uint256))"(
      _systemDebtInfo: {
        debt: BigNumberish;
        totalCNPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    DebtPositionIndexingDisabled(): TypedEventFilter<[], {}>;

    PoolPositionIndexingDisabled(): TypedEventFilter<[], {}>;
  };

  estimateGas: {
    addPositionToIndex(
      nftID: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addPositionToIndex(uint256,int24,int24,address)"(
      nftID: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    debt(overrides?: CallOverrides): Promise<BigNumber>;

    "debt()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseDebt(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "decreaseDebt(uint256)"(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreasePoolLiquidity(
      poolID: BigNumberish,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "decreasePoolLiquidity(uint16,uint256)"(
      poolID: BigNumberish,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributeLiquidityNft(
      nftID: BigNumberish,
      dest: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "distributeLiquidityNft(uint256,address)"(
      nftID: BigNumberish,
      dest: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBasicPositionInfo(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBasicPositionInfo(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGenesisPeriodCoinLiquidity(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGenesisPeriodCoinLiquidity(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidationAccount(overrides?: CallOverrides): Promise<BigNumber>;

    "getLiquidationAccount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getParticipatedInMarketGenesis(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getParticipatedInMarketGenesis(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolPosition(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPoolPosition(uint256)"(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardStatus(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRewardStatus(uint16)"(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSystemDebtInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "getSystemDebtInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseDebt(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "increaseDebt(uint256)"(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increasePoolLiquidity(
      poolID: BigNumberish,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "increasePoolLiquidity(uint16,uint256)"(
      poolID: BigNumberish,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onRewardsUpgrade(
      newRewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "onRewardsUpgrade(address)"(
      newRewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    oneToOneMintedCoin(overrides?: CallOverrides): Promise<BigNumber>;

    "oneToOneMintedCoin()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolLiquidity(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolLiquidity(uint16)"(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendCollateral(
      account: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sendCollateral(address,uint256)"(
      account: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendLentCoin(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sendLentCoin(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendOneToOneBackedTokens(
      token: string,
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sendOneToOneBackedTokens(address,address,uint256)"(
      token: string,
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGenesisPeriodCoinTokenCount(
      owner: string,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setGenesisPeriodCoinTokenCount(address,uint256)"(
      owner: string,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidationAccount(
      lqAcct: {
        startDebtExchangeRate: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLiquidationAccount((uint256,uint256,uint256))"(
      lqAcct: {
        startDebtExchangeRate: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOneToOneMintedCoin(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setOneToOneMintedCoin(uint256)"(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setParticipatedInMarketGenesis(
      account: string,
      participated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setParticipatedInMarketGenesis(address,bool)"(
      account: string,
      participated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolPosition(
      nftID: BigNumberish,
      pt: {
        owner: string;
        poolID: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        totalRewards: BigNumberish;
        liquidity: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        lastTimeRewarded: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPoolPosition(uint256,(address,uint16,int24,int24,uint256,uint256,uint256,uint64))"(
      nftID: BigNumberish,
      pt: {
        owner: string;
        poolID: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        totalRewards: BigNumberish;
        liquidity: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        lastTimeRewarded: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPosition(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startCNPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        collateralizationBand: BigNumberish;
        collateralizationBandIndex: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPosition(uint64,(uint256,uint256,uint256,uint256,uint256,uint64,uint64,uint32,uint64))"(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startCNPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        collateralizationBand: BigNumberish;
        collateralizationBandIndex: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardStatus(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRewardStatus(uint16,(uint256,uint256))"(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSystemDebtInfo(
      _systemDebtInfo: {
        debt: BigNumberish;
        totalCNPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setSystemDebtInfo((uint256,uint256,uint256,uint256))"(
      _systemDebtInfo: {
        debt: BigNumberish;
        totalCNPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPositionToIndex(
      nftID: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addPositionToIndex(uint256,int24,int24,address)"(
      nftID: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    debt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "debt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseDebt(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "decreaseDebt(uint256)"(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreasePoolLiquidity(
      poolID: BigNumberish,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "decreasePoolLiquidity(uint16,uint256)"(
      poolID: BigNumberish,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributeLiquidityNft(
      nftID: BigNumberish,
      dest: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "distributeLiquidityNft(uint256,address)"(
      nftID: BigNumberish,
      dest: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBasicPositionInfo(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBasicPositionInfo(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGenesisPeriodCoinLiquidity(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGenesisPeriodCoinLiquidity(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidationAccount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidationAccount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParticipatedInMarketGenesis(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getParticipatedInMarketGenesis(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolPosition(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPoolPosition(uint256)"(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardStatus(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRewardStatus(uint16)"(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSystemDebtInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSystemDebtInfo()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseDebt(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "increaseDebt(uint256)"(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increasePoolLiquidity(
      poolID: BigNumberish,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "increasePoolLiquidity(uint16,uint256)"(
      poolID: BigNumberish,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onRewardsUpgrade(
      newRewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "onRewardsUpgrade(address)"(
      newRewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    oneToOneMintedCoin(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "oneToOneMintedCoin()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLiquidity(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolLiquidity(uint16)"(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendCollateral(
      account: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sendCollateral(address,uint256)"(
      account: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendLentCoin(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sendLentCoin(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendOneToOneBackedTokens(
      token: string,
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sendOneToOneBackedTokens(address,address,uint256)"(
      token: string,
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGenesisPeriodCoinTokenCount(
      owner: string,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setGenesisPeriodCoinTokenCount(address,uint256)"(
      owner: string,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidationAccount(
      lqAcct: {
        startDebtExchangeRate: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLiquidationAccount((uint256,uint256,uint256))"(
      lqAcct: {
        startDebtExchangeRate: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOneToOneMintedCoin(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setOneToOneMintedCoin(uint256)"(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setParticipatedInMarketGenesis(
      account: string,
      participated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setParticipatedInMarketGenesis(address,bool)"(
      account: string,
      participated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolPosition(
      nftID: BigNumberish,
      pt: {
        owner: string;
        poolID: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        totalRewards: BigNumberish;
        liquidity: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        lastTimeRewarded: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPoolPosition(uint256,(address,uint16,int24,int24,uint256,uint256,uint256,uint64))"(
      nftID: BigNumberish,
      pt: {
        owner: string;
        poolID: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        totalRewards: BigNumberish;
        liquidity: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        lastTimeRewarded: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPosition(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startCNPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        collateralizationBand: BigNumberish;
        collateralizationBandIndex: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPosition(uint64,(uint256,uint256,uint256,uint256,uint256,uint64,uint64,uint32,uint64))"(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startCNPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        collateralizationBand: BigNumberish;
        collateralizationBandIndex: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardStatus(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRewardStatus(uint16,(uint256,uint256))"(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSystemDebtInfo(
      _systemDebtInfo: {
        debt: BigNumberish;
        totalCNPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setSystemDebtInfo((uint256,uint256,uint256,uint256))"(
      _systemDebtInfo: {
        debt: BigNumberish;
        totalCNPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
