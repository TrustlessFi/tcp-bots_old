/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IRatesInterface extends ethers.utils.Interface {
  functions: {
    "completeSetup()": FunctionFragment;
    "interestRateAbsoluteValue()": FunctionFragment;
    "maxSteps()": FunctionFragment;
    "positiveInterestRate()": FunctionFragment;
    "stepsOff()": FunctionFragment;
    "stop()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "completeSetup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interestRateAbsoluteValue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxSteps", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "positiveInterestRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stepsOff", values?: undefined): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "completeSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestRateAbsoluteValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxSteps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "positiveInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stepsOff", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;

  events: {
    "ParameterUpdated128(string,uint128)": EventFragment;
    "ParameterUpdated64(string,uint64)": EventFragment;
    "ParameterUpdatedInt128(string,int128)": EventFragment;
    "RateUpdated(int256,uint256,uint256,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ParameterUpdated128"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated64"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdatedInt128"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RateUpdated"): EventFragment;
}

export class IRates extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IRatesInterface;

  functions: {
    completeSetup(overrides?: Overrides): Promise<ContractTransaction>;

    "completeSetup()"(overrides?: Overrides): Promise<ContractTransaction>;

    interestRateAbsoluteValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "interestRateAbsoluteValue()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxSteps(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxSteps()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    positiveInterestRate(overrides?: CallOverrides): Promise<[boolean]>;

    "positiveInterestRate()"(overrides?: CallOverrides): Promise<[boolean]>;

    stepsOff(overrides?: CallOverrides): Promise<[BigNumber]>;

    "stepsOff()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    stop(overrides?: Overrides): Promise<ContractTransaction>;

    "stop()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  completeSetup(overrides?: Overrides): Promise<ContractTransaction>;

  "completeSetup()"(overrides?: Overrides): Promise<ContractTransaction>;

  interestRateAbsoluteValue(overrides?: CallOverrides): Promise<BigNumber>;

  "interestRateAbsoluteValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxSteps(overrides?: CallOverrides): Promise<BigNumber>;

  "maxSteps()"(overrides?: CallOverrides): Promise<BigNumber>;

  positiveInterestRate(overrides?: CallOverrides): Promise<boolean>;

  "positiveInterestRate()"(overrides?: CallOverrides): Promise<boolean>;

  stepsOff(overrides?: CallOverrides): Promise<BigNumber>;

  "stepsOff()"(overrides?: CallOverrides): Promise<BigNumber>;

  stop(overrides?: Overrides): Promise<ContractTransaction>;

  "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    completeSetup(overrides?: CallOverrides): Promise<void>;

    "completeSetup()"(overrides?: CallOverrides): Promise<void>;

    interestRateAbsoluteValue(overrides?: CallOverrides): Promise<BigNumber>;

    "interestRateAbsoluteValue()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxSteps(overrides?: CallOverrides): Promise<BigNumber>;

    "maxSteps()"(overrides?: CallOverrides): Promise<BigNumber>;

    positiveInterestRate(overrides?: CallOverrides): Promise<boolean>;

    "positiveInterestRate()"(overrides?: CallOverrides): Promise<boolean>;

    stepsOff(overrides?: CallOverrides): Promise<BigNumber>;

    "stepsOff()"(overrides?: CallOverrides): Promise<BigNumber>;

    stop(overrides?: CallOverrides): Promise<void>;

    "stop()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    ParameterUpdated128(paramName: string | null, value: null): EventFilter;

    ParameterUpdated64(paramName: string | null, value: null): EventFilter;

    ParameterUpdatedInt128(paramName: string | null, value: null): EventFilter;

    RateUpdated(
      interestRate: null,
      price: null,
      rewardCount: null,
      nextUpdateTime: null
    ): EventFilter;
  };

  estimateGas: {
    completeSetup(overrides?: Overrides): Promise<BigNumber>;

    "completeSetup()"(overrides?: Overrides): Promise<BigNumber>;

    interestRateAbsoluteValue(overrides?: CallOverrides): Promise<BigNumber>;

    "interestRateAbsoluteValue()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxSteps(overrides?: CallOverrides): Promise<BigNumber>;

    "maxSteps()"(overrides?: CallOverrides): Promise<BigNumber>;

    positiveInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

    "positiveInterestRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    stepsOff(overrides?: CallOverrides): Promise<BigNumber>;

    "stepsOff()"(overrides?: CallOverrides): Promise<BigNumber>;

    stop(overrides?: Overrides): Promise<BigNumber>;

    "stop()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    completeSetup(overrides?: Overrides): Promise<PopulatedTransaction>;

    "completeSetup()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    interestRateAbsoluteValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "interestRateAbsoluteValue()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxSteps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxSteps()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positiveInterestRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "positiveInterestRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stepsOff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stepsOff()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stop(overrides?: Overrides): Promise<PopulatedTransaction>;

    "stop()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
