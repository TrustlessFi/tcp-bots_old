/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PegManagerInterface extends ethers.utils.Interface {
  functions: {
    "acceptableError()": FunctionFragment;
    "calculatePrice(uint256,uint256,uint256)": FunctionFragment;
    "errorInterval()": FunctionFragment;
    "getRewardCount()": FunctionFragment;
    "governor()": FunctionFragment;
    "init(address)": FunctionFragment;
    "interestRate()": FunctionFragment;
    "interestRateStep()": FunctionFragment;
    "maxPriceAge()": FunctionFragment;
    "maxSteps()": FunctionFragment;
    "maxTwapTime()": FunctionFragment;
    "minRate()": FunctionFragment;
    "minTimeBetweenUpdates()": FunctionFragment;
    "pairs(uint256)": FunctionFragment;
    "positiveInterestRate()": FunctionFragment;
    "rd()": FunctionFragment;
    "setAcceptableError(uint128)": FunctionFragment;
    "setErrorInterval(uint128)": FunctionFragment;
    "setInterestRateStep(uint128)": FunctionFragment;
    "setMaxPriceAge(uint64)": FunctionFragment;
    "setMaxSteps(uint64)": FunctionFragment;
    "setMaxTwapTime(uint64)": FunctionFragment;
    "setMinRate(int128)": FunctionFragment;
    "setMinTimeBetweenUpdates(uint64)": FunctionFragment;
    "setValidRange(uint128)": FunctionFragment;
    "stepsOff()": FunctionFragment;
    "stop()": FunctionFragment;
    "update()": FunctionFragment;
    "validRange()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptableError",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePrice",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "errorInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "interestRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interestRateStep",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPriceAge",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxSteps", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxTwapTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minTimeBetweenUpdates",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pairs", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "positiveInterestRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAcceptableError",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setErrorInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestRateStep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPriceAge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSteps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTwapTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinTimeBetweenUpdates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidRange",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stepsOff", values?: undefined): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;
  encodeFunctionData(functionFragment: "update", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validRange",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptableError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "errorInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestRateStep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPriceAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxSteps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxTwapTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minTimeBetweenUpdates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "positiveInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAcceptableError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setErrorInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestRateStep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPriceAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSteps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTwapTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinTimeBetweenUpdates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stepsOff", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "validRange", data: BytesLike): Result;

  events: {
    "Initialized(address)": EventFragment;
    "ParameterUpdated128(string,uint128)": EventFragment;
    "ParameterUpdated64(string,uint64)": EventFragment;
    "ParameterUpdatedInt128(string,int128)": EventFragment;
    "RateUpdated(int256,uint256,uint256,uint64)": EventFragment;
    "Stopped()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated128"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated64"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdatedInt128"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stopped"): EventFragment;
}

export class PegManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PegManagerInterface;

  functions: {
    acceptableError(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "acceptableError()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    calculatePrice(
      price0: BigNumberish,
      price1: BigNumberish,
      price2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      0: BigNumber;
    }>;

    "calculatePrice(uint256,uint256,uint256)"(
      price0: BigNumberish,
      price1: BigNumberish,
      price2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      0: BigNumber;
    }>;

    errorInterval(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "errorInterval()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getRewardCount(
      overrides?: CallOverrides
    ): Promise<{
      newRewardCount: BigNumber;
      0: BigNumber;
    }>;

    "getRewardCount()"(
      overrides?: CallOverrides
    ): Promise<{
      newRewardCount: BigNumber;
      0: BigNumber;
    }>;

    governor(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "governor()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    init(
      governor_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address)"(
      governor_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    interestRate(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "interestRate()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    interestRateStep(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "interestRateStep()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    maxPriceAge(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "maxPriceAge()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    maxSteps(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "maxSteps()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    maxTwapTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "maxTwapTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    minRate(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "minRate()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    minTimeBetweenUpdates(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "minTimeBetweenUpdates()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    pairs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "pairs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    positiveInterestRate(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "positiveInterestRate()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    rd(
      overrides?: CallOverrides
    ): Promise<{
      rate: BigNumber;
      stepsOff: BigNumber;
      nextUpdateTime: BigNumber;
      rewardCount: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "rd()"(
      overrides?: CallOverrides
    ): Promise<{
      rate: BigNumber;
      stepsOff: BigNumber;
      nextUpdateTime: BigNumber;
      rewardCount: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    setAcceptableError(
      error: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAcceptableError(uint128)"(
      error: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setErrorInterval(
      interval: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setErrorInterval(uint128)"(
      interval: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setInterestRateStep(
      step: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setInterestRateStep(uint128)"(
      step: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxPriceAge(
      age: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxPriceAge(uint64)"(
      age: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxSteps(
      steps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxSteps(uint64)"(
      steps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxTwapTime(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxTwapTime(uint64)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinRate(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinRate(int128)"(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinTimeBetweenUpdates(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinTimeBetweenUpdates(uint64)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setValidRange(
      range: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setValidRange(uint128)"(
      range: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stepsOff(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "stepsOff()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    stop(overrides?: Overrides): Promise<ContractTransaction>;

    "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

    update(overrides?: Overrides): Promise<ContractTransaction>;

    "update()"(overrides?: Overrides): Promise<ContractTransaction>;

    validRange(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "validRange()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  acceptableError(overrides?: CallOverrides): Promise<BigNumber>;

  "acceptableError()"(overrides?: CallOverrides): Promise<BigNumber>;

  calculatePrice(
    price0: BigNumberish,
    price1: BigNumberish,
    price2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculatePrice(uint256,uint256,uint256)"(
    price0: BigNumberish,
    price1: BigNumberish,
    price2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  errorInterval(overrides?: CallOverrides): Promise<BigNumber>;

  "errorInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

  getRewardCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getRewardCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  init(governor_: string, overrides?: Overrides): Promise<ContractTransaction>;

  "init(address)"(
    governor_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  interestRate(overrides?: CallOverrides): Promise<BigNumber>;

  "interestRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  interestRateStep(overrides?: CallOverrides): Promise<BigNumber>;

  "interestRateStep()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxPriceAge(overrides?: CallOverrides): Promise<BigNumber>;

  "maxPriceAge()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxSteps(overrides?: CallOverrides): Promise<BigNumber>;

  "maxSteps()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxTwapTime(overrides?: CallOverrides): Promise<BigNumber>;

  "maxTwapTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  minRate(overrides?: CallOverrides): Promise<BigNumber>;

  "minRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  minTimeBetweenUpdates(overrides?: CallOverrides): Promise<BigNumber>;

  "minTimeBetweenUpdates()"(overrides?: CallOverrides): Promise<BigNumber>;

  pairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "pairs(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  positiveInterestRate(overrides?: CallOverrides): Promise<boolean>;

  "positiveInterestRate()"(overrides?: CallOverrides): Promise<boolean>;

  rd(
    overrides?: CallOverrides
  ): Promise<{
    rate: BigNumber;
    stepsOff: BigNumber;
    nextUpdateTime: BigNumber;
    rewardCount: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  "rd()"(
    overrides?: CallOverrides
  ): Promise<{
    rate: BigNumber;
    stepsOff: BigNumber;
    nextUpdateTime: BigNumber;
    rewardCount: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  setAcceptableError(
    error: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAcceptableError(uint128)"(
    error: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setErrorInterval(
    interval: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setErrorInterval(uint128)"(
    interval: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setInterestRateStep(
    step: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setInterestRateStep(uint128)"(
    step: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxPriceAge(
    age: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxPriceAge(uint64)"(
    age: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxSteps(
    steps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxSteps(uint64)"(
    steps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxTwapTime(
    time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxTwapTime(uint64)"(
    time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinRate(
    min: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinRate(int128)"(
    min: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinTimeBetweenUpdates(
    time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinTimeBetweenUpdates(uint64)"(
    time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setValidRange(
    range: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setValidRange(uint128)"(
    range: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stepsOff(overrides?: CallOverrides): Promise<BigNumber>;

  "stepsOff()"(overrides?: CallOverrides): Promise<BigNumber>;

  stop(overrides?: Overrides): Promise<ContractTransaction>;

  "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

  update(overrides?: Overrides): Promise<ContractTransaction>;

  "update()"(overrides?: Overrides): Promise<ContractTransaction>;

  validRange(overrides?: CallOverrides): Promise<BigNumber>;

  "validRange()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    acceptableError(overrides?: CallOverrides): Promise<BigNumber>;

    "acceptableError()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculatePrice(
      price0: BigNumberish,
      price1: BigNumberish,
      price2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculatePrice(uint256,uint256,uint256)"(
      price0: BigNumberish,
      price1: BigNumberish,
      price2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    errorInterval(overrides?: CallOverrides): Promise<BigNumber>;

    "errorInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getRewardCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    init(governor_: string, overrides?: CallOverrides): Promise<void>;

    "init(address)"(
      governor_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    interestRate(overrides?: CallOverrides): Promise<BigNumber>;

    "interestRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    interestRateStep(overrides?: CallOverrides): Promise<BigNumber>;

    "interestRateStep()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxPriceAge(overrides?: CallOverrides): Promise<BigNumber>;

    "maxPriceAge()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxSteps(overrides?: CallOverrides): Promise<BigNumber>;

    "maxSteps()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxTwapTime(overrides?: CallOverrides): Promise<BigNumber>;

    "maxTwapTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    minRate(overrides?: CallOverrides): Promise<BigNumber>;

    "minRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    minTimeBetweenUpdates(overrides?: CallOverrides): Promise<BigNumber>;

    "minTimeBetweenUpdates()"(overrides?: CallOverrides): Promise<BigNumber>;

    pairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "pairs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    positiveInterestRate(overrides?: CallOverrides): Promise<boolean>;

    "positiveInterestRate()"(overrides?: CallOverrides): Promise<boolean>;

    rd(
      overrides?: CallOverrides
    ): Promise<{
      rate: BigNumber;
      stepsOff: BigNumber;
      nextUpdateTime: BigNumber;
      rewardCount: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "rd()"(
      overrides?: CallOverrides
    ): Promise<{
      rate: BigNumber;
      stepsOff: BigNumber;
      nextUpdateTime: BigNumber;
      rewardCount: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    setAcceptableError(
      error: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAcceptableError(uint128)"(
      error: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setErrorInterval(
      interval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setErrorInterval(uint128)"(
      interval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterestRateStep(
      step: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInterestRateStep(uint128)"(
      step: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPriceAge(age: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setMaxPriceAge(uint64)"(
      age: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSteps(steps: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setMaxSteps(uint64)"(
      steps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTwapTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxTwapTime(uint64)"(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinRate(min: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setMinRate(int128)"(
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinTimeBetweenUpdates(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinTimeBetweenUpdates(uint64)"(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidRange(
      range: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setValidRange(uint128)"(
      range: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stepsOff(overrides?: CallOverrides): Promise<BigNumber>;

    "stepsOff()"(overrides?: CallOverrides): Promise<BigNumber>;

    stop(overrides?: CallOverrides): Promise<void>;

    "stop()"(overrides?: CallOverrides): Promise<void>;

    update(overrides?: CallOverrides): Promise<void>;

    "update()"(overrides?: CallOverrides): Promise<void>;

    validRange(overrides?: CallOverrides): Promise<BigNumber>;

    "validRange()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Initialized(governor: string | null): EventFilter;

    ParameterUpdated128(paramName: string | null, value: null): EventFilter;

    ParameterUpdated64(paramName: string | null, value: null): EventFilter;

    ParameterUpdatedInt128(paramName: string | null, value: null): EventFilter;

    RateUpdated(
      interestRate: null,
      price: null,
      rewardCount: null,
      nextUpdateTime: null
    ): EventFilter;

    Stopped(): EventFilter;
  };

  estimateGas: {
    acceptableError(overrides?: CallOverrides): Promise<BigNumber>;

    "acceptableError()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculatePrice(
      price0: BigNumberish,
      price1: BigNumberish,
      price2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculatePrice(uint256,uint256,uint256)"(
      price0: BigNumberish,
      price1: BigNumberish,
      price2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    errorInterval(overrides?: CallOverrides): Promise<BigNumber>;

    "errorInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getRewardCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    init(governor_: string, overrides?: Overrides): Promise<BigNumber>;

    "init(address)"(
      governor_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    interestRate(overrides?: CallOverrides): Promise<BigNumber>;

    "interestRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    interestRateStep(overrides?: CallOverrides): Promise<BigNumber>;

    "interestRateStep()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxPriceAge(overrides?: CallOverrides): Promise<BigNumber>;

    "maxPriceAge()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxSteps(overrides?: CallOverrides): Promise<BigNumber>;

    "maxSteps()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxTwapTime(overrides?: CallOverrides): Promise<BigNumber>;

    "maxTwapTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    minRate(overrides?: CallOverrides): Promise<BigNumber>;

    "minRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    minTimeBetweenUpdates(overrides?: CallOverrides): Promise<BigNumber>;

    "minTimeBetweenUpdates()"(overrides?: CallOverrides): Promise<BigNumber>;

    pairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "pairs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positiveInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

    "positiveInterestRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    rd(overrides?: CallOverrides): Promise<BigNumber>;

    "rd()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAcceptableError(
      error: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAcceptableError(uint128)"(
      error: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setErrorInterval(
      interval: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setErrorInterval(uint128)"(
      interval: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setInterestRateStep(
      step: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setInterestRateStep(uint128)"(
      step: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxPriceAge(
      age: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxPriceAge(uint64)"(
      age: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxSteps(steps: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setMaxSteps(uint64)"(
      steps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxTwapTime(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxTwapTime(uint64)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinRate(min: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setMinRate(int128)"(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinTimeBetweenUpdates(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinTimeBetweenUpdates(uint64)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setValidRange(
      range: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setValidRange(uint128)"(
      range: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stepsOff(overrides?: CallOverrides): Promise<BigNumber>;

    "stepsOff()"(overrides?: CallOverrides): Promise<BigNumber>;

    stop(overrides?: Overrides): Promise<BigNumber>;

    "stop()"(overrides?: Overrides): Promise<BigNumber>;

    update(overrides?: Overrides): Promise<BigNumber>;

    "update()"(overrides?: Overrides): Promise<BigNumber>;

    validRange(overrides?: CallOverrides): Promise<BigNumber>;

    "validRange()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptableError(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "acceptableError()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePrice(
      price0: BigNumberish,
      price1: BigNumberish,
      price2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculatePrice(uint256,uint256,uint256)"(
      price0: BigNumberish,
      price1: BigNumberish,
      price2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    errorInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "errorInterval()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRewardCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      governor_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address)"(
      governor_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    interestRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "interestRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interestRateStep(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "interestRateStep()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPriceAge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxPriceAge()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSteps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxSteps()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTwapTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxTwapTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minTimeBetweenUpdates(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minTimeBetweenUpdates()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pairs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positiveInterestRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "positiveInterestRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rd()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAcceptableError(
      error: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAcceptableError(uint128)"(
      error: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setErrorInterval(
      interval: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setErrorInterval(uint128)"(
      interval: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setInterestRateStep(
      step: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setInterestRateStep(uint128)"(
      step: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxPriceAge(
      age: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxPriceAge(uint64)"(
      age: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxSteps(
      steps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxSteps(uint64)"(
      steps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxTwapTime(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxTwapTime(uint64)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinRate(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinRate(int128)"(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinTimeBetweenUpdates(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinTimeBetweenUpdates(uint64)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setValidRange(
      range: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setValidRange(uint128)"(
      range: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stepsOff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stepsOff()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stop(overrides?: Overrides): Promise<PopulatedTransaction>;

    "stop()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    update(overrides?: Overrides): Promise<PopulatedTransaction>;

    "update()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    validRange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "validRange()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
