/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ITokenAllocationCreatorInterface extends ethers.utils.Interface {
  functions: {
    "validAllocation(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "validAllocation",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "validAllocation",
    data: BytesLike
  ): Result;

  events: {
    "AllocationCreated(uint64,address,address,uint256,uint64,uint64,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllocationCreated"): EventFragment;
}

export class ITokenAllocationCreator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ITokenAllocationCreatorInterface;

  functions: {
    validAllocation(
      arg0: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "validAllocation(address)"(
      arg0: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  validAllocation(
    arg0: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "validAllocation(address)"(
    arg0: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    validAllocation(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "validAllocation(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    AllocationCreated(
      id: null,
      allocation: string | null,
      allocatee: string | null,
      count: null,
      startTime: null,
      endTime: null,
      allocationPurposeExplanation: null
    ): EventFilter;
  };

  estimateGas: {
    validAllocation(arg0: string, overrides?: Overrides): Promise<BigNumber>;

    "validAllocation(address)"(
      arg0: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    validAllocation(
      arg0: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "validAllocation(address)"(
      arg0: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
