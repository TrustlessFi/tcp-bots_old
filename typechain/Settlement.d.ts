/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SettlementInterface extends ethers.utils.Interface {
  functions: {
    "SETTLEMENT_PRICE_NO_CONFIDENCE_THRESHOLD()": FunctionFragment;
    "btcPriceProvider()": FunctionFragment;
    "cnp()": FunctionFragment;
    "confirmNoPriceConfidence()": FunctionFragment;
    "confirmPrices()": FunctionFragment;
    "deployer()": FunctionFragment;
    "ethPriceProvider()": FunctionFragment;
    "getCollateralForCoin(uint64,uint256)": FunctionFragment;
    "getRecentPrices()": FunctionFragment;
    "governor()": FunctionFragment;
    "init(address)": FunctionFragment;
    "initializeSettlement()": FunctionFragment;
    "noPriceConfidenceUserVotes(address)": FunctionFragment;
    "noPriceConfidenceVotes()": FunctionFragment;
    "priceConfidence()": FunctionFragment;
    "priceDiscoveryStartTime()": FunctionFragment;
    "setBtcPriceProvider(address)": FunctionFragment;
    "setEthPriceProvider(address)": FunctionFragment;
    "setNewPriceProviders(address,address)": FunctionFragment;
    "settlementPrice(uint8)": FunctionFragment;
    "stakeTokensForNoPriceConfidence(uint256)": FunctionFragment;
    "stop()": FunctionFragment;
    "stopped()": FunctionFragment;
    "unstakeTokensForNoPriceConfidence()": FunctionFragment;
    "validUpdate(bytes4)": FunctionFragment;
    "withdrawCollateral(uint64)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "SETTLEMENT_PRICE_NO_CONFIDENCE_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "btcPriceProvider",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cnp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "confirmNoPriceConfidence",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmPrices",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ethPriceProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralForCoin",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecentPrices",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initializeSettlement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "noPriceConfidenceUserVotes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "noPriceConfidenceVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceConfidence",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceDiscoveryStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBtcPriceProvider",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEthPriceProvider",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewPriceProviders",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeTokensForNoPriceConfidence",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstakeTokensForNoPriceConfidence",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validUpdate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "SETTLEMENT_PRICE_NO_CONFIDENCE_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "btcPriceProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cnp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "confirmNoPriceConfidence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ethPriceProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralForCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecentPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "noPriceConfidenceUserVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "noPriceConfidenceVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceConfidence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceDiscoveryStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBtcPriceProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEthPriceProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewPriceProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlementPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeTokensForNoPriceConfidence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeTokensForNoPriceConfidence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(address)": EventFragment;
    "NoConfidenceConfirmed(address)": EventFragment;
    "ParameterUpdated(string,uint256)": EventFragment;
    "ParameterUpdatedAddress(string,address)": EventFragment;
    "SettlementCollateralForCoin(uint64,address,uint256,uint256)": EventFragment;
    "SettlementInitialized(uint256)": EventFragment;
    "SettlementWithdrawCollateral(uint64,address,uint256)": EventFragment;
    "StakedNoConfidenceTokens(address,uint256)": EventFragment;
    "Stopped()": EventFragment;
    "UnstakedNoConfidenceTokens(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NoConfidenceConfirmed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdatedAddress"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SettlementCollateralForCoin"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettlementInitialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SettlementWithdrawCollateral"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakedNoConfidenceTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stopped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakedNoConfidenceTokens"): EventFragment;
}

export class Settlement extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SettlementInterface;

  functions: {
    SETTLEMENT_PRICE_NO_CONFIDENCE_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "SETTLEMENT_PRICE_NO_CONFIDENCE_THRESHOLD()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    btcPriceProvider(overrides?: CallOverrides): Promise<[string]>;

    "btcPriceProvider()"(overrides?: CallOverrides): Promise<[string]>;

    cnp(overrides?: CallOverrides): Promise<[string]>;

    "cnp()"(overrides?: CallOverrides): Promise<[string]>;

    confirmNoPriceConfidence(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "confirmNoPriceConfidence()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    confirmPrices(overrides?: Overrides): Promise<ContractTransaction>;

    "confirmPrices()"(overrides?: Overrides): Promise<ContractTransaction>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    "deployer()"(overrides?: CallOverrides): Promise<[string]>;

    ethPriceProvider(overrides?: CallOverrides): Promise<[string]>;

    "ethPriceProvider()"(overrides?: CallOverrides): Promise<[string]>;

    getCollateralForCoin(
      positionID: BigNumberish,
      coinCount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getCollateralForCoin(uint64,uint256)"(
      positionID: BigNumberish,
      coinCount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getRecentPrices(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { ethPrice: BigNumber; btcPrice: BigNumber }
    >;

    "getRecentPrices()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { ethPrice: BigNumber; btcPrice: BigNumber }
    >;

    governor(overrides?: CallOverrides): Promise<[string]>;

    "governor()"(overrides?: CallOverrides): Promise<[string]>;

    init(
      _governor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initializeSettlement(overrides?: Overrides): Promise<ContractTransaction>;

    "initializeSettlement()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    noPriceConfidenceUserVotes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "noPriceConfidenceUserVotes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    noPriceConfidenceVotes(overrides?: CallOverrides): Promise<[BigNumber]>;

    "noPriceConfidenceVotes()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceConfidence(overrides?: CallOverrides): Promise<[boolean]>;

    "priceConfidence()"(overrides?: CallOverrides): Promise<[boolean]>;

    priceDiscoveryStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "priceDiscoveryStartTime()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setBtcPriceProvider(
      provider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBtcPriceProvider(address)"(
      provider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setEthPriceProvider(
      provider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEthPriceProvider(address)"(
      provider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setNewPriceProviders(
      ethProvider: string,
      btcProvider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setNewPriceProviders(address,address)"(
      ethProvider: string,
      btcProvider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settlementPrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "settlementPrice(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakeTokensForNoPriceConfidence(
      countCNPToStake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stakeTokensForNoPriceConfidence(uint256)"(
      countCNPToStake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stop(overrides?: Overrides): Promise<ContractTransaction>;

    "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

    stopped(overrides?: CallOverrides): Promise<[boolean]>;

    "stopped()"(overrides?: CallOverrides): Promise<[boolean]>;

    unstakeTokensForNoPriceConfidence(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unstakeTokensForNoPriceConfidence()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validUpdate(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "validUpdate(bytes4)"(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdrawCollateral(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawCollateral(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  SETTLEMENT_PRICE_NO_CONFIDENCE_THRESHOLD(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "SETTLEMENT_PRICE_NO_CONFIDENCE_THRESHOLD()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  btcPriceProvider(overrides?: CallOverrides): Promise<string>;

  "btcPriceProvider()"(overrides?: CallOverrides): Promise<string>;

  cnp(overrides?: CallOverrides): Promise<string>;

  "cnp()"(overrides?: CallOverrides): Promise<string>;

  confirmNoPriceConfidence(overrides?: Overrides): Promise<ContractTransaction>;

  "confirmNoPriceConfidence()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  confirmPrices(overrides?: Overrides): Promise<ContractTransaction>;

  "confirmPrices()"(overrides?: Overrides): Promise<ContractTransaction>;

  deployer(overrides?: CallOverrides): Promise<string>;

  "deployer()"(overrides?: CallOverrides): Promise<string>;

  ethPriceProvider(overrides?: CallOverrides): Promise<string>;

  "ethPriceProvider()"(overrides?: CallOverrides): Promise<string>;

  getCollateralForCoin(
    positionID: BigNumberish,
    coinCount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getCollateralForCoin(uint64,uint256)"(
    positionID: BigNumberish,
    coinCount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getRecentPrices(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { ethPrice: BigNumber; btcPrice: BigNumber }
  >;

  "getRecentPrices()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { ethPrice: BigNumber; btcPrice: BigNumber }
  >;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  init(_governor: string, overrides?: Overrides): Promise<ContractTransaction>;

  "init(address)"(
    _governor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initializeSettlement(overrides?: Overrides): Promise<ContractTransaction>;

  "initializeSettlement()"(overrides?: Overrides): Promise<ContractTransaction>;

  noPriceConfidenceUserVotes(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "noPriceConfidenceUserVotes(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  noPriceConfidenceVotes(overrides?: CallOverrides): Promise<BigNumber>;

  "noPriceConfidenceVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

  priceConfidence(overrides?: CallOverrides): Promise<boolean>;

  "priceConfidence()"(overrides?: CallOverrides): Promise<boolean>;

  priceDiscoveryStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  "priceDiscoveryStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  setBtcPriceProvider(
    provider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBtcPriceProvider(address)"(
    provider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setEthPriceProvider(
    provider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEthPriceProvider(address)"(
    provider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setNewPriceProviders(
    ethProvider: string,
    btcProvider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setNewPriceProviders(address,address)"(
    ethProvider: string,
    btcProvider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settlementPrice(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "settlementPrice(uint8)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakeTokensForNoPriceConfidence(
    countCNPToStake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stakeTokensForNoPriceConfidence(uint256)"(
    countCNPToStake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stop(overrides?: Overrides): Promise<ContractTransaction>;

  "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

  stopped(overrides?: CallOverrides): Promise<boolean>;

  "stopped()"(overrides?: CallOverrides): Promise<boolean>;

  unstakeTokensForNoPriceConfidence(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unstakeTokensForNoPriceConfidence()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validUpdate(action: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "validUpdate(bytes4)"(
    action: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdrawCollateral(
    positionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawCollateral(uint64)"(
    positionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    SETTLEMENT_PRICE_NO_CONFIDENCE_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "SETTLEMENT_PRICE_NO_CONFIDENCE_THRESHOLD()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    btcPriceProvider(overrides?: CallOverrides): Promise<string>;

    "btcPriceProvider()"(overrides?: CallOverrides): Promise<string>;

    cnp(overrides?: CallOverrides): Promise<string>;

    "cnp()"(overrides?: CallOverrides): Promise<string>;

    confirmNoPriceConfidence(overrides?: CallOverrides): Promise<void>;

    "confirmNoPriceConfidence()"(overrides?: CallOverrides): Promise<void>;

    confirmPrices(overrides?: CallOverrides): Promise<void>;

    "confirmPrices()"(overrides?: CallOverrides): Promise<void>;

    deployer(overrides?: CallOverrides): Promise<string>;

    "deployer()"(overrides?: CallOverrides): Promise<string>;

    ethPriceProvider(overrides?: CallOverrides): Promise<string>;

    "ethPriceProvider()"(overrides?: CallOverrides): Promise<string>;

    getCollateralForCoin(
      positionID: BigNumberish,
      coinCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "getCollateralForCoin(uint64,uint256)"(
      positionID: BigNumberish,
      coinCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRecentPrices(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { ethPrice: BigNumber; btcPrice: BigNumber }
    >;

    "getRecentPrices()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { ethPrice: BigNumber; btcPrice: BigNumber }
    >;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    init(_governor: string, overrides?: CallOverrides): Promise<void>;

    "init(address)"(
      _governor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeSettlement(overrides?: CallOverrides): Promise<void>;

    "initializeSettlement()"(overrides?: CallOverrides): Promise<void>;

    noPriceConfidenceUserVotes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "noPriceConfidenceUserVotes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    noPriceConfidenceVotes(overrides?: CallOverrides): Promise<BigNumber>;

    "noPriceConfidenceVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceConfidence(overrides?: CallOverrides): Promise<boolean>;

    "priceConfidence()"(overrides?: CallOverrides): Promise<boolean>;

    priceDiscoveryStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "priceDiscoveryStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    setBtcPriceProvider(
      provider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBtcPriceProvider(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEthPriceProvider(
      provider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setEthPriceProvider(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNewPriceProviders(
      ethProvider: string,
      btcProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setNewPriceProviders(address,address)"(
      ethProvider: string,
      btcProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    settlementPrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "settlementPrice(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeTokensForNoPriceConfidence(
      countCNPToStake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "stakeTokensForNoPriceConfidence(uint256)"(
      countCNPToStake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stop(overrides?: CallOverrides): Promise<void>;

    "stop()"(overrides?: CallOverrides): Promise<void>;

    stopped(overrides?: CallOverrides): Promise<boolean>;

    "stopped()"(overrides?: CallOverrides): Promise<boolean>;

    unstakeTokensForNoPriceConfidence(overrides?: CallOverrides): Promise<void>;

    "unstakeTokensForNoPriceConfidence()"(
      overrides?: CallOverrides
    ): Promise<void>;

    validUpdate(action: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "validUpdate(bytes4)"(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawCollateral(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawCollateral(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Initialized(governor: string | null): EventFilter;

    NoConfidenceConfirmed(account: string | null): EventFilter;

    ParameterUpdated(paramName: string | null, value: null): EventFilter;

    ParameterUpdatedAddress(
      paramName: string | null,
      _address: string | null
    ): EventFilter;

    SettlementCollateralForCoin(
      positionID: BigNumberish | null,
      caller: string | null,
      coinCount: null,
      collateralCount: null
    ): EventFilter;

    SettlementInitialized(settlementDiscoveryStartTime: null): EventFilter;

    SettlementWithdrawCollateral(
      positionID: BigNumberish | null,
      owner: string | null,
      collateralToWithdraw: null
    ): EventFilter;

    StakedNoConfidenceTokens(account: string | null, count: null): EventFilter;

    Stopped(): EventFilter;

    UnstakedNoConfidenceTokens(
      account: string | null,
      count: null
    ): EventFilter;
  };

  estimateGas: {
    SETTLEMENT_PRICE_NO_CONFIDENCE_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "SETTLEMENT_PRICE_NO_CONFIDENCE_THRESHOLD()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    btcPriceProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "btcPriceProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    cnp(overrides?: CallOverrides): Promise<BigNumber>;

    "cnp()"(overrides?: CallOverrides): Promise<BigNumber>;

    confirmNoPriceConfidence(overrides?: Overrides): Promise<BigNumber>;

    "confirmNoPriceConfidence()"(overrides?: Overrides): Promise<BigNumber>;

    confirmPrices(overrides?: Overrides): Promise<BigNumber>;

    "confirmPrices()"(overrides?: Overrides): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    "deployer()"(overrides?: CallOverrides): Promise<BigNumber>;

    ethPriceProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "ethPriceProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralForCoin(
      positionID: BigNumberish,
      coinCount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getCollateralForCoin(uint64,uint256)"(
      positionID: BigNumberish,
      coinCount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getRecentPrices(overrides?: CallOverrides): Promise<BigNumber>;

    "getRecentPrices()"(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    init(_governor: string, overrides?: Overrides): Promise<BigNumber>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initializeSettlement(overrides?: Overrides): Promise<BigNumber>;

    "initializeSettlement()"(overrides?: Overrides): Promise<BigNumber>;

    noPriceConfidenceUserVotes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "noPriceConfidenceUserVotes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    noPriceConfidenceVotes(overrides?: CallOverrides): Promise<BigNumber>;

    "noPriceConfidenceVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceConfidence(overrides?: CallOverrides): Promise<BigNumber>;

    "priceConfidence()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceDiscoveryStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "priceDiscoveryStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    setBtcPriceProvider(
      provider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBtcPriceProvider(address)"(
      provider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setEthPriceProvider(
      provider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setEthPriceProvider(address)"(
      provider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setNewPriceProviders(
      ethProvider: string,
      btcProvider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setNewPriceProviders(address,address)"(
      ethProvider: string,
      btcProvider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    settlementPrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "settlementPrice(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeTokensForNoPriceConfidence(
      countCNPToStake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "stakeTokensForNoPriceConfidence(uint256)"(
      countCNPToStake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stop(overrides?: Overrides): Promise<BigNumber>;

    "stop()"(overrides?: Overrides): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    "stopped()"(overrides?: CallOverrides): Promise<BigNumber>;

    unstakeTokensForNoPriceConfidence(
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unstakeTokensForNoPriceConfidence()"(
      overrides?: Overrides
    ): Promise<BigNumber>;

    validUpdate(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validUpdate(bytes4)"(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawCollateral(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawCollateral(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SETTLEMENT_PRICE_NO_CONFIDENCE_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SETTLEMENT_PRICE_NO_CONFIDENCE_THRESHOLD()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    btcPriceProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "btcPriceProvider()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cnp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cnp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    confirmNoPriceConfidence(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "confirmNoPriceConfidence()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    confirmPrices(overrides?: Overrides): Promise<PopulatedTransaction>;

    "confirmPrices()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deployer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethPriceProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ethPriceProvider()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralForCoin(
      positionID: BigNumberish,
      coinCount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getCollateralForCoin(uint64,uint256)"(
      positionID: BigNumberish,
      coinCount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getRecentPrices(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRecentPrices()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      _governor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initializeSettlement(overrides?: Overrides): Promise<PopulatedTransaction>;

    "initializeSettlement()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    noPriceConfidenceUserVotes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "noPriceConfidenceUserVotes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    noPriceConfidenceVotes(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "noPriceConfidenceVotes()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceConfidence(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "priceConfidence()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceDiscoveryStartTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceDiscoveryStartTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBtcPriceProvider(
      provider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBtcPriceProvider(address)"(
      provider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setEthPriceProvider(
      provider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEthPriceProvider(address)"(
      provider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setNewPriceProviders(
      ethProvider: string,
      btcProvider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setNewPriceProviders(address,address)"(
      ethProvider: string,
      btcProvider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settlementPrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "settlementPrice(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeTokensForNoPriceConfidence(
      countCNPToStake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stakeTokensForNoPriceConfidence(uint256)"(
      countCNPToStake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stop(overrides?: Overrides): Promise<PopulatedTransaction>;

    "stop()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stopped()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unstakeTokensForNoPriceConfidence(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unstakeTokensForNoPriceConfidence()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validUpdate(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validUpdate(bytes4)"(
      action: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawCollateral(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawCollateral(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
