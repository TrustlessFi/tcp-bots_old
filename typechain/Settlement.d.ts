/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SettlementInterface extends ethers.utils.Interface {
  functions: {
    "SETTLEMENT_MIN_PRICE_THRESHOLD()": FunctionFragment;
    "cnp()": FunctionFragment;
    "confirmPrice(uint64)": FunctionFragment;
    "currentPeriod()": FunctionFragment;
    "ethAggregator()": FunctionFragment;
    "getCollateralForCoin(uint64,uint256)": FunctionFragment;
    "getRecentEthChainlinkPrice()": FunctionFragment;
    "governor()": FunctionFragment;
    "init(address)": FunctionFragment;
    "initializeSettlement()": FunctionFragment;
    "periodLength()": FunctionFragment;
    "priceCandidate(uint64)": FunctionFragment;
    "pricesCandidateVotes(uint64)": FunctionFragment;
    "setSettlementPriceThreshold(uint256)": FunctionFragment;
    "settlementDiscoveryStartTime()": FunctionFragment;
    "settlementPrice()": FunctionFragment;
    "settlementPriceThreshold()": FunctionFragment;
    "stakeTokensForSettlementPrice(uint256)": FunctionFragment;
    "stop()": FunctionFragment;
    "unstakeTokensForSettlementPrice(uint64)": FunctionFragment;
    "userVotes(uint64,address)": FunctionFragment;
    "withdrawCollateral(uint64)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "SETTLEMENT_MIN_PRICE_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cnp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "confirmPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethAggregator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralForCoin",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecentEthChainlinkPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initializeSettlement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "periodLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceCandidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pricesCandidateVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSettlementPriceThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementDiscoveryStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settlementPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settlementPriceThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeTokensForSettlementPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstakeTokensForSettlementPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userVotes",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "SETTLEMENT_MIN_PRICE_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cnp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "confirmPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralForCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecentEthChainlinkPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricesCandidateVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSettlementPriceThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlementDiscoveryStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlementPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlementPriceThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeTokensForSettlementPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeTokensForSettlementPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(address)": EventFragment;
    "ParameterUpdated(string,uint256)": EventFragment;
    "SettlementCollateralForCoin(uint64,address,uint256,uint256)": EventFragment;
    "SettlementInitialized(uint256)": EventFragment;
    "SettlementPriceConfirmed(address,uint64,uint256)": EventFragment;
    "SettlementWithdrawCollateral(uint64,address,uint256)": EventFragment;
    "StakedSettlementTokens(address,uint64,uint256,uint256)": EventFragment;
    "Stopped()": EventFragment;
    "UnstakedSettlementTokens(address,uint64,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SettlementCollateralForCoin"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettlementInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettlementPriceConfirmed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SettlementWithdrawCollateral"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakedSettlementTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stopped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakedSettlementTokens"): EventFragment;
}

export class Settlement extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SettlementInterface;

  functions: {
    SETTLEMENT_MIN_PRICE_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "SETTLEMENT_MIN_PRICE_THRESHOLD()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    cnp(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "cnp()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    confirmPrice(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "confirmPrice(uint64)"(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    currentPeriod(
      overrides?: CallOverrides
    ): Promise<{
      period: BigNumber;
      0: BigNumber;
    }>;

    "currentPeriod()"(
      overrides?: CallOverrides
    ): Promise<{
      period: BigNumber;
      0: BigNumber;
    }>;

    ethAggregator(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "ethAggregator()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getCollateralForCoin(
      positionID: BigNumberish,
      coinCount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getCollateralForCoin(uint64,uint256)"(
      positionID: BigNumberish,
      coinCount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getRecentEthChainlinkPrice(
      overrides?: CallOverrides
    ): Promise<{
      ethPrice: BigNumber;
      0: BigNumber;
    }>;

    "getRecentEthChainlinkPrice()"(
      overrides?: CallOverrides
    ): Promise<{
      ethPrice: BigNumber;
      0: BigNumber;
    }>;

    governor(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "governor()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    init(
      governor_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address)"(
      governor_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initializeSettlement(overrides?: Overrides): Promise<ContractTransaction>;

    "initializeSettlement()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    periodLength(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "periodLength()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    priceCandidate(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "priceCandidate(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    pricesCandidateVotes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "pricesCandidateVotes(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    setSettlementPriceThreshold(
      threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSettlementPriceThreshold(uint256)"(
      threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settlementDiscoveryStartTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "settlementDiscoveryStartTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    settlementPrice(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "settlementPrice()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    settlementPriceThreshold(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "settlementPriceThreshold()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    stakeTokensForSettlementPrice(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stakeTokensForSettlementPrice(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stop(overrides?: Overrides): Promise<ContractTransaction>;

    "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

    unstakeTokensForSettlementPrice(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unstakeTokensForSettlementPrice(uint64)"(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userVotes(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "userVotes(uint64,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    withdrawCollateral(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawCollateral(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  SETTLEMENT_MIN_PRICE_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  "SETTLEMENT_MIN_PRICE_THRESHOLD()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cnp(overrides?: CallOverrides): Promise<string>;

  "cnp()"(overrides?: CallOverrides): Promise<string>;

  confirmPrice(
    period: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "confirmPrice(uint64)"(
    period: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "currentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  ethAggregator(overrides?: CallOverrides): Promise<string>;

  "ethAggregator()"(overrides?: CallOverrides): Promise<string>;

  getCollateralForCoin(
    positionID: BigNumberish,
    coinCount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getCollateralForCoin(uint64,uint256)"(
    positionID: BigNumberish,
    coinCount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getRecentEthChainlinkPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "getRecentEthChainlinkPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  init(governor_: string, overrides?: Overrides): Promise<ContractTransaction>;

  "init(address)"(
    governor_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initializeSettlement(overrides?: Overrides): Promise<ContractTransaction>;

  "initializeSettlement()"(overrides?: Overrides): Promise<ContractTransaction>;

  periodLength(overrides?: CallOverrides): Promise<BigNumber>;

  "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  priceCandidate(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "priceCandidate(uint64)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pricesCandidateVotes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pricesCandidateVotes(uint64)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setSettlementPriceThreshold(
    threshold: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSettlementPriceThreshold(uint256)"(
    threshold: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settlementDiscoveryStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  "settlementDiscoveryStartTime()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  settlementPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "settlementPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  settlementPriceThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  "settlementPriceThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

  stakeTokensForSettlementPrice(
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stakeTokensForSettlementPrice(uint256)"(
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stop(overrides?: Overrides): Promise<ContractTransaction>;

  "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

  unstakeTokensForSettlementPrice(
    period: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unstakeTokensForSettlementPrice(uint64)"(
    period: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userVotes(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userVotes(uint64,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawCollateral(
    positionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawCollateral(uint64)"(
    positionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    SETTLEMENT_MIN_PRICE_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "SETTLEMENT_MIN_PRICE_THRESHOLD()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cnp(overrides?: CallOverrides): Promise<string>;

    "cnp()"(overrides?: CallOverrides): Promise<string>;

    confirmPrice(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "confirmPrice(uint64)"(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    ethAggregator(overrides?: CallOverrides): Promise<string>;

    "ethAggregator()"(overrides?: CallOverrides): Promise<string>;

    getCollateralForCoin(
      positionID: BigNumberish,
      coinCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "getCollateralForCoin(uint64,uint256)"(
      positionID: BigNumberish,
      coinCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRecentEthChainlinkPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getRecentEthChainlinkPrice()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    init(governor_: string, overrides?: CallOverrides): Promise<void>;

    "init(address)"(
      governor_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeSettlement(overrides?: CallOverrides): Promise<void>;

    "initializeSettlement()"(overrides?: CallOverrides): Promise<void>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceCandidate(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceCandidate(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pricesCandidateVotes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pricesCandidateVotes(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setSettlementPriceThreshold(
      threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSettlementPriceThreshold(uint256)"(
      threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settlementDiscoveryStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "settlementDiscoveryStartTime()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settlementPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "settlementPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    settlementPriceThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "settlementPriceThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakeTokensForSettlementPrice(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "stakeTokensForSettlementPrice(uint256)"(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stop(overrides?: CallOverrides): Promise<void>;

    "stop()"(overrides?: CallOverrides): Promise<void>;

    unstakeTokensForSettlementPrice(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unstakeTokensForSettlementPrice(uint64)"(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userVotes(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userVotes(uint64,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawCollateral(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawCollateral(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Initialized(governor: string | null): EventFilter;

    ParameterUpdated(paramName: string | null, value: null): EventFilter;

    SettlementCollateralForCoin(
      positionID: BigNumberish | null,
      caller: string | null,
      coinCount: null,
      collateralCount: null
    ): EventFilter;

    SettlementInitialized(settlementDiscoveryStartTime: null): EventFilter;

    SettlementPriceConfirmed(
      account: string | null,
      period: BigNumberish | null,
      price: null
    ): EventFilter;

    SettlementWithdrawCollateral(
      positionID: BigNumberish | null,
      owner: string | null,
      collateralToWithdraw: null
    ): EventFilter;

    StakedSettlementTokens(
      account: string | null,
      period: BigNumberish | null,
      price: null,
      count: null
    ): EventFilter;

    Stopped(): EventFilter;

    UnstakedSettlementTokens(
      account: string | null,
      period: BigNumberish | null,
      count: null
    ): EventFilter;
  };

  estimateGas: {
    SETTLEMENT_MIN_PRICE_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "SETTLEMENT_MIN_PRICE_THRESHOLD()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cnp(overrides?: CallOverrides): Promise<BigNumber>;

    "cnp()"(overrides?: CallOverrides): Promise<BigNumber>;

    confirmPrice(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "confirmPrice(uint64)"(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    ethAggregator(overrides?: CallOverrides): Promise<BigNumber>;

    "ethAggregator()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralForCoin(
      positionID: BigNumberish,
      coinCount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getCollateralForCoin(uint64,uint256)"(
      positionID: BigNumberish,
      coinCount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getRecentEthChainlinkPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getRecentEthChainlinkPrice()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    init(governor_: string, overrides?: Overrides): Promise<BigNumber>;

    "init(address)"(
      governor_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initializeSettlement(overrides?: Overrides): Promise<BigNumber>;

    "initializeSettlement()"(overrides?: Overrides): Promise<BigNumber>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceCandidate(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceCandidate(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pricesCandidateVotes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pricesCandidateVotes(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setSettlementPriceThreshold(
      threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSettlementPriceThreshold(uint256)"(
      threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    settlementDiscoveryStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "settlementDiscoveryStartTime()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settlementPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "settlementPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    settlementPriceThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "settlementPriceThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakeTokensForSettlementPrice(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "stakeTokensForSettlementPrice(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stop(overrides?: Overrides): Promise<BigNumber>;

    "stop()"(overrides?: Overrides): Promise<BigNumber>;

    unstakeTokensForSettlementPrice(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unstakeTokensForSettlementPrice(uint64)"(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userVotes(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userVotes(uint64,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawCollateral(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawCollateral(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SETTLEMENT_MIN_PRICE_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SETTLEMENT_MIN_PRICE_THRESHOLD()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cnp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cnp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    confirmPrice(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "confirmPrice(uint64)"(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    currentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethAggregator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ethAggregator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollateralForCoin(
      positionID: BigNumberish,
      coinCount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getCollateralForCoin(uint64,uint256)"(
      positionID: BigNumberish,
      coinCount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getRecentEthChainlinkPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRecentEthChainlinkPrice()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      governor_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address)"(
      governor_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initializeSettlement(overrides?: Overrides): Promise<PopulatedTransaction>;

    "initializeSettlement()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    periodLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "periodLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceCandidate(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceCandidate(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pricesCandidateVotes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pricesCandidateVotes(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setSettlementPriceThreshold(
      threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSettlementPriceThreshold(uint256)"(
      threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settlementDiscoveryStartTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "settlementDiscoveryStartTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    settlementPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "settlementPrice()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    settlementPriceThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "settlementPriceThreshold()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeTokensForSettlementPrice(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stakeTokensForSettlementPrice(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stop(overrides?: Overrides): Promise<PopulatedTransaction>;

    "stop()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    unstakeTokensForSettlementPrice(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unstakeTokensForSettlementPrice(uint64)"(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userVotes(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userVotes(uint64,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawCollateral(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawCollateral(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
