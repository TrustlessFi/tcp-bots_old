/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ExampleSwapToPriceInterface extends ethers.utils.Interface {
  functions: {
    "computeProfitMaximizingTrade(uint256,uint256,uint256,uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "router()": FunctionFragment;
    "swapToPrice(address,address,uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "computeProfitMaximizingTrade",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapToPrice",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "computeProfitMaximizingTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapToPrice",
    data: BytesLike
  ): Result;

  events: {};
}

export class ExampleSwapToPrice extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ExampleSwapToPriceInterface;

  functions: {
    computeProfitMaximizingTrade(
      truePriceTokenA: BigNumberish,
      truePriceTokenB: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { aToB: boolean; amountIn: BigNumber }>;

    "computeProfitMaximizingTrade(uint256,uint256,uint256,uint256)"(
      truePriceTokenA: BigNumberish,
      truePriceTokenB: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { aToB: boolean; amountIn: BigNumber }>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    "factory()"(overrides?: CallOverrides): Promise<[string]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    "router()"(overrides?: CallOverrides): Promise<[string]>;

    swapToPrice(
      tokenA: string,
      tokenB: string,
      truePriceTokenA: BigNumberish,
      truePriceTokenB: BigNumberish,
      maxSpendTokenA: BigNumberish,
      maxSpendTokenB: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapToPrice(address,address,uint256,uint256,uint256,uint256,address,uint256)"(
      tokenA: string,
      tokenB: string,
      truePriceTokenA: BigNumberish,
      truePriceTokenB: BigNumberish,
      maxSpendTokenA: BigNumberish,
      maxSpendTokenB: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  computeProfitMaximizingTrade(
    truePriceTokenA: BigNumberish,
    truePriceTokenB: BigNumberish,
    reserveA: BigNumberish,
    reserveB: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { aToB: boolean; amountIn: BigNumber }>;

  "computeProfitMaximizingTrade(uint256,uint256,uint256,uint256)"(
    truePriceTokenA: BigNumberish,
    truePriceTokenB: BigNumberish,
    reserveA: BigNumberish,
    reserveB: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { aToB: boolean; amountIn: BigNumber }>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  router(overrides?: CallOverrides): Promise<string>;

  "router()"(overrides?: CallOverrides): Promise<string>;

  swapToPrice(
    tokenA: string,
    tokenB: string,
    truePriceTokenA: BigNumberish,
    truePriceTokenB: BigNumberish,
    maxSpendTokenA: BigNumberish,
    maxSpendTokenB: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapToPrice(address,address,uint256,uint256,uint256,uint256,address,uint256)"(
    tokenA: string,
    tokenB: string,
    truePriceTokenA: BigNumberish,
    truePriceTokenB: BigNumberish,
    maxSpendTokenA: BigNumberish,
    maxSpendTokenB: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    computeProfitMaximizingTrade(
      truePriceTokenA: BigNumberish,
      truePriceTokenB: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { aToB: boolean; amountIn: BigNumber }>;

    "computeProfitMaximizingTrade(uint256,uint256,uint256,uint256)"(
      truePriceTokenA: BigNumberish,
      truePriceTokenB: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { aToB: boolean; amountIn: BigNumber }>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    router(overrides?: CallOverrides): Promise<string>;

    "router()"(overrides?: CallOverrides): Promise<string>;

    swapToPrice(
      tokenA: string,
      tokenB: string,
      truePriceTokenA: BigNumberish,
      truePriceTokenB: BigNumberish,
      maxSpendTokenA: BigNumberish,
      maxSpendTokenB: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "swapToPrice(address,address,uint256,uint256,uint256,uint256,address,uint256)"(
      tokenA: string,
      tokenB: string,
      truePriceTokenA: BigNumberish,
      truePriceTokenB: BigNumberish,
      maxSpendTokenA: BigNumberish,
      maxSpendTokenB: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    computeProfitMaximizingTrade(
      truePriceTokenA: BigNumberish,
      truePriceTokenB: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeProfitMaximizingTrade(uint256,uint256,uint256,uint256)"(
      truePriceTokenA: BigNumberish,
      truePriceTokenB: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    "router()"(overrides?: CallOverrides): Promise<BigNumber>;

    swapToPrice(
      tokenA: string,
      tokenB: string,
      truePriceTokenA: BigNumberish,
      truePriceTokenB: BigNumberish,
      maxSpendTokenA: BigNumberish,
      maxSpendTokenB: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapToPrice(address,address,uint256,uint256,uint256,uint256,address,uint256)"(
      tokenA: string,
      tokenB: string,
      truePriceTokenA: BigNumberish,
      truePriceTokenB: BigNumberish,
      maxSpendTokenA: BigNumberish,
      maxSpendTokenB: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    computeProfitMaximizingTrade(
      truePriceTokenA: BigNumberish,
      truePriceTokenB: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeProfitMaximizingTrade(uint256,uint256,uint256,uint256)"(
      truePriceTokenA: BigNumberish,
      truePriceTokenB: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "router()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapToPrice(
      tokenA: string,
      tokenB: string,
      truePriceTokenA: BigNumberish,
      truePriceTokenB: BigNumberish,
      maxSpendTokenA: BigNumberish,
      maxSpendTokenB: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapToPrice(address,address,uint256,uint256,uint256,uint256,address,uint256)"(
      tokenA: string,
      tokenB: string,
      truePriceTokenA: BigNumberish,
      truePriceTokenB: BigNumberish,
      maxSpendTokenA: BigNumberish,
      maxSpendTokenB: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
