/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IRewardsInterface extends ethers.utils.Interface {
  functions: {
    "addReferencePool(address)": FunctionFragment;
    "borrowRewardsPortion()": FunctionFragment;
    "completeSetup()": FunctionFragment;
    "maxDebtSupported()": FunctionFragment;
    "removeReferencePool(address)": FunctionFragment;
    "stop()": FunctionFragment;
    "systemNotifyNewPriceInfo(address,uint256,int24)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addReferencePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowRewardsPortion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeSetup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxDebtSupported",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeReferencePool",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "systemNotifyNewPriceInfo",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addReferencePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowRewardsPortion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDebtSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeReferencePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "systemNotifyNewPriceInfo",
    data: BytesLike
  ): Result;

  events: {
    "AddReferencePool(address)": EventFragment;
    "MaxLiquidityDecreasePerPeriod(uint256)": EventFragment;
    "MinCoinLiquidityPerPosition(uint128)": EventFragment;
    "MinCollateralPoolLiquidity(uint256)": EventFragment;
    "MinLiquidationRatio(uint256)": EventFragment;
    "MinTotalReferencePoolLiquidity(uint256)": EventFragment;
    "PoolTokensUnlocked(address,address,uint256)": EventFragment;
    "PositionLocked(uint256,address,uint128,int24,int24)": EventFragment;
    "PriceUpdateTwapDuration(uint32)": EventFragment;
    "RemoveReferencePool(address)": EventFragment;
    "RewardsAccrued(uint256,uint64)": EventFragment;
    "RewardsDistributed(address,uint64,uint256)": EventFragment;
    "RewardsPortions(uint256,uint256,uint256)": EventFragment;
    "ShutdownPoolTokensUnlocked(address,address,uint256)": EventFragment;
    "TimePeriodOfOutOfRangeRewardsToReceive(uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddReferencePool"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MaxLiquidityDecreasePerPeriod"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinCoinLiquidityPerPosition"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinCollateralPoolLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinLiquidationRatio"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinTotalReferencePoolLiquidity"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolTokensUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdateTwapDuration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveReferencePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsAccrued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsPortions"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShutdownPoolTokensUnlocked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TimePeriodOfOutOfRangeRewardsToReceive"
  ): EventFragment;
}

export class IRewards extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRewardsInterface;

  functions: {
    addReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowRewardsPortion(overrides?: CallOverrides): Promise<[BigNumber]>;

    "borrowRewardsPortion()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    completeSetup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "completeSetup()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxDebtSupported(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxDebtSupported()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stop()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    systemNotifyNewPriceInfo(
      pool: string,
      liquidityPerCoin: BigNumberish,
      tick: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "systemNotifyNewPriceInfo(address,uint256,int24)"(
      pool: string,
      liquidityPerCoin: BigNumberish,
      tick: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addReferencePool(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addReferencePool(address)"(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

  "borrowRewardsPortion()"(overrides?: CallOverrides): Promise<BigNumber>;

  completeSetup(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "completeSetup()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxDebtSupported(overrides?: CallOverrides): Promise<BigNumber>;

  "maxDebtSupported()"(overrides?: CallOverrides): Promise<BigNumber>;

  removeReferencePool(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeReferencePool(address)"(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stop(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stop()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  systemNotifyNewPriceInfo(
    pool: string,
    liquidityPerCoin: BigNumberish,
    tick: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "systemNotifyNewPriceInfo(address,uint256,int24)"(
    pool: string,
    liquidityPerCoin: BigNumberish,
    tick: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addReferencePool(pool: string, overrides?: CallOverrides): Promise<void>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowRewardsPortion()"(overrides?: CallOverrides): Promise<BigNumber>;

    completeSetup(overrides?: CallOverrides): Promise<void>;

    "completeSetup()"(overrides?: CallOverrides): Promise<void>;

    maxDebtSupported(overrides?: CallOverrides): Promise<BigNumber>;

    "maxDebtSupported()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeReferencePool(pool: string, overrides?: CallOverrides): Promise<void>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stop(overrides?: CallOverrides): Promise<void>;

    "stop()"(overrides?: CallOverrides): Promise<void>;

    systemNotifyNewPriceInfo(
      pool: string,
      liquidityPerCoin: BigNumberish,
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "systemNotifyNewPriceInfo(address,uint256,int24)"(
      pool: string,
      liquidityPerCoin: BigNumberish,
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddReferencePool(
      pool: string | null
    ): TypedEventFilter<[string], { pool: string }>;

    MaxLiquidityDecreasePerPeriod(
      decreasePortion: null
    ): TypedEventFilter<[BigNumber], { decreasePortion: BigNumber }>;

    MinCoinLiquidityPerPosition(
      minCoinLiquidityPerPosition: null
    ): TypedEventFilter<
      [BigNumber],
      { minCoinLiquidityPerPosition: BigNumber }
    >;

    MinCollateralPoolLiquidity(
      min: null
    ): TypedEventFilter<[BigNumber], { min: BigNumber }>;

    MinLiquidationRatio(
      min: null
    ): TypedEventFilter<[BigNumber], { min: BigNumber }>;

    MinTotalReferencePoolLiquidity(
      min: null
    ): TypedEventFilter<[BigNumber], { min: BigNumber }>;

    PoolTokensUnlocked(
      sender: string | null,
      pool: string | null,
      count: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; pool: string; count: BigNumber }
    >;

    PositionLocked(
      nftID: BigNumberish | null,
      pool: string | null,
      liquidity: null,
      tickLower: null,
      tickUpper: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, number, number],
      {
        nftID: BigNumber;
        pool: string;
        liquidity: BigNumber;
        tickLower: number;
        tickUpper: number;
      }
    >;

    PriceUpdateTwapDuration(
      duration: null
    ): TypedEventFilter<[number], { duration: number }>;

    RemoveReferencePool(
      pool: string | null
    ): TypedEventFilter<[string], { pool: string }>;

    RewardsAccrued(
      count: null,
      periods: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { count: BigNumber; periods: BigNumber }
    >;

    RewardsDistributed(
      account: string | null,
      period: BigNumberish | null,
      cnpRewards: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; period: BigNumber; cnpRewards: BigNumber }
    >;

    RewardsPortions(
      protocolPortion: null,
      collateralPortion: null,
      referencePortion: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        protocolPortion: BigNumber;
        collateralPortion: BigNumber;
        referencePortion: BigNumber;
      }
    >;

    ShutdownPoolTokensUnlocked(
      sender: string | null,
      pool: string | null,
      count: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; pool: string; count: BigNumber }
    >;

    TimePeriodOfOutOfRangeRewardsToReceive(
      timePeriod: null
    ): TypedEventFilter<[BigNumber], { timePeriod: BigNumber }>;
  };

  estimateGas: {
    addReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowRewardsPortion()"(overrides?: CallOverrides): Promise<BigNumber>;

    completeSetup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "completeSetup()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxDebtSupported(overrides?: CallOverrides): Promise<BigNumber>;

    "maxDebtSupported()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stop()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    systemNotifyNewPriceInfo(
      pool: string,
      liquidityPerCoin: BigNumberish,
      tick: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "systemNotifyNewPriceInfo(address,uint256,int24)"(
      pool: string,
      liquidityPerCoin: BigNumberish,
      tick: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowRewardsPortion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "borrowRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeSetup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "completeSetup()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxDebtSupported(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxDebtSupported()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stop()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    systemNotifyNewPriceInfo(
      pool: string,
      liquidityPerCoin: BigNumberish,
      tick: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "systemNotifyNewPriceInfo(address,uint256,int24)"(
      pool: string,
      liquidityPerCoin: BigNumberish,
      tick: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
