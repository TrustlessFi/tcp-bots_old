/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IRewardsInterface extends ethers.utils.Interface {
  functions: {
    "borrowRewardsPortion()": FunctionFragment;
    "completeSetup()": FunctionFragment;
    "stop()": FunctionFragment;
    "systemEnsureMinimumCollateralLiquidity(uint8,uint256)": FunctionFragment;
    "systemEnsureMinimumReferenceLiquidity(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "borrowRewardsPortion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeSetup",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "systemEnsureMinimumCollateralLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "systemEnsureMinimumReferenceLiquidity",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "borrowRewardsPortion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "systemEnsureMinimumCollateralLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "systemEnsureMinimumReferenceLiquidity",
    data: BytesLike
  ): Result;

  events: {
    "PairTokensLocked(address,address,uint256,uint64)": EventFragment;
    "PairTokensUnlocked(address,address,uint256)": EventFragment;
    "ParameterUpdated(string,uint256)": EventFragment;
    "ParameterUpdated64(string,uint64)": EventFragment;
    "RewardsAccrued(uint256,uint64)": EventFragment;
    "RewardsDistributed(address,uint64,uint256)": EventFragment;
    "ShutdownPairTokensUnlocked(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PairTokensLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairTokensUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated64"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsAccrued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShutdownPairTokensUnlocked"): EventFragment;
}

export class IRewards extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IRewardsInterface;

  functions: {
    borrowRewardsPortion(overrides?: CallOverrides): Promise<[BigNumber]>;

    "borrowRewardsPortion()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    completeSetup(overrides?: Overrides): Promise<ContractTransaction>;

    "completeSetup()"(overrides?: Overrides): Promise<ContractTransaction>;

    stop(overrides?: Overrides): Promise<ContractTransaction>;

    "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

    systemEnsureMinimumCollateralLiquidity(
      collateralType: BigNumberish,
      collateralDebt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "systemEnsureMinimumCollateralLiquidity(uint8,uint256)"(
      collateralType: BigNumberish,
      collateralDebt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    systemEnsureMinimumReferenceLiquidity(
      debt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "systemEnsureMinimumReferenceLiquidity(uint256)"(
      debt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  borrowRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

  "borrowRewardsPortion()"(overrides?: CallOverrides): Promise<BigNumber>;

  completeSetup(overrides?: Overrides): Promise<ContractTransaction>;

  "completeSetup()"(overrides?: Overrides): Promise<ContractTransaction>;

  stop(overrides?: Overrides): Promise<ContractTransaction>;

  "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

  systemEnsureMinimumCollateralLiquidity(
    collateralType: BigNumberish,
    collateralDebt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "systemEnsureMinimumCollateralLiquidity(uint8,uint256)"(
    collateralType: BigNumberish,
    collateralDebt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  systemEnsureMinimumReferenceLiquidity(
    debt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "systemEnsureMinimumReferenceLiquidity(uint256)"(
    debt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    borrowRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowRewardsPortion()"(overrides?: CallOverrides): Promise<BigNumber>;

    completeSetup(overrides?: CallOverrides): Promise<void>;

    "completeSetup()"(overrides?: CallOverrides): Promise<void>;

    stop(overrides?: CallOverrides): Promise<void>;

    "stop()"(overrides?: CallOverrides): Promise<void>;

    systemEnsureMinimumCollateralLiquidity(
      collateralType: BigNumberish,
      collateralDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "systemEnsureMinimumCollateralLiquidity(uint8,uint256)"(
      collateralType: BigNumberish,
      collateralDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    systemEnsureMinimumReferenceLiquidity(
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "systemEnsureMinimumReferenceLiquidity(uint256)"(
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    PairTokensLocked(
      sender: string | null,
      pair: string | null,
      count: null,
      unlockPeriod: null
    ): EventFilter;

    PairTokensUnlocked(
      sender: string | null,
      pair: string | null,
      count: null
    ): EventFilter;

    ParameterUpdated(paramName: string | null, value: null): EventFilter;

    ParameterUpdated64(paramName: string | null, value: null): EventFilter;

    RewardsAccrued(count: null, periods: null): EventFilter;

    RewardsDistributed(
      account: string | null,
      period: BigNumberish | null,
      cnpRewards: null
    ): EventFilter;

    ShutdownPairTokensUnlocked(
      sender: string | null,
      pair: string | null,
      count: null
    ): EventFilter;
  };

  estimateGas: {
    borrowRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowRewardsPortion()"(overrides?: CallOverrides): Promise<BigNumber>;

    completeSetup(overrides?: Overrides): Promise<BigNumber>;

    "completeSetup()"(overrides?: Overrides): Promise<BigNumber>;

    stop(overrides?: Overrides): Promise<BigNumber>;

    "stop()"(overrides?: Overrides): Promise<BigNumber>;

    systemEnsureMinimumCollateralLiquidity(
      collateralType: BigNumberish,
      collateralDebt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "systemEnsureMinimumCollateralLiquidity(uint8,uint256)"(
      collateralType: BigNumberish,
      collateralDebt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    systemEnsureMinimumReferenceLiquidity(
      debt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "systemEnsureMinimumReferenceLiquidity(uint256)"(
      debt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrowRewardsPortion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "borrowRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeSetup(overrides?: Overrides): Promise<PopulatedTransaction>;

    "completeSetup()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    stop(overrides?: Overrides): Promise<PopulatedTransaction>;

    "stop()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    systemEnsureMinimumCollateralLiquidity(
      collateralType: BigNumberish,
      collateralDebt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "systemEnsureMinimumCollateralLiquidity(uint8,uint256)"(
      collateralType: BigNumberish,
      collateralDebt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    systemEnsureMinimumReferenceLiquidity(
      debt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "systemEnsureMinimumReferenceLiquidity(uint256)"(
      debt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
