/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CoinLiquidatorInterface extends ethers.utils.Interface {
  functions: {
    "executeOnFlashLiquidate(uint256,uint256)": FunctionFragment;
    "governor()": FunctionFragment;
    "liquidate(uint8,uint256,uint256)": FunctionFragment;
    "router()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "executeOnFlashLiquidate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "executeOnFlashLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;

  events: {
    "Completed(address,address,uint8,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Completed"): EventFragment;
}

export class CoinLiquidator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CoinLiquidatorInterface;

  functions: {
    executeOnFlashLiquidate(
      collateralSent: BigNumberish,
      baseTokensToRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeOnFlashLiquidate(uint256,uint256)"(
      collateralSent: BigNumberish,
      baseTokensToRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    "governor()"(overrides?: CallOverrides): Promise<[string]>;

    liquidate(
      _collateralType: BigNumberish,
      _minPrice: BigNumberish,
      _debt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "liquidate(uint8,uint256,uint256)"(
      _collateralType: BigNumberish,
      _minPrice: BigNumberish,
      _debt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    "router()"(overrides?: CallOverrides): Promise<[string]>;
  };

  executeOnFlashLiquidate(
    collateralSent: BigNumberish,
    baseTokensToRepay: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeOnFlashLiquidate(uint256,uint256)"(
    collateralSent: BigNumberish,
    baseTokensToRepay: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  liquidate(
    _collateralType: BigNumberish,
    _minPrice: BigNumberish,
    _debt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "liquidate(uint8,uint256,uint256)"(
    _collateralType: BigNumberish,
    _minPrice: BigNumberish,
    _debt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  "router()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    executeOnFlashLiquidate(
      collateralSent: BigNumberish,
      baseTokensToRepay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "executeOnFlashLiquidate(uint256,uint256)"(
      collateralSent: BigNumberish,
      baseTokensToRepay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    liquidate(
      _collateralType: BigNumberish,
      _minPrice: BigNumberish,
      _debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "liquidate(uint8,uint256,uint256)"(
      _collateralType: BigNumberish,
      _minPrice: BigNumberish,
      _debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    "router()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Completed(
      liquidations: string | null,
      caller: string | null,
      collateralType: BigNumberish | null,
      minPrice: null,
      collateralSent: null,
      baseTokensToRepay: null
    ): EventFilter;
  };

  estimateGas: {
    executeOnFlashLiquidate(
      collateralSent: BigNumberish,
      baseTokensToRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeOnFlashLiquidate(uint256,uint256)"(
      collateralSent: BigNumberish,
      baseTokensToRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      _collateralType: BigNumberish,
      _minPrice: BigNumberish,
      _debt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "liquidate(uint8,uint256,uint256)"(
      _collateralType: BigNumberish,
      _minPrice: BigNumberish,
      _debt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    "router()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    executeOnFlashLiquidate(
      collateralSent: BigNumberish,
      baseTokensToRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeOnFlashLiquidate(uint256,uint256)"(
      collateralSent: BigNumberish,
      baseTokensToRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidate(
      _collateralType: BigNumberish,
      _minPrice: BigNumberish,
      _debt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "liquidate(uint8,uint256,uint256)"(
      _collateralType: BigNumberish,
      _minPrice: BigNumberish,
      _debt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "router()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
