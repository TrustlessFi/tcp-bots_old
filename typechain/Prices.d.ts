/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PricesInterface extends ethers.utils.Interface {
  functions: {
    "collateralPairMinTwapTime()": FunctionFragment;
    "completeSetup()": FunctionFragment;
    "governor()": FunctionFragment;
    "init(address)": FunctionFragment;
    "obtainPrice(address,uint64,uint64,bool)": FunctionFragment;
    "priceInfo(address)": FunctionFragment;
    "referencePairMinTwapTime()": FunctionFragment;
    "setCollateralPairMinTwapTime(uint64)": FunctionFragment;
    "setReferencePairMinTwapTime(uint64)": FunctionFragment;
    "stop()": FunctionFragment;
    "updatePrice(address)": FunctionFragment;
    "viewPrice(address,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "collateralPairMinTwapTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeSetup",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "obtainPrice",
    values: [string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "priceInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "referencePairMinTwapTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralPairMinTwapTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferencePairMinTwapTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;
  encodeFunctionData(functionFragment: "updatePrice", values: [string]): string;
  encodeFunctionData(
    functionFragment: "viewPrice",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "collateralPairMinTwapTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "obtainPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referencePairMinTwapTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralPairMinTwapTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferencePairMinTwapTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "viewPrice", data: BytesLike): Result;

  events: {
    "Initialized(address)": EventFragment;
    "ParameterUpdated64(string,uint64)": EventFragment;
    "PriceUpdated(address,uint256,uint256,uint64)": EventFragment;
    "Stopped()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated64"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stopped"): EventFragment;
}

export class Prices extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PricesInterface;

  functions: {
    collateralPairMinTwapTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "collateralPairMinTwapTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    completeSetup(overrides?: Overrides): Promise<ContractTransaction>;

    "completeSetup()"(overrides?: Overrides): Promise<ContractTransaction>;

    governor(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "governor()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    init(
      governor_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address)"(
      governor_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    obtainPrice(
      pair: string,
      maxTwapTime: BigNumberish,
      maxPriceAge: BigNumberish,
      normalizeDecimals: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "obtainPrice(address,uint64,uint64,bool)"(
      pair: string,
      maxTwapTime: BigNumberish,
      maxPriceAge: BigNumberish,
      normalizeDecimals: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    priceInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      cumulative: BigNumber;
      priceTime: BigNumber;
      twapTime: BigNumber;
      t0DecimalMultiplier: BigNumber;
      t1DecimalMultiplier: BigNumber;
      coinIsToken0: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: boolean;
    }>;

    "priceInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      cumulative: BigNumber;
      priceTime: BigNumber;
      twapTime: BigNumber;
      t0DecimalMultiplier: BigNumber;
      t1DecimalMultiplier: BigNumber;
      coinIsToken0: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: boolean;
    }>;

    referencePairMinTwapTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "referencePairMinTwapTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    setCollateralPairMinTwapTime(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCollateralPairMinTwapTime(uint64)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setReferencePairMinTwapTime(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setReferencePairMinTwapTime(uint64)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stop(overrides?: Overrides): Promise<ContractTransaction>;

    "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

    updatePrice(
      pair: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePrice(address)"(
      pair: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    viewPrice(
      pair: string,
      normalizeDecimals: boolean,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      priceTime: BigNumber;
      twapTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "viewPrice(address,bool)"(
      pair: string,
      normalizeDecimals: boolean,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      priceTime: BigNumber;
      twapTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;
  };

  collateralPairMinTwapTime(overrides?: CallOverrides): Promise<BigNumber>;

  "collateralPairMinTwapTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  completeSetup(overrides?: Overrides): Promise<ContractTransaction>;

  "completeSetup()"(overrides?: Overrides): Promise<ContractTransaction>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  init(governor_: string, overrides?: Overrides): Promise<ContractTransaction>;

  "init(address)"(
    governor_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  obtainPrice(
    pair: string,
    maxTwapTime: BigNumberish,
    maxPriceAge: BigNumberish,
    normalizeDecimals: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "obtainPrice(address,uint64,uint64,bool)"(
    pair: string,
    maxTwapTime: BigNumberish,
    maxPriceAge: BigNumberish,
    normalizeDecimals: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  priceInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    price: BigNumber;
    cumulative: BigNumber;
    priceTime: BigNumber;
    twapTime: BigNumber;
    t0DecimalMultiplier: BigNumber;
    t1DecimalMultiplier: BigNumber;
    coinIsToken0: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: boolean;
  }>;

  "priceInfo(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    price: BigNumber;
    cumulative: BigNumber;
    priceTime: BigNumber;
    twapTime: BigNumber;
    t0DecimalMultiplier: BigNumber;
    t1DecimalMultiplier: BigNumber;
    coinIsToken0: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: boolean;
  }>;

  referencePairMinTwapTime(overrides?: CallOverrides): Promise<BigNumber>;

  "referencePairMinTwapTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  setCollateralPairMinTwapTime(
    time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCollateralPairMinTwapTime(uint64)"(
    time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setReferencePairMinTwapTime(
    time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setReferencePairMinTwapTime(uint64)"(
    time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stop(overrides?: Overrides): Promise<ContractTransaction>;

  "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

  updatePrice(
    pair: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePrice(address)"(
    pair: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  viewPrice(
    pair: string,
    normalizeDecimals: boolean,
    overrides?: CallOverrides
  ): Promise<{
    price: BigNumber;
    priceTime: BigNumber;
    twapTime: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "viewPrice(address,bool)"(
    pair: string,
    normalizeDecimals: boolean,
    overrides?: CallOverrides
  ): Promise<{
    price: BigNumber;
    priceTime: BigNumber;
    twapTime: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  callStatic: {
    collateralPairMinTwapTime(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralPairMinTwapTime()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeSetup(overrides?: CallOverrides): Promise<void>;

    "completeSetup()"(overrides?: CallOverrides): Promise<void>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    init(governor_: string, overrides?: CallOverrides): Promise<void>;

    "init(address)"(
      governor_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    obtainPrice(
      pair: string,
      maxTwapTime: BigNumberish,
      maxPriceAge: BigNumberish,
      normalizeDecimals: boolean,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      priceTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "obtainPrice(address,uint64,uint64,bool)"(
      pair: string,
      maxTwapTime: BigNumberish,
      maxPriceAge: BigNumberish,
      normalizeDecimals: boolean,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      priceTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    priceInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      cumulative: BigNumber;
      priceTime: BigNumber;
      twapTime: BigNumber;
      t0DecimalMultiplier: BigNumber;
      t1DecimalMultiplier: BigNumber;
      coinIsToken0: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: boolean;
    }>;

    "priceInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      cumulative: BigNumber;
      priceTime: BigNumber;
      twapTime: BigNumber;
      t0DecimalMultiplier: BigNumber;
      t1DecimalMultiplier: BigNumber;
      coinIsToken0: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: boolean;
    }>;

    referencePairMinTwapTime(overrides?: CallOverrides): Promise<BigNumber>;

    "referencePairMinTwapTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    setCollateralPairMinTwapTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCollateralPairMinTwapTime(uint64)"(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReferencePairMinTwapTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReferencePairMinTwapTime(uint64)"(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stop(overrides?: CallOverrides): Promise<void>;

    "stop()"(overrides?: CallOverrides): Promise<void>;

    updatePrice(pair: string, overrides?: CallOverrides): Promise<void>;

    "updatePrice(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<void>;

    viewPrice(
      pair: string,
      normalizeDecimals: boolean,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      priceTime: BigNumber;
      twapTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "viewPrice(address,bool)"(
      pair: string,
      normalizeDecimals: boolean,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      priceTime: BigNumber;
      twapTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;
  };

  filters: {
    Initialized(governor: string | null): EventFilter;

    ParameterUpdated64(paramName: string | null, value: null): EventFilter;

    PriceUpdated(
      pair: string | null,
      price: null,
      cumulative: null,
      twapTime: null
    ): EventFilter;

    Stopped(): EventFilter;
  };

  estimateGas: {
    collateralPairMinTwapTime(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralPairMinTwapTime()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeSetup(overrides?: Overrides): Promise<BigNumber>;

    "completeSetup()"(overrides?: Overrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    init(governor_: string, overrides?: Overrides): Promise<BigNumber>;

    "init(address)"(
      governor_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    obtainPrice(
      pair: string,
      maxTwapTime: BigNumberish,
      maxPriceAge: BigNumberish,
      normalizeDecimals: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "obtainPrice(address,uint64,uint64,bool)"(
      pair: string,
      maxTwapTime: BigNumberish,
      maxPriceAge: BigNumberish,
      normalizeDecimals: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    priceInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "priceInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referencePairMinTwapTime(overrides?: CallOverrides): Promise<BigNumber>;

    "referencePairMinTwapTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    setCollateralPairMinTwapTime(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCollateralPairMinTwapTime(uint64)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setReferencePairMinTwapTime(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setReferencePairMinTwapTime(uint64)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stop(overrides?: Overrides): Promise<BigNumber>;

    "stop()"(overrides?: Overrides): Promise<BigNumber>;

    updatePrice(pair: string, overrides?: Overrides): Promise<BigNumber>;

    "updatePrice(address)"(
      pair: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    viewPrice(
      pair: string,
      normalizeDecimals: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "viewPrice(address,bool)"(
      pair: string,
      normalizeDecimals: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    collateralPairMinTwapTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateralPairMinTwapTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeSetup(overrides?: Overrides): Promise<PopulatedTransaction>;

    "completeSetup()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      governor_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address)"(
      governor_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    obtainPrice(
      pair: string,
      maxTwapTime: BigNumberish,
      maxPriceAge: BigNumberish,
      normalizeDecimals: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "obtainPrice(address,uint64,uint64,bool)"(
      pair: string,
      maxTwapTime: BigNumberish,
      maxPriceAge: BigNumberish,
      normalizeDecimals: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    priceInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referencePairMinTwapTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "referencePairMinTwapTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCollateralPairMinTwapTime(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCollateralPairMinTwapTime(uint64)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setReferencePairMinTwapTime(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setReferencePairMinTwapTime(uint64)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stop(overrides?: Overrides): Promise<PopulatedTransaction>;

    "stop()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    updatePrice(
      pair: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePrice(address)"(
      pair: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    viewPrice(
      pair: string,
      normalizeDecimals: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "viewPrice(address,bool)"(
      pair: string,
      normalizeDecimals: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
